{"version":3,"sources":["components/bottombox/upload-data/helpers/types.js","images/dxc.png","images/feedback.png","actions/types.js","actions/ccmsActions.js","actions/config.js","components/ccms/components/Tables/columns.js","components/ccms/components/Modals/CcmsModal.js","components/ccms/components/Comment/CommentList.js","components/ccms/components/Comment/InputForm.js","components/ccms/components/Comment/CommentForm.js","components/ccms/components/Helpers/Helpers.js","components/ccms/components/Input/DynamicInput.js","components/ccms/components/Modals/DynamicConfirmModal.js","components/ccms/components/List/DynamicList.js","components/ccms/components/Forms/DynamicForm.js","components/ccms/components/CcmsRca/ConfirmRcaSubmitModal.js","components/ccms/components/CcmsRca/CcmsRcaForm.js","components/ccms/components/CcmsRca/RcaFindingsAndInvestigation/RcaFniModal.js","components/ccms/components/CcmsRca/RcaFindingsAndInvestigation/RcaFniList.js","components/ccms/components/CcmsRca/RcaFindingsAndInvestigation/RcaFindingsAndInvestigationForm.js","components/ccms/components/CcmsRca/CcmsRcaModal.js","components/ccms/components/CcmsForm.js","components/ccms/components/Modals/NewCcmsFormModal.js","components/ccms/components/CcmsAdmin/CcmsAdminForm.js","components/ccms/components/CcmsAdmin/CcmsAdminModal.js","components/ccms/components/CcmsAccessRequest/CcmsAccessRequest.js","components/ccms/components/CcmsAccessRequest/CcmsAccessRequestModal.js","components/ccms/components/Drivers/ConfirmModal.js","components/ccms/components/Drivers/AddDriverForm.js","components/ccms/components/Drivers/DriverData.js","components/ccms/components/Drivers/DriverTable.js","components/ccms/components/Drivers/DriversForm.js","components/ccms/components/Modals/DynamicFormModal.js","components/ccms/components/Tables/DataTableDropdownButton.js","components/ccms/components/Modals/GeneralDataConfirmModal.js","components/ccms/components/Tables/GeneralDataTable.js","components/ccms/components/Tables/CcmsTable2.js","components/ccms/components/Ccms.js","actions/auth.js","actions/surveyActions.js","actions/messages.js","actions/modalToggleActions.js","components/bottombox/rca/components/SingleInput.js","components/bottombox/rca/components/SelectInput.js","components/bottombox/components/SurveyDetails.js","components/bottombox/rca/RCAFormModal.js","components/bottombox/components/SurveyDetailsModal.js","components/bottombox/upload-data/survey-data-table/DatatablePage.js","components/bottombox/components/RcaEditForm.js","components/bottombox/dashboard/RCATable.js","components/bottombox/upload-data/helpers/obj-keys.js","components/bottombox/upload-data/UploadDataModal.js","components/bottombox/components/DataTable.js","components/bottombox/components/SimpleDataInput.js","components/SideBar.js","components/bottombox/dashboard/Charts/StackedBarChart.js","components/bottombox/dashboard/Dashboard.js","components/bottombox/components/BottomboxDrivers.js","components/bottombox/components/SurveyList.js","components/bottombox/components/AgentsComponent.js","components/bottombox/dashboard/BottomBox.js","components/bottombox/components/Alerts.js","components/ccms/components/Common/NoAccess.js","components/common/PrivateRoute.js","components/NavBar.js","components/ErrorMessage.js","components/Welcome.js","reducers/surveyReducer.js","reducers/errors.js","reducers/messages.js","reducers/auth.js","reducers/modalToggleReducer.js","reducers/ccmsReducers.js","reducers/index.js","store.js","components/App.js","index.js"],"names":["map","x","join","module","exports","FETCHING","STOP_FETCHING","axios","defaults","baseURL","GeneralRequest","endpoint","data","dispatchType","addData","dispatch","post","then","res","type","payload","catch","err","console","log","response","deleteData","delete","id","editData","put","this","get_fni_list","get","get_ccms_rca","ccms_rca","update_ccms","prev_data","date_acknowledged","Promise","all","contributor","cba_auth_user","ccms","ccms_status","entry","fullname","res_ccms","res_comment","completed_ccms","comment","get_business_unit","columns","Header","accessor","row","ticket_status","name","Cell","newBucketAge","style","fontWeight","value","color","CcmsModal","props","parentCallback","ccms_entry_id","isOpen","parentToggle","useState","modal","setModal","sendData","e","is_sending","Modal","toggle","ModalHeader","ModalBody","ModalFooter","Button","onClick","target","CommentList","Component","showAll","setView","comment_list","comments","length","slice","Math","max","commentBoxStyle","backgroundColor","display","paddingLeft","paddingRight","borderRadius","paddingTop","paddingBottom","fontSize","marginRight","dateCommentStyle","marginTop","marginLeft","toggleStyle","cursor","handleCommentView","displayComment","key","ccms_status_during_comment","comment_entry_date","CommentForm","handleChange","event","setState","handleSubmit","preventDefault","add_comment","state","toggleDropDown","dropdownOpen","getList","filter","ccms_entry","ccms_entry_comments","ccms_entry_comment","auth","user","Row","className","Col","Form","onSubmit","autoComplete","FormGroup","InputGroup","InputGroupButtonDropdown","addonType","DropdownToggle","caret","DropdownMenu","item","index","DropdownItem","Input","onChange","placeholder","InputGroupAddon","connect","ccms_status_list","ccms_list","capsFirstWord","string","replace","match","toUpperCase","DynamicInput","typeaheadProps","col","bsSize","labelKey","selected","options","select_options","selectHintOnEnter","clearButton","size","form_title","newName","Label","for","includes","inputProps","required","DynamicConfirmModal","formattedFormTitle","form_inputs","toggleModal","fni","ticket_number","DynamicList","list","excludeList","filterList","Object","keys","Table","prop","UncontrolledPopover","trigger","placement","PopoverHeader","PopoverBody","submitted_date","description","DynamicForm","isModalOpen","childData","newInput","forEach","newPair","submit_ca","labels","titleStyle","Card","body","CardTitle","label","display_list","fni_list","ConfirmRcaSubmitModal","action","completed_on","CcmsRcaForm","checked","ccms_rca_state","exemptions","escalation_driver_cause","escalation_driver","filteredDriverList","cause_code","driverName","selectedData","tableName","complete_ccms_rca","agent_name","ticket_description","ccms_ticket_description","team_spg_accountability","business_unit","specific_bu","agent_silo","controllability","event_description","escalated_ticket","disabled","summary_complaint","rows","silo","accountable_team","RcaFniModal","RcaFniList","RcaFindingsAndInvestigation","complete_fni","CcmsRcaModal","getData","toggleTab","tab","activeTab","toggle_active_tab","checkStatus","is_rca_completed","text","icon","ccms_rca_modal","close_ccms_rca","ca_list","getDetails","sm","select_ticket_number","text_description","ca","CcmsForm","handleClick","arrayElements","option","email","list_type","formContructor","key_list","i","split","charAt","convertToTwoDim","newArr","push","splice","updateStateThenSend","is_complaint","submitForm","callbackFunction","toggleModalCallback","ticket_type","escalation_type","site_code","escalated_by","escalated_email_address","specific_business_unit","escalated_name","lan_id","ccms_owner","rca_required","updateButton","collapse","toRemove","Collapse","mail","ButtonGroup","md","CustomInput","is_fetching_comments","Spinner","MailDetails","spanStyle","textDecoration","stringDate","Date","receivedDateTime","toString","sender_name","sender_email_address","email_subject","dangerouslySetInnerHTML","__html","email_body","getComments","NewCcmsFormModal","get_selected_ccms_new","status","selected_ccms","close_modal","border","users_list","open_collapse","toggle_modal","CcmsAdminForm","handleRemove","remove_user_from_ccms_admin","ccms_admin_list","handleAdd","add_user_to_ccms_admin","selectedOptions","groups","getListofNotCcmsAdmin","labelStyle","first_name","last_name","username","CcmsAdminModal","CcmsAccessRequest","access_request","add_ccms_owner","handleDeny","CcmsAccessRequestModal","Badge","requestCount","ConfirmModal","open","input","task","sendConfirmation","taskParam","modalDetails","AddDriverForm","handleModalToggle","editEscalationDriverCause","addEscalationDriverCause","addEscalationDriver","editEscalationDriver","add_cause_code","edit_cause_code","cancelEdit","driverDetails","selectedCode","handleKeyDown","keyCode","onKeyDown","oldData","newData","DriverData","tdStyle","setOptions","edit","setEdit","useDispatch","toolTip","deleteEscalationDriver","deleteEscalationDriverCause","UncontrolledTooltip","top","DriverTable","handleEditOptionClick","addOption","driverList","selectCallback","icon_id","toLowerCase","dark","hover","bordered","code","DriverForm","handleSelect","driver_type","DynamicFormModal","ComponentForm","useSelector","DataTableDropdownButton","dataList","selectionCallback","toggleCollapse","setdropdownOpen","ButtonDropdown","AddContent","buttonLabel","selectedDataName","textColor","table","initialInputState","eachEntry","setEachEntry","reduxAction","dispatchRedux","DeleteContent","EditContent","isCollapseOpen","setCollapse","GeneralDataConfirmModal","properties","bgColor","content","GeneralDataTable","filterOn","show","filterable","buttons","cellprops","original","minRows","defaultPageSize","showPagination","CcmsTable2","buttonOptions","title","select_ccms_owner","handleSearch","kw","search_ccms","handlePageChange","page","set_table_page","handlecollapseDrivers","collapseDrivers","tableSelectionCallback","closeCollapse","removeDataTable","updateTable","collapseGeneralTable","handlecollapseGeneralTable","search","CardHeader","CardBody","Container","textAlign","href","filtered_ccms_list","onPageChange","Ccms","is_acknowledged","acknowledged_by","displayName","getCurrentDate","ack_entry","today","dd","getDate","mm","getMonth","getFullYear","get_all_data","user_details","isLoading","fluid","group_list","table_name","isFetching","get_ccms_list","getSurveys","get_ticket_status","get_escalation_type","get_accountable_team","get_site_code","get_ccms_owner","get_ccms_status","get_silo","get_ticket_type","get_ccms_admin_list","get_users_list","Loading","width","height","left","position","tokenConfig","getState","token","config","headers","updateRca","rca_data","deleteSurvey","surveyDeleted","getSurvey","removeSurvey","getAgentDetails","getSkills","getDsatCode1","getBBDriverCode2","getBBDriverCode3","getTeams","addDsatCode1","addBbDriverCode2","addBbDriverCode3","reponse","SingleInput","attr","label_name","controlFunc","readOnly","SelectInput","SurveyDetails","survey","reference_number","owner_name","customer_email_address","origination_source","callback_reference_number","related_incident_record","site_location","city","user_location","phone_number","call_type","service_type","service","service_component","average_score","fulfillment","assignment_group","originating_ticket_description","follow_up_comments","q1","q2","q2a","q3","q3a","q4","q5","q6","budi_bu","budi_lv7","bu_catg","date_issued","uploaded_by","date_uploaded","RCAFormModal","handleToggle","rcaData","selectDefault","surveyed_ticket","agent","operator_lan_id","dsat_cause","dsat_code1","bb_driver_code2","bb_driver_code3","completed_by","agentData","completed","addRCA","handleUpdate","rca","checkValue","elem","scrollable","form","skill","support_silo_issue_based","skills","brief_description","user_verbatim","dsat_Code1","bb_Driver_Code2","actual_issue","q1_answer","contacted_customer","summary","obs_in_call","accountable_entity","overall_reason_dsat","coaching","corrective_actions","surveys","teams","SurveyDetailsModal","company_name","date_time","prevState","survey_data","updateSurvey","handleCancel","relared_incident_record","vip","React","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","DatatablePage","filtered","start_date","end_date","sortedData","rca_headers","getBottomboxSurveyView","getTopboxSurveyView","getCompletedSurveyView","getAllSurveyView","handleDelete","getRca","removeRca","reactTable","getResolvedState","moment","format","handleEvent","picker","startDate","filterToggle","resetFields","prevProps","agents","rcas","rcaTableExcelSheet","val","assign","onApply","date_q","startD","endD","endDate","isBetween","bottombox","surveysTableExcelSheet","Array","isArray","completed_survey_count","incomplete_topbox_count","incomplete_bottombox_count","filename","element","agent_headers","ref","r","onFilteredChange","surveys_view","surveyData","RcaEditForm","local_rca","RCATable","deleteRca","UploadDataModal","file","isStaged","files","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","XLSX","read","bookVBA","sheetStubs","wsname","SheetNames","ws","Sheets","filtered_data","utils","sheet_to_json","defval","header","range","JSON","stringify","readAsArrayBuffer","handleFile","addSurveysBulk","NavLink","accept","SheetJSFT","list_data","post_reqs","errors","msg","DataTable","teamleads","SimpleDataInput","onModalChange","addSkill","addTeamLead","addTeam","newProps","data_name","SideBar","handleModalState","handleCollapse","agentViewCollapse","bottomboxDriverViewCollapse","surveyViewCollapse","dashboardViewCollapse","checkActive","agent_view_collapse","bottombox_view_collapse","survey_view_collapse","Nav","vertical","NavItem","dashboard_view_collapse","StackedBarChart","monthSelection","weekSelection","selectedMonth","selectedWeek","selectedYear","curr_year","curr_month","curr_month_string","days_per_week","selectedMonth_chart_data","get_data","filtered_list","year","curr","monthRangeInt","from","month","filteredSurveyPerMonth","monthName","Intl","DateTimeFormat","get_data_by_month","y","getWeeksInMonth","data_per_week","m","date","start","end","weeks","firstDay","daysInMonth","dayOfWeek","getDay","responsive","maintainAspectRatio","scales","xAxes","stacked","yAxes","new_data","int","agent_chart_data","updateAgentChartData","updateChartData","updatedSelectedMonth","updatedSelectedYear","updatedSelectedWeek","selectedIndex","week_data","days_of_selectedWeek","selectedWeek_dates","newDate","week_data_array","values","selectedWeek_data","yearSelection","chart_parent","filtered_agent_data","chart_data","global","defaultFontColor","legend","Dashboard","dateFilteredSurveys","dateFilteredRcas","noDataStyle","lineHeight","margin","datasetKeyProvider","random","survey_date_issued","getListTopDrivers","reduce","k","getTopDrivers","dataset","colors","getRandomColor","total","num","getAccountableTeams","team","getSurveyPerSilo","getSPGControllability","budi_bu_list","Set","spg","floor","chart_height","combinedData","datasets","surveyCount","toFixed","fill","tooltips","mode","intersect","ticks","callback","plugins","datalabels","anchor","align","font","weight","context","dataIndex","barShowStroke","agentCompState","BottomboxDrivers","code1_name","code2_name","code3_name","code1","code2","code3","code2_list","code3_list","updateBBDriverState","editOff","showButtons","hideButtons","editOn","handleAddDriverCode3Submit","bbState","handleAddDriverCode2Submit","handleAddDsatCode1Submit","need_update","deleteDsatCode1","deleteBbDriverCode2","deleteBbDriverCode3","handleEdit","updateDsatCode1","updateBbDriverCode2","updateBbDriverCode3","Fade","aria-hidden","float","filter_item","code2_item","code3_filter_item","code3_item","survey_list","SurveyList","activeItem","closeCallback","sort","a","b","colSpan","AgentsComponent","location","team_lead","wave","agent_list","team_lead_list","skills_list","agent_survey_list","z","updateAgent","handleAgentSelect","getAgent","getListIncompleteAgentForm","handleModal","skill_table","team_lead_table","pill","table_data","flat","Infinity","updateAgentComponentState","BottomBox","getAllData2","getRcas","getAgents","spread","error","Alerts","alert","message","success","passwordsNotMatch","messages","withAlert","NoAccess","PrivateRoute","get_access_request","component","access_request_list","rest","render","is_member_of_ccms_owners","RequestAlreadyExists","UserAvatar","avatar","src","alt","AuthNavItem","isAuthenticated","UncontrolledDropdown","nav","right","divider","window","NavBar","bind","Navbar","padding","expand","fixed","NavbarBrand","dxc","NavbarToggler","navbar","to","exact","authButtonMethod","ErrorMessage","debug","Alert","WelcomeContent","Welcome","isHovered","target_div","handleMouseEnter","handleMouseLeave","div_style","section","transition","Jumbotron","initialState","upload_failed_surveys","doughnutChartSurveyData","pieChartCompletedSurveysCount","rcaTopDriversLabels","surveyReducer","arr","find","localStorage","getItem","modalToggleReducer","ccms_list_per_user","update_list","new_entry","removeItemFromList","ccmsReducer","combineReducers","setItem","removeItem","ccmsReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","alertOptions","timeout","App","getCreds","template","AlertTemplate","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f000f179.chunk.js","sourcesContent":["const SheetJSFT = [\r\n    \"xlsx\",\r\n    \"xlsb\",\r\n    \"xlsm\",\r\n    \"xls\",\r\n    \"xml\",\r\n    \"csv\",\r\n    \"txt\",\r\n    \"ods\",\r\n    \"fods\",\r\n    \"uos\",\r\n    \"sylk\",\r\n    \"dif\",\r\n    \"dbf\",\r\n    \"prn\",\r\n    \"qpw\",\r\n    \"123\",\r\n    \"wb*\",\r\n    \"wq*\",\r\n    \"html\",\r\n    \"htm\"\r\n]\r\n    .map(function(x) {\r\n        return \".\" + x;\r\n    })\r\n    .join(\",\");\r\n","module.exports = __webpack_public_path__ + \"static/media/dxc.756a28b8.png\";","module.exports = __webpack_public_path__ + \"static/media/feedback.6ef6da11.png\";","export const CHECK_BUTTON_COLOR = \"CHECK_BUTTON_COLOR\";\r\n\r\nexport const GET_SURVEYS = \"GET_SURVEYS\";\r\nexport const ADD_SURVEY = \"ADD_SURVEY\";\r\nexport const DELETE_SURVEY = \"DELETE_SURVEY\";\r\nexport const MODAL_TOGGLE = \"MODAL_TOGGLE\";\r\nexport const GET_SURVEY = \"GET_SURVEY\";\r\nexport const REMOVE_SURVEY = \"REMOVE_SURVEY\";\r\nexport const GET_AGENT = \"GET_AGENT\";\r\nexport const GET_AGENTS = \"GET_AGENTS\";\r\nexport const GET_SKILLS = \"GET_SKILLS\";\r\nexport const ADD_FAILED_SURVEY = \"ADD_FAILED_SURVEY\";\r\n\r\nexport const GET_BOTTOMBOX_SURVEY_VIEW = \"GET_BOTTOMBOX_SURVEY_VIEW\";\r\nexport const GET_TOPBOX_SURVEY_VIEW = \"GET_TOPBOX_SURVEY_VIEW\";\r\nexport const GET_COMPLETED_SURVEY_VIEW = \"GET_COMPLETED_SURVEY_VIEW\";\r\nexport const GET_ALL_SURVEY_VIEW = \"GET_ALL_SURVEY_VIEW\";\r\n\r\nexport const GET_TEAMS = \"GET_TEAMS\";\r\nexport const ADD_RCA = \"ADD_RCA\";\r\nexport const UPDATE_BOTTOMBOX_NOT_COMPLETED = \"UPDATE_BOTTOMBOX_NOT_COMPLETED\";\r\nexport const FETCHING = \"FETCHING\";\r\nexport const STOP_FETCHING = \"STOP_FETCHING\";\r\nexport const ADD_SKILL = \"ADD_SKILL\";\r\nexport const ADD_TEAMLEAD = \"ADD_TEAMLEAD\";\r\nexport const GET_TEAMLEADS = \"GET_TEAMLEADS\";\r\nexport const COLLAPSE_AGENT_VIEW = \"COLLAPSE_AGENT_VIEW\";\r\nexport const COLLAPSE_BOTTOMBOX_DRIVER_VIEW = \"COLLAPSE_BOTTOMBOX_DRIVER_VIEW\";\r\nexport const COLLAPSE_SURVEY_VIEW = \"COLLAPSE_SURVEY_VIEW\";\r\nexport const COLLAPSE_DASHBOARD_VIEW = \"COLLAPSE_DASHBOARD_VIEW\";\r\n\r\nexport const ADD_TEAM = \"ADD_TEAM\";\r\nexport const GET_RCAS = \"GET_RCAS\";\r\nexport const GET_RCA = \"GET_RCA\";\r\nexport const REMOVE_RCA = \"REMOVE_RCA\";\r\nexport const GET_BOTTOMBOX = \"GET_BOTTOMBOX\";\r\nexport const UPDATE_SURVEY = \"UPDATE_SURVEY\";\r\nexport const UPDATE_RCA = \"UPDATE_RCA\";\r\nexport const DELETE_RCA = \"DELETE_RCA\";\r\n\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\n\r\nexport const UPDATE_BOTTOMBOX_DRIVER_STATE = \"UPDATE_BOTTOMBOX_DRIVER_STATE\";\r\nexport const UPDATE_AGENTS_COMPONENT_STATE = \"UPDATE_AGENTS_COMPONENT_STATE\";\r\nexport const UPDATE_CHART_DATA = \"UPDATE_CHART_DATA\";\r\nexport const UPDATE_AGENT_CHART_DATA = \"UPDATE_AGENT_CHART_DATA\";\r\nexport const UPDATE_SELECTED_MONTH = \"UPDATE_SELECTED_MONTH\";\r\nexport const UPDATE_SELECTED_WEEK = \"UPDATE_SELECTED_WEEK\";\r\nexport const UPDATE_SELECTED_YEAR = \"UPDATE_SELECTED_YEAR\";\r\n\r\n// Bottombox Drivers\r\nexport const GET_DSAT_CODE1 = \"GET_DSAT_CODE1\";\r\nexport const DELETE_DSAT_CODE1 = \"DELETE_DSAT_CODE1\";\r\nexport const UPDATE_DSAT_CODE1 = \"UPDATE_DSAT_CODE1\";\r\nexport const GET_BB_DRIVER_CODE2 = \"GET_BB_DRIVER_CODE2\";\r\nexport const UPDATE_BB_DRIVER_CODE2 = \"UPDATE_BB_DRIVER_CODE2\";\r\nexport const UPDATE_BB_DRIVER_CODE3 = \"UPDATE_BB_DRIVER_CODE3\";\r\nexport const DELETE_BB_DRIVER_CODE2 = \"DELETE_BB_DRIVER_CODE2\";\r\nexport const DELETE_BB_DRIVER_CODE3 = \"DELETE_BB_DRIVER_CODE3\";\r\nexport const GET_BB_DRIVER_CODE3 = \"GET_BB_DRIVER_CODE3\";\r\nexport const ADD_DSAT_CODE1 = \"ADD_DSAT_CODE1\";\r\nexport const ADD_BB_DRIVER_CODE2 = \"ADD_BB_DRIVER_CODE2\";\r\nexport const ADD_BB_DRIVER_CODE3 = \"ADD_BB_DRIVER_CODE3\";\r\n\r\n// Authentication\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const USER_LOADED = \"USER_LOADED\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const LOGOUT_FAIL = \"LOGOUT_FAIL\";\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\n\r\n// messages\r\n\r\nexport const CREATE_MESSAGE = \"CREATE_MESSAGE\";\r\nexport const GET_MESSAGES = \"GET_MESSAGES\";\r\n\r\nexport const GET_ALL_DATA = \"GET_ALL_DATA\";\r\n\r\n// Agent requests\r\n\r\nexport const UPDATE_AGENT = \"UPDATE_AGENT\";\r\nexport const ADD_AGENT = \"ADD_AGENT\";\r\n\r\n// CCMS\r\n\r\nexport const SET_TABLE_PAGE = \"SET_TABLE_PAGE\";\r\nexport const GET_MAILS = \"GET_MAILS\";\r\nexport const GET_CCMS = \"GET_CCMS\";\r\nexport const ACK_ENTRY = \"ACK_ENTRY\";\r\nexport const ADD_UPDATE = \"ADD_UPDATE\";\r\nexport const GET_COMMENTS = \"GET_COMMENTS\";\r\nexport const GET_BUSINESS_UNIT = \"GET_BUSINESS_UNIT\";\r\nexport const GET_TICKET_STATUS = \"GET_TICKET_STATUS\";\r\nexport const GET_ESCALATION_TYPE = \"GET_ESCALATION_TYPE\";\r\nexport const GET_SITE_CODE = \"GET_SITE_CODE\";\r\nexport const GET_ACCOUNTABLE_TEAM = \"GET_ACCOUNTABLE_TEAM\";\r\nexport const GET_CCMS_OWNER = \"GET_CCMS_OWNER\";\r\nexport const GET_TICKET_TYPE = \"GET_TICKET_TYPE\";\r\nexport const GET_SILO = \"GET_SILO\";\r\nexport const UPDATE_CCMS = \"UPDATE_CCMS\";\r\nexport const COMPLETE_CCMS = \"COMPLETE_CCMS\";\r\nexport const GET_CCMS_STATUS = \"GET_CCMS_STATUS\";\r\nexport const ADD_COMMENT = \"ADD_COMMENT\";\r\nexport const GET_SELECTED_CCMS = \"GET_SELECTED_CCMS\";\r\nexport const GET_SELECTED_CCMS_ONLY = \"GET_SELECTED_CCMS_ONLY\";\r\nexport const REMOVE_SELECTED_CCMS = \"REMOVE_SELECTED_CCMS\";\r\nexport const GET_CCMS_LIST_PER_USER = \"GET_CCMS_LIST_PER_USER\";\r\nexport const CLOSE_COLLAPSE = \"CLOSE_COLLAPSE\";\r\nexport const OPEN_COLLAPSE = \"OPEN_COLLAPSE\";\r\nexport const SEARCH = \"SEARCH\";\r\nexport const GET_CCMS_ADMIN_LIST = \"GET_CCMS_ADMIN_LIST\";\r\nexport const GET_USERS_LIST = \"GET_USERS_LIST\";\r\nexport const REMOVE_USER_FROM_CCMS_ADMIN = \"REMOVE_USER_FROM_CCMS_ADMIN\";\r\nexport const ADD_USER_TO_CCMS_ADMIN = \"ADD_USER_TO_CCMS_ADMIN\";\r\nexport const TOGGLE_MODAL = \"TOGGLE_MODAL\";\r\nexport const OPEN_MODAL = \"OPEN_MODAL\";\r\nexport const CLOSE_MODAL = \"CLOSE_MODAL\";\r\nexport const FETCHING_COMMENTS = \"FETCHING_COMMENTS\";\r\nexport const ADD_REQUEST_ACCESS = \"ADD_REQUEST_ACCESS\";\r\nexport const GET_REQUEST_ACCESS = \"GET_REQUEST_ACCESS\";\r\nexport const DENY_REQUEST_ACCESS = \"DENY_REQUEST_ACCESS\";\r\nexport const ADD_CCMS_OWNER = \"ADD_CCMS_OWNER\";\r\nexport const REMOVE_ACCESS_REQUEST = \"REMOVE_ACCESS_REQUEST\";\r\n\r\n// DRIVERS\r\nexport const GET_CAUSE_CODE = \"GET_CAUSE_CODE\";\r\nexport const ADD_CAUSE_CODE = \"ADD_CAUSE_CODE\";\r\nexport const DELETE_CAUSE_CODE = \"DELETE_CAUSE_CODE\";\r\nexport const EDIT_CAUSE_CODE = \"EDIT_CAUSE_CODE\";\r\n\r\nexport const GET_ESCALATION_DRIVER = \"GET_ESCALATION_DRIVER\";\r\nexport const ADD_ESCALATION_DRIVER = \"ADD_ESCALATION_DRIVER\";\r\nexport const DELETE_ESCALATION_DRIVER = \"DELETE_ESCALATION_DRIVER\";\r\nexport const EDIT_ESCALATION_DRIVER = \"EDIT_ESCALATION_DRIVER\";\r\n\r\nexport const GET_ESCALATION_DRIVER_CAUSE = \"GET_ESCALATION_DRIVER_CAUSE\";\r\nexport const ADD_ESCALATION_DRIVER_CAUSE = \"ADD_ESCALATION_DRIVER_CAUSE\";\r\nexport const DELETE_ESCALATION_DRIVER_CAUSE = \"DELETE_ESCALATION_DRIVER_CAUSE\";\r\nexport const EDIT_ESCALATION_DRIVER_CAUSE = \"EDIT_ESCALATION_DRIVER_CAUSE\";\r\n\r\n// CCMS RCA\r\nexport const CLOSE_RCA_MODAL = \"CLOSE_RCA_MODAL\";\r\nexport const GET_CCMS_RCA = \"GET_CCMS_RCA\";\r\nexport const COMPLETE_CCMS_RCA = \"COMPLETE_CCMS_RCA\";\r\nexport const TOGGLE_ACTIVE_TAB = \"TOGGLE_ACTIVE_TAB\";\r\n\r\nexport const COMPLETE_FNI = \"COMPLETE_FNI\";\r\nexport const GET_FNI_LIST = \"GET_FNI_LIST\";\r\n\r\nexport const SUBMIT_CA = \"SUBMIT_CA\";\r\nexport const GET_CA_LIST = \"GET_CA_LIST\";\r\n\r\n// GENERAL DATA CRUD\r\n\r\nexport const ADD_BUSINESS_UNIT = \"ADD_BUSINESS_UNIT\";\r\nexport const DELETE_BUSINESS_UNIT = \"DELETE_BUSINESS_UNIT\";\r\nexport const EDIT_BUSINESS_UNIT = \"EDIT_BUSINESS_UNIT\";\r\n\r\nexport const ADD_TICKET_TYPE = \"ADD_TICKET_TYPE\";\r\nexport const DELETE_TICKET_TYPE = \"DELETE_TICKET_TYPE\";\r\nexport const EDIT_TICKET_TYPE = \"EDIT_TICKET_TYPE\";\r\n\r\nexport const ADD_SILO = \"ADD_SILO\";\r\nexport const DELETE_SILO = \"DELETE_SILO\";\r\nexport const EDIT_SILO = \"EDIT_SILO\";\r\n\r\nexport const ADD_CCMS_STATUS = \"ADD_CCMS_STATUS\";\r\nexport const DELETE_CCMS_STATUS = \"DELETE_CCMS_STATUS\";\r\nexport const EDIT_CCMS_STATUS = \"EDIT_CCMS_STATUS\";\r\n\r\nexport const ADD_SITE_CODE = \"ADD_SITE_CODE\";\r\nexport const DELETE_SITE_CODE = \"DELETE_SITE_CODE\";\r\nexport const EDIT_SITE_CODE = \"EDIT_SITE_CODE\";\r\n\r\nexport const ADD_ACCOUNTABLE_TEAM = \"ADD_ACCOUNTABLE_TEAM\";\r\nexport const DELETE_ACCOUNTABLE_TEAM = \"DELETE_ACCOUNTABLE_TEAM\";\r\nexport const EDIT_ACCOUNTABLE_TEAM = \"EDIT_ACCOUNTABLE_TEAM\";\r\n\r\nexport const ADD_ESCALATION_TYPE = \"ADD_ESCALATION_TYPE\";\r\nexport const DELETE_ESCALATION_TYPE = \"DELETE_ESCALATION_TYPE\";\r\nexport const EDIT_ESCALATION_TYPE = \"EDIT_ESCALATION_TYPE\";\r\n","import {\r\n    FETCHING,\r\n    STOP_FETCHING,\r\n    GET_SURVEYS,\r\n    ACK_ENTRY,\r\n    ADD_UPDATE,\r\n    GET_COMMENTS,\r\n    GET_CCMS,\r\n    GET_BUSINESS_UNIT,\r\n    GET_TICKET_STATUS,\r\n    GET_ESCALATION_TYPE,\r\n    GET_ACCOUNTABLE_TEAM,\r\n    GET_SITE_CODE,\r\n    UPDATE_CCMS,\r\n    GET_CCMS_OWNER,\r\n    GET_CCMS_STATUS,\r\n    ADD_COMMENT,\r\n    GET_SILO,\r\n    GET_TICKET_TYPE,\r\n    GET_SELECTED_CCMS,\r\n    REMOVE_SELECTED_CCMS,\r\n    GET_CCMS_LIST_PER_USER,\r\n    OPEN_COLLAPSE,\r\n    CLOSE_COLLAPSE,\r\n    SEARCH,\r\n    GET_CCMS_ADMIN_LIST,\r\n    GET_USERS_LIST,\r\n    REMOVE_USER_FROM_CCMS_ADMIN,\r\n    ADD_USER_TO_CCMS_ADMIN,\r\n    TOGGLE_MODAL,\r\n    OPEN_MODAL,\r\n    CLOSE_MODAL,\r\n    FETCHING_COMMENTS,\r\n    ADD_REQUEST_ACCESS,\r\n    GET_REQUEST_ACCESS,\r\n    ADD_CCMS_OWNER,\r\n    REMOVE_ACCESS_REQUEST,\r\n    GET_CAUSE_CODE,\r\n    GET_ESCALATION_DRIVER,\r\n    GET_ESCALATION_DRIVER_CAUSE,\r\n    ADD_CAUSE_CODE,\r\n    DELETE_CAUSE_CODE,\r\n    EDIT_CAUSE_CODE,\r\n    ADD_ESCALATION_DRIVER,\r\n    DELETE_ESCALATION_DRIVER,\r\n    EDIT_ESCALATION_DRIVER,\r\n    ADD_ESCALATION_DRIVER_CAUSE,\r\n    DELETE_ESCALATION_DRIVER_CAUSE,\r\n    EDIT_ESCALATION_DRIVER_CAUSE,\r\n    GET_CCMS_RCA,\r\n    CLOSE_RCA_MODAL,\r\n    COMPLETE_CCMS_RCA,\r\n    TOGGLE_ACTIVE_TAB,\r\n    COMPLETE_FNI,\r\n    GET_FNI_LIST,\r\n    SUBMIT_CA,\r\n    GET_CA_LIST,\r\n    GET_SELECTED_CCMS_ONLY,\r\n    ADD_BUSINESS_UNIT,\r\n    DELETE_BUSINESS_UNIT,\r\n    COMPLETE_CCMS,\r\n    SET_TABLE_PAGE,\r\n    DENY_REQUEST_ACCESS\r\n} from \"./types\";\r\n\r\nimport axios from \"axios\";\r\nimport { axiosDefault } from \"./config\";\r\n\r\naxios.defaults.baseURL = axiosDefault;\r\n\r\nexport class GeneralRequest {\r\n    constructor(endpoint, data, dispatchType) {\r\n        this.endpoint = endpoint;\r\n        this.data = data;\r\n        this.dispatchType = dispatchType;\r\n    }\r\n\r\n    addData = () => dispatch => {\r\n        axios\r\n            .post(`/api/${this.endpoint}/`, this.data)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: this.dispatchType,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .catch(err => console.log(err.response));\r\n    };\r\n\r\n    deleteData = () => dispatch => {\r\n        axios\r\n            .delete(`/api/${this.endpoint}/${this.data.id}`)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: this.dispatchType,\r\n                    payload: this.data\r\n                });\r\n            })\r\n            .catch(err => console.log(err.response));\r\n    };\r\n\r\n    editData = () => dispatch => {\r\n        axios\r\n            .put(`/api/${this.endpoint}/${this.data.id}/`, this.data)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: this.dispatchType,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .catch(err => console.log(err.response));\r\n    };\r\n}\r\n\r\nexport const submit_ca = data => dispatch => {\r\n    // console.log({ fni: data.ticket_number.id, ...data });\r\n    axios\r\n        .post(`/api/corrective_action/`, {\r\n            fni: data.ticket_number.id,\r\n            ...data\r\n        })\r\n        .then(res => {\r\n            dispatch({\r\n                type: SUBMIT_CA,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const get_fni_list = data => dispatch => {\r\n    axios\r\n        .get(`/api/findings_and_investigation/?ccms_rca__id=${data}`)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_FNI_LIST,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const complete_fni = data => dispatch => {\r\n    axios\r\n        .post(`/api/findings_and_investigation/`, data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: COMPLETE_FNI,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const toggle_active_tab = tab => dispatch => {\r\n    dispatch({\r\n        type: TOGGLE_ACTIVE_TAB,\r\n        payload: tab\r\n    });\r\n};\r\n\r\nexport const close_ccms_rca = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_RCA_MODAL\r\n    });\r\n};\r\n\r\nexport const complete_ccms_rca = data => dispatch => {\r\n    axios\r\n        .put(`/api/ccms_rca/${data.ccms_rca.id}/`, data.ccms_rca_state)\r\n        .then(res => {\r\n            dispatch({\r\n                type: COMPLETE_CCMS_RCA,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const get_ccms_rca = data => dispatch => {\r\n    axios.get(`/api/ccms_rca/?ccms__id=${data.id}`).then(res => {\r\n        dispatch({\r\n            type: GET_CCMS_RCA,\r\n            payload: res.data\r\n        });\r\n\r\n        axios\r\n            .get(\r\n                `/api/findings_and_investigation/?ccms_rca__id=${res.data[0].id}`\r\n            )\r\n            .then(res => {\r\n                dispatch({\r\n                    type: GET_FNI_LIST,\r\n                    payload: res.data\r\n                });\r\n\r\n                axios\r\n                    .get(\r\n                        `/api/corrective_action/?fni__ccms_rca__id=${res.data[0].ccms_rca}`\r\n                    )\r\n                    .then(res => {\r\n                        dispatch({\r\n                            type: GET_CA_LIST,\r\n                            payload: res.data\r\n                        });\r\n                    });\r\n            })\r\n            .catch(err => console.log(err.response));\r\n    });\r\n};\r\n\r\nexport const addEscalationDriverCause = data => dispatch => {\r\n    axios\r\n        .post(`/api/escalation_driver_cause/`, data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ADD_ESCALATION_DRIVER_CAUSE,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const deleteEscalationDriverCause = data => dispatch => {\r\n    // console.log(`FROM REDUX ACTION - DELETE`);\r\n    // console.log(data);\r\n\r\n    axios.delete(`/api/escalation_driver_cause/${data.id}/`).then(res => {\r\n        dispatch({\r\n            type: DELETE_ESCALATION_DRIVER_CAUSE,\r\n            payload: data\r\n        });\r\n    });\r\n};\r\n\r\nexport const editEscalationDriverCause = (oldData, newData) => dispatch => {\r\n    console.log(`FROM REDUX ACTION - EDIT`);\r\n    console.log(\"OLDDATA\");\r\n    console.log(oldData);\r\n    console.log(\"NewDATA\");\r\n    console.log(newData);\r\n\r\n    axios\r\n        .put(`/api/escalation_driver_cause/${oldData.id}/`, newData)\r\n        .then(res => {\r\n            dispatch({\r\n                type: EDIT_ESCALATION_DRIVER_CAUSE,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const addEscalationDriver = data => dispatch => {\r\n    axios\r\n        .post(`/api/escalation_driver/`, data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ADD_ESCALATION_DRIVER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const deleteEscalationDriver = data => dispatch => {\r\n    // console.log(`FROM REDUX ACTION - DELETE`);\r\n    // console.log(data);\r\n\r\n    axios.delete(`/api/escalation_driver/${data.id}/`).then(res => {\r\n        dispatch({\r\n            type: DELETE_ESCALATION_DRIVER,\r\n            payload: data\r\n        });\r\n    });\r\n};\r\n\r\nexport const editEscalationDriver = (oldData, newData) => dispatch => {\r\n    console.log(`FROM REDUX ACTION - EDIT`);\r\n    console.log(\"OLDDATA\");\r\n    console.log(oldData);\r\n    console.log(\"NewDATA\");\r\n    console.log(newData);\r\n\r\n    axios\r\n        .put(`/api/escalation_driver/${oldData.id}/`, newData)\r\n        .then(res => {\r\n            dispatch({\r\n                type: EDIT_ESCALATION_DRIVER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const edit_cause_code = (oldData, newData) => dispatch => {\r\n    console.log(`FROM REDUX ACTION - EDIT`);\r\n    console.log(\"OLDDATA\");\r\n    console.log(oldData);\r\n    console.log(\"NewDATA\");\r\n    console.log(newData);\r\n\r\n    axios.put(`/api/cause_code/${oldData.id}/`, newData).then(res => {\r\n        dispatch({\r\n            type: EDIT_CAUSE_CODE,\r\n            payload: res.data\r\n        });\r\n    });\r\n};\r\n\r\nexport const delete_cause_code = data => dispatch => {\r\n    // console.log(`FROM REDUX ACTION - DELETE`);\r\n    // console.log(data);\r\n\r\n    axios.delete(`/api/cause_code/${data.id}/`).then(res => {\r\n        dispatch({\r\n            type: DELETE_CAUSE_CODE,\r\n            payload: data\r\n        });\r\n    });\r\n};\r\n\r\nexport const add_cause_code = data => dispatch => {\r\n    console.log(`FROM REDUX ACTION - ADD`);\r\n    console.log(data);\r\n    axios.post(`/api/cause_code/`, data).then(res => {\r\n        dispatch({\r\n            type: ADD_CAUSE_CODE,\r\n            payload: res.data\r\n        });\r\n    });\r\n};\r\n\r\nexport const get_all_data = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/users/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USERS_LIST,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n\r\n    axios\r\n        .get(\"/api/group/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CCMS_ADMIN_LIST,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n\r\n    axios\r\n        .get(\"/api/silo/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_SILO,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n\r\n    axios\r\n        .get(\"/api/ticket_type/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_TICKET_TYPE,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n\r\n    axios\r\n        .get(\"/api/ccms_status/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CCMS_STATUS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n\r\n    axios\r\n        .get(\"/api/ccms_owners/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CCMS_OWNER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n\r\n    axios\r\n        .get(\"/api/site_code/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_SITE_CODE,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n\r\n    axios\r\n        .get(\"/api/accountable_team/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ACCOUNTABLE_TEAM,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n\r\n    axios\r\n        .get(\"/api/escalation_type/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ESCALATION_TYPE,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n\r\n    axios\r\n        .get(\"/api/ticket_status/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_TICKET_STATUS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n\r\n    axios\r\n        .get(\"/api/business_unit/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_BUSINESS_UNIT,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n\r\n    axios\r\n        .get(\"/api/ccms/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CCMS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n\r\n    axios\r\n        .get(\"/api/cause_code/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CAUSE_CODE,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n\r\n    axios\r\n        .get(\"/api/escalation_driver/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ESCALATION_DRIVER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n\r\n    axios\r\n        .get(\"/api/escalation_driver_cause/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ESCALATION_DRIVER_CAUSE,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n\r\n    dispatch({\r\n        type: STOP_FETCHING\r\n    });\r\n};\r\n\r\nexport const get_access_request = () => dispatch => {\r\n    axios.get(`/api/ccms_access_request/`).then(res => {\r\n        dispatch({\r\n            type: GET_REQUEST_ACCESS,\r\n            payload: res.data\r\n        });\r\n    });\r\n};\r\n\r\nexport const add_ccms_owner = data => dispatch => {\r\n    console.log(data.user.user);\r\n    axios\r\n        .post(`/api/ccms_owners/`, { user: data.user.user })\r\n        .then(\r\n            res => {\r\n                dispatch({\r\n                    type: ADD_CCMS_OWNER,\r\n                    payload: res.data\r\n                });\r\n            },\r\n            axios.delete(`/api/ccms_access_request/${data.id}`).then(res => {\r\n                dispatch({\r\n                    type: REMOVE_ACCESS_REQUEST,\r\n                    payload: data\r\n                });\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const deny_access_request = data => dispatch => {\r\n    axios\r\n        .delete(`/api/ccms_access_request/${data.id}`)\r\n        .then(res => {\r\n            dispatch({\r\n                type: DENY_REQUEST_ACCESS,\r\n                payload: data\r\n            });\r\n            console.log(res.data);\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const add_access_request = data => dispatch => {\r\n    axios\r\n        .post(`/api/ccms_access_request/`, { user: data })\r\n        .then(res => {\r\n            dispatch({\r\n                type: ADD_REQUEST_ACCESS,\r\n                payload: res.data\r\n            });\r\n            console.log(res.data);\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const get_selected_ccms_new = data => dispatch => {\r\n    dispatch({\r\n        type: FETCHING_COMMENTS\r\n    });\r\n\r\n    // WILL INCLUDE\r\n    axios.get(`/api/comments/?ccms__id=${data.id}`).then(res => {\r\n        dispatch({\r\n            type: GET_SELECTED_CCMS,\r\n            payload: { comments: res.data, selected_ccms: data }\r\n        });\r\n    });\r\n};\r\n\r\nexport const open_modal = () => dispatch => {\r\n    dispatch({\r\n        type: OPEN_MODAL\r\n    });\r\n};\r\nexport const close_modal = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_MODAL\r\n    });\r\n};\r\n\r\nexport const toggle_modal = () => dispatch => {\r\n    dispatch({\r\n        type: TOGGLE_MODAL\r\n    });\r\n};\r\n\r\nexport const set_table_page = data => dispatch => {\r\n    dispatch({\r\n        type: SET_TABLE_PAGE,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const search_ccms = data => dispatch => {\r\n    dispatch({\r\n        type: SEARCH,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const close_collapse = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_COLLAPSE\r\n    });\r\n};\r\n\r\nexport const open_collapse = () => dispatch => {\r\n    dispatch({\r\n        type: OPEN_COLLAPSE\r\n    });\r\n};\r\n\r\nexport const get_ccms_list_per_user = data => dispatch => {\r\n    dispatch({\r\n        type: GET_CCMS_LIST_PER_USER,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const remove_selected_ccms = () => dispatch => {\r\n    dispatch({\r\n        type: REMOVE_SELECTED_CCMS\r\n    });\r\n};\r\n\r\nexport const get_selected_ccms = data => dispatch => {\r\n    console.log(data);\r\n    dispatch({\r\n        type: GET_SELECTED_CCMS_ONLY,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const add_user_to_ccms_admin = users_list => dispatch => {\r\n    users_list.forEach(item => {\r\n        axios\r\n            .put(`/api/users/${item.user.id}/`, {\r\n                groups: [1]\r\n            })\r\n            .then(res => {\r\n                dispatch({\r\n                    type: ADD_USER_TO_CCMS_ADMIN,\r\n                    payload: res.data\r\n                });\r\n                dispatch({\r\n                    type: STOP_FETCHING\r\n                });\r\n            })\r\n            .catch(err => console.log(err.response));\r\n    });\r\n};\r\n\r\nexport const remove_user_from_ccms_admin = ccms_admin_list => dispatch => {\r\n    ccms_admin_list.forEach(item => {\r\n        axios\r\n            .put(`/api/users/${item.id}/`, {\r\n                groups: []\r\n            })\r\n            .then(res => {\r\n                dispatch({\r\n                    type: REMOVE_USER_FROM_CCMS_ADMIN,\r\n                    payload: res.data\r\n                });\r\n                dispatch({\r\n                    type: STOP_FETCHING\r\n                });\r\n            })\r\n            .catch(err => console.log(err.response));\r\n    });\r\n};\r\n\r\nexport const add_comment = data => dispatch => {\r\n    axios\r\n        .post(\"/api/comments/\", data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ADD_COMMENT,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const update_ccms = (data, id, prev_data) => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    if (prev_data.date_acknowledged) {\r\n        axios\r\n            .put(`/api/ccms/${id}/`, data)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: UPDATE_CCMS,\r\n                    payload: res.data\r\n                });\r\n                dispatch({\r\n                    type: STOP_FETCHING\r\n                });\r\n            })\r\n            .catch(err => console.log(err.response));\r\n    } else {\r\n        Promise.all([\r\n            axios.put(`/api/ccms/${id}/`, data),\r\n            axios.post(\"/api/comments/\", {\r\n                contributor: data.cba_auth_user,\r\n                ccms: { ...data, id: prev_data.id },\r\n                ccms_status: data.ccms_status,\r\n                entry: `Assigned by ${data.cba_auth_user.fullname}`\r\n            })\r\n        ])\r\n            .then(([res_ccms, res_comment]) => {\r\n                dispatch({\r\n                    type: COMPLETE_CCMS,\r\n                    payload: {\r\n                        completed_ccms: res_ccms.data,\r\n                        comment: res_comment.data\r\n                    }\r\n                });\r\n                dispatch({\r\n                    type: STOP_FETCHING\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response, err);\r\n            });\r\n    }\r\n};\r\n\r\nexport const get_users_list = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/users/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USERS_LIST,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const get_ccms_admin_list = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/group/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CCMS_ADMIN_LIST,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const get_silo = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/silo/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_SILO,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const get_ticket_type = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/ticket_type/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_TICKET_TYPE,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const get_ccms_status = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/ccms_status/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CCMS_STATUS,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const get_ccms_owner = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/ccms_owners/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CCMS_OWNER,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const get_site_code = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/site_code/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_SITE_CODE,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const get_accountable_team = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/accountable_team/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ACCOUNTABLE_TEAM,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const get_escalation_type = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/escalation_type/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ESCALATION_TYPE,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const get_ticket_status = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/ticket_status/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_TICKET_STATUS,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const get_business_unit = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/business_unit/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_BUSINESS_UNIT,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const get_ccms_list = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/ccms/\")\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CCMS,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const ack_entry = (id, data) => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .put(`/api/ccms/${id}/`, data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACK_ENTRY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response);\r\n        });\r\n\r\n    dispatch({\r\n        type: STOP_FETCHING\r\n    });\r\n};\r\n\r\nexport const getComments = id => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(`/api/comments/?ccms__id=${id}`)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_COMMENTS,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const add_update = data => dispatch => {\r\n    console.log(\"add update\");\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .post(\"/api/comments/\", data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ADD_UPDATE,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response);\r\n        });\r\n\r\n    dispatch({\r\n        type: STOP_FETCHING\r\n    });\r\n};\r\n\r\nexport const isFetching = () => dispatch => {\r\n    dispatch({\r\n        type: STOP_FETCHING\r\n    });\r\n};\r\n\r\nexport const getSurveys = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/surveys/\")\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_SURVEYS,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n","export const axiosDefault = \"https://10.235.83.26/\";\r\n// export const axiosDefault = \"https://localhost:443\";\r\n// export const axiosDefault = \"http://localhost:8000\";\r\n","import React from \"react\";\r\n\r\nexport const columns = [\r\n    {\r\n        Header: \"CCMS ID\",\r\n        accessor: \"id\"\r\n    },\r\n    {\r\n        Header: \"Escalator Name\",\r\n        accessor: \"escalated_by\"\r\n    },\r\n    {\r\n        Header: \"Ticket Status\",\r\n        id: \"ticket_status\",\r\n        accessor: row => (row.ticket_status || {}).name\r\n    },\r\n    {\r\n        Header: \"Bucket Age\",\r\n        accessor: \"mail_age\",\r\n        Cell: row => newBucketAge(row)\r\n    }\r\n];\r\n\r\nconst style = {\r\n    fontWeight: \"bold\"\r\n};\r\n\r\nconst newBucketAge = row => {\r\n    let data = row.value;\r\n    if (data >= 0 && data <= 5) {\r\n        return <div style={{ ...style, color: \"green\" }}>{\"0 to 5\"}</div>;\r\n    } else if (data >= 6 && data <= 10) {\r\n        return <div style={{ ...style, color: \"blue\" }}>{\"6 to 10\"}</div>;\r\n    } else if (data >= 11 && data <= 30) {\r\n        return <div style={{ ...style, color: \"red\" }}>{\"11 to 30\"}</div>;\r\n    } else if (data >= 30 && data <= 160) {\r\n        return <div style={{ ...style, color: \"gray\" }}>{\"30 to 160\"}</div>;\r\n    } else if (data > 161) {\r\n        return <div style={{ ...style, color: \"black\" }}>{`${data} days`}</div>;\r\n    }\r\n};\r\n","import React, { useState, Fragment } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\n\r\nconst CcmsModal = props => {\r\n    const {\r\n        parentCallback,\r\n        value,\r\n        ccms_entry_id,\r\n\r\n        // Testing new modal button\r\n        isOpen,\r\n        parentToggle\r\n    } = props;\r\n\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const toggle = () => setModal(!modal);\r\n\r\n    const sendData = e => {\r\n        console.log(\"No working\");\r\n        e == \"Yes\"\r\n            ? parentCallback({ is_sending: e, value, ccms_entry_id }, toggle())\r\n            : parentCallback({ is_sending: e });\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* <Button color={color} className={className} onSubmit={submitForm}>\r\n                {buttonLabel}\r\n            </Button> */}\r\n            <Modal isOpen={isOpen} toggle={parentToggle}>\r\n                <ModalHeader toggle={parentToggle}>Submit Form</ModalHeader>\r\n                <ModalBody>\r\n                    Are you sure you want to submit this {value}?\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={e => sendData(e.target.value)}\r\n                        value=\"Yes\"\r\n                    >\r\n                        Yes\r\n                    </Button>{\" \"}\r\n                    <Button\r\n                        color=\"secondary\"\r\n                        onClick={e => sendData(e.target.value)}\r\n                        value=\"No\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CcmsModal;\r\n","import React, { useState, Fragment } from \"react\";\r\nimport { Fade } from \"reactstrap\";\r\nimport InputForm from \"./InputForm\";\r\n\r\nconst CommentList = props => {\r\n    const [showAll, setView] = useState(false);\r\n    const [showEdit, setToolView] = useState(false);\r\n\r\n    let comment_list =\r\n        props.comments.length > 5\r\n            ? props.comments.slice(Math.max(props.comments.length - 5, 1))\r\n            : props.comments;\r\n\r\n    const commentBoxStyle = {\r\n        backgroundColor: \"white\",\r\n        color: \"black\",\r\n        display: \"inline\",\r\n        paddingLeft: \"10px\",\r\n        paddingRight: \"10px\",\r\n        borderRadius: \"25px\",\r\n        paddingTop: \"3px\",\r\n        paddingBottom: \"3px\",\r\n        fontSize: \"15px\",\r\n        marginRight: \"8px\"\r\n    };\r\n\r\n    const dateCommentStyle = {\r\n        fontSize: \"12px\",\r\n        marginTop: \"6px\",\r\n        marginLeft: \"5px\"\r\n    };\r\n\r\n    const toggleStyle = {\r\n        fontSize: \"14px\",\r\n        color: \"blue\",\r\n        cursor: \"pointer\"\r\n    };\r\n\r\n    const handleCommentView = () => setView(!showAll);\r\n\r\n    const displayComment = comment_list =>\r\n        comment_list.map(comment => (\r\n            <div key={comment.id}>\r\n                <p style={commentBoxStyle}>\r\n                    <span style={{ color: \"blue\", fontWeight: \"bold\" }}>\r\n                        {comment.contributor.fullname}\r\n                    </span>\r\n                </p>\r\n                <p style={commentBoxStyle}>\r\n                    <span>\r\n                        <strong>{comment.ccms_status_during_comment}</strong>:{\" \"}\r\n                    </span>\r\n                    {/* <InputForm comment={comment} /> */}\r\n                    {comment.entry}\r\n                </p>\r\n                <p style={dateCommentStyle}>\r\n                    date posted: {comment.comment_entry_date}\r\n                </p>\r\n            </div>\r\n        ));\r\n\r\n    if (props.comments.length > 5 && !showAll) {\r\n        return (\r\n            <Fragment>\r\n                <p style={toggleStyle} onClick={handleCommentView}>\r\n                    Show all...\r\n                </p>\r\n                {displayComment(comment_list)}\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {props.comments.length > 5 ? (\r\n                <p style={toggleStyle} onClick={handleCommentView}>\r\n                    Hide...\r\n                </p>\r\n            ) : null}\r\n            {displayComment(props.comments)}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst CommentEntry = props => {\r\n    const [showEdit, setToolView] = useState(false);\r\n\r\n    return (\r\n        <strong\r\n            value=\"comment_detail\"\r\n            onMouseEnter={() => setToolView(!showEdit)}\r\n            onMouseLeave={() => setToolView(!showEdit)}\r\n        >\r\n            {props.comment.entry}{\" \"}\r\n            {showEdit ? (\r\n                <i\r\n                    className=\"fas fa-edit\"\r\n                    onClick={() => console.log(\"clicking\")}\r\n                ></i>\r\n            ) : null}\r\n        </strong>\r\n    );\r\n};\r\n\r\nexport default CommentList;\r\n","import React, { Component } from \"react\";\r\nimport { Input } from \"reactstrap\";\r\n\r\nclass InputForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showEdit: false,\r\n            showInput: false,\r\n            entry: props.comment.entry\r\n        };\r\n    }\r\n\r\n    handleMouseEnter = () => this.setState({ showEdit: !this.state.showEdit });\r\n    handleMouseLeave = () => this.setState({ showEdit: !this.state.showEdit });\r\n\r\n    handleKeyDown = e => {\r\n        if (e.keyCode === 27) {\r\n            this.setState({ showInput: false });\r\n        }\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    render() {\r\n        if (this.state.showInput) {\r\n            return (\r\n                <input\r\n                    onKeyDown={e => this.handleKeyDown(e)}\r\n                    style={{ border: \"none\" }}\r\n                    name=\"entry\"\r\n                    value={this.state.entry}\r\n                    onChange={this.handleChange}\r\n                />\r\n            );\r\n        }\r\n        return (\r\n            <strong\r\n                value=\"comment_detail\"\r\n                onMouseEnter={this.handleMouseEnter}\r\n                onMouseLeave={this.handleMouseLeave}\r\n            >\r\n                {this.props.comment.entry}{\" \"}\r\n                {this.state.showEdit ? (\r\n                    <i\r\n                        style={{ cursor: \"pointer\" }}\r\n                        className=\"fas fa-edit\"\r\n                        onClick={() =>\r\n                            this.setState({ showInput: !this.state.showInput })\r\n                        }\r\n                    ></i>\r\n                ) : null}\r\n            </strong>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputForm;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { add_comment } from \"../../../../actions/ccmsActions\";\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport {\r\n    Form,\r\n    Input,\r\n    Row,\r\n    Col,\r\n    FormGroup,\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    Button,\r\n    InputGroupButtonDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from \"reactstrap\";\r\n\r\nimport CommentList from \"./CommentList\";\r\n\r\nclass CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dropdownOpen: false,\r\n            ccms: props.ccms_entry,\r\n            entry: \"\",\r\n            ccms_status:\r\n                (props.ccms_entry || {}).ccms_status != null\r\n                    ? (props.ccms_entry || {}).ccms_status\r\n                    : \"\",\r\n            ccms_entry_comments: props.ccms_entry_comment,\r\n            contributor: (props.auth || {}).user\r\n        };\r\n    }\r\n\r\n    handleChange = event => {\r\n        const target = event.target;\r\n        const name = target.name;\r\n\r\n        const value =\r\n            name === \"ccms_status\"\r\n                ? this.props.ccms.ccms_status[target.value]\r\n                : target.value;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        this.props.add_comment(this.state);\r\n    };\r\n\r\n    toggleDropDown = () =>\r\n        this.setState({ dropdownOpen: !this.state.dropdownOpen });\r\n\r\n    getList = id =>\r\n        this.props.comments.filter(comment => (comment.ccms || {}).id == id);\r\n\r\n    render() {\r\n        const { ccms_status, entry, ccms } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Row className=\"mt-3\">\r\n                    <Col>\r\n                        <h4>Comments / Updates</h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {this.getList(ccms.id).length != 0 ? (\r\n                            <CommentList comments={this.getList(ccms.id)} />\r\n                        ) : (\r\n                            <p>No comments...</p>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n                <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n                    <FormGroup row>\r\n                        <Col>\r\n                            <InputGroup className=\"mb-4\">\r\n                                <InputGroupButtonDropdown\r\n                                    addonType=\"prepend\"\r\n                                    isOpen={this.state.dropdownOpen}\r\n                                    toggle={this.toggleDropDown}\r\n                                >\r\n                                    <DropdownToggle color=\"primary\" caret>\r\n                                        {ccms_status.name}\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu>\r\n                                        {this.props.ccms.ccms_status.map(\r\n                                            (item, index) => (\r\n                                                <DropdownItem\r\n                                                    key={item.id}\r\n                                                    value={index}\r\n                                                    onClick={this.handleChange}\r\n                                                    name=\"ccms_status\"\r\n                                                >\r\n                                                    {item.name}\r\n                                                </DropdownItem>\r\n                                            )\r\n                                        )}\r\n                                    </DropdownMenu>\r\n                                </InputGroupButtonDropdown>\r\n                                {/* <Input\r\n                                    color=\"primary\"\r\n                                    name=\"ccms_status\"\r\n                                    type=\"select\"\r\n                                    value={ccms_status}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                >\r\n                                    <option\r\n                                        key={ccms_status.id}\r\n                                        value={ccms_status.id}\r\n                                    >\r\n                                        {ccms_status.name}\r\n                                    </option>\r\n\r\n                                    {(this.props.ccms || {}).ccms_status.map(\r\n                                        (item, index) => (\r\n                                            <option\r\n                                                key={item.id}\r\n                                                value={item.id}\r\n                                            >\r\n                                                {item.name}\r\n                                            </option>\r\n                                        )\r\n                                    )}\r\n                                </Input> */}\r\n                                <Input\r\n                                    name=\"entry\"\r\n                                    value={entry}\r\n                                    onChange={this.handleChange}\r\n                                    placeholder=\"Enter comment here...\"\r\n                                />\r\n                                <InputGroupAddon addonType=\"append\">\r\n                                    <Button color=\"success\">\r\n                                        <i className=\"fas fa-paper-plane\"></i>\r\n                                    </Button>\r\n                                </InputGroupAddon>\r\n                            </InputGroup>\r\n                        </Col>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ccms: state.ccms,\r\n    ccms_status_list: state.ccms.ccms_list,\r\n    comments: state.ccms.comments,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, { add_comment })(CommentForm);\r\n","export const capsFirstWord = string =>\r\n    string.replace(/(^\\w{1})|(\\s{1}\\w{1})/g, match => match.toUpperCase());\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Col, FormGroup, Input, Label } from \"reactstrap\";\r\n\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\n\r\nimport { capsFirstWord } from \"../Helpers/Helpers\";\r\n\r\nclass DynamicInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // props\r\n        // type, name, onChange, value, required\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    typeaheadProps = (col, id) => ({\r\n        bsSize: \"sm\",\r\n        labelKey: this.props.labelKey,\r\n        onChange: selected => this.props.onChange(selected[0], col),\r\n        id: id,\r\n        // this.props.select_options ? this.props.select_options : null\r\n        options: this.props.select_options ? this.props.select_options : [],\r\n        selected: this.props.value ? [this.props.value] : [],\r\n        placeholder: \"Select...\",\r\n        selectHintOnEnter: true,\r\n        clearButton: true,\r\n        name: col\r\n    });\r\n\r\n    render() {\r\n        const {\r\n            size,\r\n            name,\r\n            onChange,\r\n            value,\r\n\r\n            form_title\r\n        } = this.props;\r\n        let newName = name.replace(/(select_|text_|textarea_)/i, \"\");\r\n        let id = \"id_\" + form_title + newName;\r\n\r\n        return (\r\n            <FormGroup size=\"sm\">\r\n                <Label for={id}>\r\n                    {capsFirstWord(newName.replace(\"_\", \" \"))}\r\n                </Label>\r\n\r\n                {name.includes(\"select_\") ? (\r\n                    <Typeahead\r\n                        {...this.typeaheadProps(name, id)}\r\n                        inputProps={{ required: true }}\r\n                    />\r\n                ) : (\r\n                    <Input\r\n                        bsSize={size}\r\n                        type=\"textarea\"\r\n                        name={name}\r\n                        id={id}\r\n                        onChange={e => {\r\n                            const { value, name } = e.target;\r\n                            return onChange(value, name);\r\n                        }}\r\n                        value={value}\r\n                        required\r\n                    />\r\n                )}\r\n            </FormGroup>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(null, {})(DynamicInput);\r\n","import React from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\n\r\nconst DynamicConfirmModal = ({\r\n    parentCallback,\r\n    modal,\r\n    formattedFormTitle,\r\n    form_inputs,\r\n    toggleModal\r\n}) => {\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggleModal}>\r\n            <ModalHeader toggle={toggleModal}>{formattedFormTitle}</ModalHeader>\r\n            <ModalBody>\r\n                Sending {formattedFormTitle} for ticket{\" \"}\r\n                {(form_inputs.fni || {}).ticket_number\r\n                    ? form_inputs.fni.ticket_number\r\n                    : null}\r\n                ?\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button\r\n                    color=\"primary\"\r\n                    value=\"Yes\"\r\n                    onClick={e => parentCallback(e.target.value)}\r\n                >\r\n                    Yes\r\n                </Button>{\" \"}\r\n                <Button color=\"secondary\" onClick={toggleModal}>\r\n                    Cancel\r\n                </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nconst Content = ({ formattedFormTitle, form_inputs }) => (\r\n    <div>\r\n        Sending {formattedFormTitle} for ticket{\" \"}\r\n        {(form_inputs.fni || {}).ticket_number\r\n            ? form_inputs.fni.ticket_number\r\n            : null}\r\n        ?\r\n    </div>\r\n);\r\n\r\nexport default DynamicConfirmModal;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    Table,\r\n    UncontrolledPopover,\r\n    PopoverHeader,\r\n    PopoverBody\r\n} from \"reactstrap\";\r\n\r\nimport { capsFirstWord } from \"../Helpers/Helpers\";\r\n\r\nclass DynamicList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // props\r\n        // list name, list\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const { list, form_title } = this.props;\r\n\r\n        let excludeList = [\"id\", \"fni\", \"description\"];\r\n\r\n        const filterList = (list, excludeList) =>\r\n            Object.keys(list).filter(item => !excludeList.includes(item));\r\n\r\n        return (\r\n            <Table style={{ color: \"white\", fontSize: \"14px\" }}>\r\n                <thead>\r\n                    <tr>\r\n                        {filterList(list[0], excludeList).map((item, index) => (\r\n                            <th key={index}>{item.replace(\"_\", \" \")}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {list.map((item, index) => (\r\n                        <Fragment key={index}>\r\n                            <tr\r\n                                key={index}\r\n                                id={`id_table_${form_title}_item_${item.id}`}\r\n                                style={{ cursor: \"pointer\" }}\r\n                                className=\"dynamic_list_row\"\r\n                            >\r\n                                {filterList(item, excludeList).map(\r\n                                    (prop, index) => {\r\n                                        return (\r\n                                            <td key={index}>{item[prop]}</td>\r\n                                        );\r\n                                    }\r\n                                )}\r\n\r\n                                <UncontrolledPopover\r\n                                    trigger=\"legacy\"\r\n                                    placement=\"top\"\r\n                                    target={`id_table_${form_title}_item_${item.id}`}\r\n                                    key={index}\r\n                                    className=\"popover-container\"\r\n                                >\r\n                                    <PopoverHeader>\r\n                                        <p>\r\n                                            <span>\r\n                                                {capsFirstWord(\r\n                                                    form_title.replace(\"_\", \" \")\r\n                                                )}\r\n                                                :{\" \"}\r\n                                            </span>\r\n                                            {item.ticket_number}\r\n                                        </p>\r\n                                    </PopoverHeader>\r\n                                    <PopoverBody>\r\n                                        <p>\r\n                                            <span>Ticket Number: </span>{\" \"}\r\n                                            {item.ticket_number}\r\n                                        </p>\r\n                                        <p>\r\n                                            <span>Submitted Date:</span>{\" \"}\r\n                                            {item.submitted_date}\r\n                                        </p>\r\n                                        <p>\r\n                                            <span>Description:</span>{\" \"}\r\n                                            {item.description}\r\n                                        </p>\r\n                                    </PopoverBody>\r\n                                </UncontrolledPopover>\r\n                            </tr>\r\n                        </Fragment>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(null, {})(DynamicList);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Form, Row, Col, Button, Card, CardTitle } from \"reactstrap\";\r\n\r\nimport DynamicInput from \"../Input/DynamicInput\";\r\nimport DynamicConfirmModal from \"../Modals/DynamicConfirmModal\";\r\nimport DynamicList from \"../List/DynamicList\";\r\n\r\nimport { capsFirstWord } from \"../Helpers/Helpers\";\r\nimport { submit_ca, update_ccms } from \"../../../../actions/ccmsActions\";\r\n\r\nclass DynamicForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // props\r\n        // form title, form keys\r\n\r\n        const { form_title, form_inputs } = props;\r\n\r\n        this.state = {\r\n            form_title,\r\n            form_inputs: { ...form_inputs },\r\n            isModalOpen: false\r\n        };\r\n    }\r\n\r\n    toggleModal = () => this.setState({ isModalOpen: !this.state.isModalOpen });\r\n\r\n    parentCallback = childData => {\r\n        let form_inputs = { ...this.state.form_inputs };\r\n\r\n        // Removes input type identifier in obj keys\r\n        let newInput = {};\r\n        Object.keys(form_inputs).forEach(item => {\r\n            let name = item.replace(/(select_|text_|textarea_)/i, \"\");\r\n\r\n            let newPair = {\r\n                [name]: form_inputs[item]\r\n            };\r\n\r\n            newInput = { ...newInput, ...newPair };\r\n        });\r\n\r\n        if (childData === \"Yes\") {\r\n            switch (this.state.form_title) {\r\n                case \"corrective_actions\":\r\n                    this.props.submit_ca(newInput);\r\n                    break;\r\n                case \"change_owner\":\r\n                    console.log(newInput);\r\n                    console.log(this.props.ccms_entry.id);\r\n                    this.props.update_ccms(\r\n                        {\r\n                            ...newInput,\r\n                            cba_auth_user: this.props.cba_auth_user\r\n                        },\r\n                        this.props.ccms_entry.id,\r\n                        this.props.ccms_entry\r\n                    );\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n            // console.log(newInput);\r\n        }\r\n\r\n        // clear form_inputs values after successful submit\r\n        Object.keys(form_inputs).forEach(item => {\r\n            return (form_inputs[item] = \"\");\r\n        });\r\n        this.setState({\r\n            form_inputs\r\n        });\r\n\r\n        this.toggleModal();\r\n    };\r\n\r\n    handleChange = (value, name) => {\r\n        let form_inputs = { ...this.state.form_inputs };\r\n\r\n        form_inputs[name] = value;\r\n\r\n        this.setState(\r\n            {\r\n                form_inputs\r\n            }\r\n            // () => console.log(this.state) // Check State on every input Change\r\n        );\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.toggleModal();\r\n    };\r\n\r\n    render() {\r\n        const { form_title, form_inputs, isModalOpen } = this.state;\r\n        let labels = form_inputs ? Object.keys(form_inputs) : null;\r\n        let formattedFormTitle = capsFirstWord(form_title.replace(\"_\", \" \"));\r\n\r\n        const titleStyle = { fontWeight: \"bold\", fontSize: \"18px\" };\r\n\r\n        return (\r\n            <Fragment>\r\n                <DynamicConfirmModal\r\n                    modal={isModalOpen}\r\n                    toggleModal={this.toggleModal}\r\n                    parentCallback={this.parentCallback}\r\n                    formattedFormTitle={formattedFormTitle}\r\n                    form_inputs={form_inputs}\r\n                    form_title={form_title}\r\n                />\r\n                <Card body className=\"mb-2\">\r\n                    <Form autoComplete=\"off\" onSubmit={this.handleSubmit}>\r\n                        <CardTitle style={titleStyle}>\r\n                            {form_title\r\n                                ? formattedFormTitle\r\n                                : \"No Title Provided\"}\r\n                        </CardTitle>\r\n\r\n                        {labels\r\n                            ? labels.map((label, index) => (\r\n                                  <DynamicInput\r\n                                      form_title={form_title}\r\n                                      key={index}\r\n                                      size=\"sm\"\r\n                                      name={label}\r\n                                      onChange={this.handleChange}\r\n                                      value={form_inputs[label]}\r\n                                      select_options={this.props.select_options}\r\n                                      labelKey={this.props.labelKey}\r\n                                  />\r\n                              ))\r\n                            : \"No Inputs\"}\r\n\r\n                        <Row className=\"mb-3\">\r\n                            <Col>\r\n                                <Button color=\"primary\">\r\n                                    <i className=\"fas fa-paper-plane mr-1\"></i>\r\n                                    Submit {formattedFormTitle}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        {this.props.display_list &&\r\n                        this.props.display_list.length ? (\r\n                            <Fragment>\r\n                                <CardTitle style={titleStyle}>\r\n                                    List of {formattedFormTitle}\r\n                                </CardTitle>\r\n                                <DynamicList\r\n                                    list={this.props.display_list}\r\n                                    form_title={form_title}\r\n                                />\r\n                            </Fragment>\r\n                        ) : null}\r\n                    </Form>\r\n                </Card>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    fni_list: state.ccms.fni,\r\n    cba_auth_user: state.auth.user\r\n});\r\n\r\nexport default connect(mapStateToProps, { submit_ca, update_ccms })(\r\n    DynamicForm\r\n);\r\n","import React from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\n\r\nconst ConfirmRcaSubmitModal = ({ modal, toggle, parentCallback, ccms_rca }) => {\r\n    const action = ccms_rca.completed_on ? \"Update\" : \"Submit\";\r\n\r\n    return (\r\n        <div>\r\n            <Modal isOpen={modal} toggle={toggle}>\r\n                <ModalHeader\r\n                    toggle={toggle}\r\n                    style={{ backgroundColor: \"green\" }}\r\n                >\r\n                    {action} CCMS RCA ID {ccms_rca.id}\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <p>\r\n                        Are you sure you want to {action} CCMS RCA ID{\" \"}\r\n                        {ccms_rca.id}{\" \"}\r\n                    </p>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        value=\"Yes\"\r\n                        onClick={e => parentCallback(e.target.value)}\r\n                    >\r\n                        Yes\r\n                    </Button>{\" \"}\r\n                    <Button color=\"secondary\" onClick={toggle}>\r\n                        No\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConfirmRcaSubmitModal;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport {\r\n    Form,\r\n    Row,\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Container,\r\n    Button,\r\n    Card,\r\n    CardTitle\r\n} from \"reactstrap\";\r\n\r\nimport { complete_ccms_rca } from \"../../../../actions/ccmsActions\";\r\n\r\nimport ConfirmRcaSubmitModal from \"./ConfirmRcaSubmitModal\";\r\n\r\nclass CcmsRcaForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const {\r\n            agent_name,\r\n            ticket_description,\r\n            ccms_ticket_description,\r\n            team_spg_accountability,\r\n            business_unit,\r\n            specific_bu,\r\n            agent_silo,\r\n            controllability,\r\n            cause_code,\r\n            escalation_driver,\r\n            escalation_driver_cause,\r\n            event_description,\r\n            ticket_number\r\n        } = props.ccms_rca;\r\n\r\n        this.state = {\r\n            ccms_rca_state: {\r\n                agent_name: agent_name ? agent_name : \"\",\r\n                ticket_description: ticket_description\r\n                    ? ticket_description\r\n                    : \"\",\r\n                ccms_ticket_description: ccms_ticket_description\r\n                    ? ccms_ticket_description\r\n                    : \"\",\r\n                team_spg_accountability: team_spg_accountability\r\n                    ? team_spg_accountability\r\n                    : \"\",\r\n                business_unit: business_unit ? business_unit : \"\",\r\n                specific_bu: specific_bu ? specific_bu : \"\",\r\n                agent_silo,\r\n                controllability,\r\n                cause_code,\r\n                escalation_driver,\r\n                escalation_driver_cause,\r\n                event_description: event_description ? event_description : \"\",\r\n                ticket_number: ticket_number ? ticket_number : \"\"\r\n            },\r\n            modal: false\r\n        };\r\n    }\r\n\r\n    handleChange = event => {\r\n        const target = event.target;\r\n        const value =\r\n            target.type === \"checkbox\" ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        let ccms_rca_state = { ...this.state.ccms_rca_state };\r\n\r\n        ccms_rca_state[name] = value;\r\n\r\n        this.setState(\r\n            {\r\n                ccms_rca_state\r\n            },\r\n            () => console.log(this.state.ccms_rca_state) // STATE CHECK ON EVERY CHANGE\r\n        );\r\n    };\r\n\r\n    exemptions = [\"escalation_driver\", \"escalation_driver_cause\"];\r\n\r\n    typeaheadProps = col => ({\r\n        bsSize: \"sm\",\r\n        labelKey: \"name\",\r\n        onChange: selected => {\r\n            let ccms_rca_state = { ...this.state.ccms_rca_state };\r\n\r\n            ccms_rca_state[col] = selected[0];\r\n\r\n            if (col === \"cause_code\" && !selected[0]) {\r\n                ccms_rca_state.escalation_driver = null;\r\n                ccms_rca_state.escalation_driver_cause = null;\r\n            } else if (col === \"escalation_driver\" && !selected[0]) {\r\n                ccms_rca_state.escalation_driver_cause = null;\r\n            }\r\n            return this.setState({ ccms_rca_state });\r\n        },\r\n        id: \"id_rca_\" + col,\r\n        options: !this.exemptions.includes(col)\r\n            ? this.props[col]\r\n            : this.filteredDriverList(\r\n                  this.props[col],\r\n                  this.state.ccms_rca_state,\r\n                  col\r\n              ),\r\n        selected: this.state.ccms_rca_state[col]\r\n            ? this.exemptions.includes(col) &&\r\n              !this.state.ccms_rca_state.cause_code\r\n                ? []\r\n                : [this.state.ccms_rca_state[col]]\r\n            : [],\r\n        placeholder: \"Select...\",\r\n        selectHintOnEnter: true,\r\n        clearButton: true,\r\n        name: col\r\n    });\r\n\r\n    // this.exemptions.includes(col) && !cause_code ?  [] : this.state.ccms_rca_state[col]\r\n\r\n    // this.filteredDriverList(this.props[col],this.state.ccms_rca_state, col)\r\n\r\n    filteredDriverList = (driverName, selectedData, tableName) => {\r\n        if (\r\n            tableName == \"escalation_driver\" ||\r\n            tableName === \"escalation_driver_cause\"\r\n        ) {\r\n            return driverName.filter(item => {\r\n                if (selectedData.cause_code && selectedData.escalation_driver) {\r\n                    return (\r\n                        item.escalation_driver ==\r\n                        selectedData.escalation_driver.id\r\n                    );\r\n                } else if (selectedData.cause_code) {\r\n                    return item.cause_code == selectedData.cause_code.id;\r\n                }\r\n            });\r\n        }\r\n\r\n        return driverName;\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            modal: true\r\n        });\r\n    };\r\n\r\n    parentCallback = childData => {\r\n        const { complete_ccms_rca, ccms_rca } = this.props;\r\n        let ccms_rca_state = { ...this.state.ccms_rca_state };\r\n        console.log(childData);\r\n\r\n        if (childData === \"Yes\") {\r\n            // Save RCA\r\n            complete_ccms_rca({ ccms_rca, ccms_rca_state });\r\n        }\r\n\r\n        this.toggle();\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState({ modal: !this.state.modal });\r\n    };\r\n\r\n    render() {\r\n        const { ccms_rca, ccms } = this.props;\r\n        const {\r\n            agent_name,\r\n            agent_silo,\r\n            escalated_ticket,\r\n            ccms_rca_state,\r\n            modal\r\n        } = this.state;\r\n\r\n        const titleStyle = { fontWeight: \"bold\", fontSize: \"18px\" };\r\n\r\n        // modal, toggle, parentCallback\r\n        return (\r\n            <Fragment>\r\n                <ConfirmRcaSubmitModal\r\n                    modal={modal}\r\n                    toggle={this.toggle}\r\n                    parentCallback={this.parentCallback}\r\n                    ccms_rca={ccms_rca}\r\n                />\r\n                <Card body>\r\n                    <Form\r\n                        style={{ fontSize: \"14px\" }}\r\n                        autoComplete=\"off\"\r\n                        onSubmit={this.handleSubmit}\r\n                    >\r\n                        <CardTitle style={titleStyle}>\r\n                            TICKET AND AGENT INFORMATION\r\n                        </CardTitle>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_escalated_ticket\">\r\n                                Escalated Ticket\r\n                            </Label>\r\n\r\n                            <Input\r\n                                bsSize=\"sm\"\r\n                                type=\"text\"\r\n                                name=\"escalated_ticket\"\r\n                                id=\"id_rca_escalated_ticket\"\r\n                                disabled\r\n                                value={ccms.escalated_ticket}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_agent_name\">Agent's Name</Label>\r\n\r\n                            <Input\r\n                                onChange={this.handleChange}\r\n                                bsSize=\"sm\"\r\n                                type=\"text\"\r\n                                name=\"agent_name\"\r\n                                id=\"id_rca_agent_name\"\r\n                                value={ccms_rca_state.agent_name}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_agent_silo\">Agent's Silo</Label>\r\n\r\n                            <Typeahead\r\n                                {...this.typeaheadProps(\"agent_silo\")}\r\n                                inputProps={{ required: true }}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_ticket_description\">\r\n                                Ticket's Description\r\n                            </Label>\r\n\r\n                            <Input\r\n                                onChange={this.handleChange}\r\n                                bsSize=\"sm\"\r\n                                type=\"text\"\r\n                                name=\"ticket_description\"\r\n                                id=\"id_rca_ticket_description\"\r\n                                value={ccms_rca_state.ticket_description}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_summary_complaint\">\r\n                                Captured Issue\r\n                            </Label>\r\n\r\n                            <Input\r\n                                bsSize=\"sm\"\r\n                                type=\"text\"\r\n                                name=\"summary_complaint\"\r\n                                id=\"id_rca_summary_complaint\"\r\n                                disabled\r\n                                value={ccms.summary_complaint}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_ccms_ticket_description\">\r\n                                CCMS Ticket Description\r\n                            </Label>\r\n\r\n                            <Input\r\n                                onChange={this.handleChange}\r\n                                bsSize=\"sm\"\r\n                                type=\"text\"\r\n                                name=\"ccms_ticket_description\"\r\n                                id=\"id_rca_ccms_ticket_description\"\r\n                                value={ccms_rca_state.ccms_ticket_description}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <CardTitle style={titleStyle}>RCA DETAILS</CardTitle>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_controllability\">\r\n                                Controllability\r\n                            </Label>\r\n\r\n                            <Typeahead\r\n                                {...this.typeaheadProps(\"controllability\")}\r\n                                inputProps={{ required: true }}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_cause_code\">Cause Code</Label>\r\n\r\n                            <Typeahead\r\n                                {...this.typeaheadProps(\"cause_code\")}\r\n                                inputProps={{ required: true }}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_escalation_driver\">\r\n                                Escalation Driver\r\n                            </Label>\r\n\r\n                            <Typeahead\r\n                                {...this.typeaheadProps(\"escalation_driver\")}\r\n                                inputProps={{\r\n                                    required: true\r\n                                }}\r\n                                disabled={!ccms_rca_state.cause_code}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_escalation_driver_causer\">\r\n                                Escalation Driver Cause\r\n                            </Label>\r\n\r\n                            <Typeahead\r\n                                {...this.typeaheadProps(\r\n                                    \"escalation_driver_cause\"\r\n                                )}\r\n                                inputProps={{\r\n                                    required: true\r\n                                }}\r\n                                disabled={\r\n                                    !ccms_rca_state.escalation_driver ||\r\n                                    !ccms_rca_state.cause_code\r\n                                }\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_team_spg_accountability\">\r\n                                Team (SPG Accountability)\r\n                            </Label>\r\n\r\n                            <Input\r\n                                onChange={this.handleChange}\r\n                                bsSize=\"sm\"\r\n                                type=\"text\"\r\n                                name=\"team_spg_accountability\"\r\n                                id=\"id_rca_team_spg_accountability\"\r\n                                value={ccms_rca_state.team_spg_accountability}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_business_unit\">\r\n                                Business Unit\r\n                            </Label>\r\n\r\n                            <Input\r\n                                onChange={this.handleChange}\r\n                                bsSize=\"sm\"\r\n                                type=\"text\"\r\n                                name=\"business_unit\"\r\n                                id=\"id_rca_business_unit\"\r\n                                value={ccms_rca_state.business_unit}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_specific_bu\">Specific BU</Label>\r\n\r\n                            <Input\r\n                                onChange={this.handleChange}\r\n                                bsSize=\"sm\"\r\n                                type=\"text\"\r\n                                name=\"specific_bu\"\r\n                                id=\"id_rca_specific_bu\"\r\n                                value={ccms_rca_state.specific_bu}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <CardTitle style={titleStyle}>SUMMARY</CardTitle>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_ticket_number\">\r\n                                Ticket Number\r\n                            </Label>\r\n\r\n                            <Input\r\n                                onChange={this.handleChange}\r\n                                bsSize=\"sm\"\r\n                                type=\"input\"\r\n                                name=\"ticket_number\"\r\n                                id=\"id_rca_ticket_number\"\r\n                                value={ccms_rca_state.ticket_number}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_rca_event_description\">\r\n                                Event Description\r\n                            </Label>\r\n\r\n                            <Input\r\n                                onChange={this.handleChange}\r\n                                bsSize=\"sm\"\r\n                                type=\"textarea\"\r\n                                name=\"event_description\"\r\n                                id=\"id_rca_event_description\"\r\n                                value={ccms_rca_state.event_description}\r\n                                rows={4}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        {ccms_rca.completed_on ? (\r\n                            <Button color=\"success\">\r\n                                <i className=\"fas fa-pen mr-1\"></i>Update RCA\r\n                            </Button>\r\n                        ) : (\r\n                            <Button color=\"primary\">\r\n                                <i className=\"fas fa-paper-plane mr-1\"></i>\r\n                                Complete RCA\r\n                            </Button>\r\n                        )}\r\n                    </Form>\r\n                </Card>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    agent_silo: state.ccms.silo,\r\n    controllability: state.ccms.accountable_team,\r\n    cause_code: state.ccms.cause_code,\r\n    escalation_driver: state.ccms.escalation_driver,\r\n    escalation_driver_cause: state.ccms.escalation_driver_cause\r\n});\r\n\r\nexport default connect(mapStateToProps, { complete_ccms_rca })(CcmsRcaForm);\r\n","import React from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\n\r\nconst RcaFniModal = ({ modal, toggle, parentCallback, ccms_rca }) => {\r\n    return (\r\n        <div>\r\n            <Modal isOpen={modal} toggle={toggle}>\r\n                <ModalHeader\r\n                    toggle={toggle}\r\n                    style={{ backgroundColor: \"green\" }}\r\n                >\r\n                    CCMS RCA ID {ccms_rca.id}\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <p>\r\n                        Are you sure you want to submit findings and\r\n                        investigation to CCMS RCA ID {ccms_rca.id}{\" \"}\r\n                    </p>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        value=\"Yes\"\r\n                        onClick={e => parentCallback(e.target.value)}\r\n                    >\r\n                        Yes\r\n                    </Button>{\" \"}\r\n                    <Button color=\"secondary\" onClick={toggle}>\r\n                        No\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RcaFniModal;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    Table,\r\n    UncontrolledPopover,\r\n    PopoverHeader,\r\n    PopoverBody\r\n} from \"reactstrap\";\r\n\r\nclass RcaFniList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const { fni_list } = this.props;\r\n\r\n        let excludeList = [\"id\", \"ccms_rca\", \"description\"];\r\n\r\n        const filterList = (list, excludeList) =>\r\n            Object.keys(list).filter(item => !excludeList.includes(item));\r\n\r\n        return (\r\n            <Fragment>\r\n                <Table style={{ color: \"white\", fontSize: \"14px\" }}>\r\n                    <thead>\r\n                        <tr>\r\n                            {filterList(fni_list[0], excludeList).map(\r\n                                (item, index) => (\r\n                                    <th key={index}>\r\n                                        {item.replace(\"_\", \" \")}\r\n                                    </th>\r\n                                )\r\n                            )}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {fni_list.map((item, index) => (\r\n                            <tr\r\n                                key={index}\r\n                                id=\"id_table_data_item\"\r\n                                style={{ cursor: \"pointer\" }}\r\n                                className=\"dynamic_list_row\"\r\n                                id={`id_table_fni_item_${item.id}`}\r\n                            >\r\n                                <td>{item.ticket_number}</td>\r\n                                <td>{item.agent_name}</td>\r\n                                <td>{item.submitted_date}</td>\r\n                                <UncontrolledPopover\r\n                                    trigger=\"legacy\"\r\n                                    placement=\"top\"\r\n                                    target={`id_table_fni_item_${item.id}`}\r\n                                    key={index}\r\n                                    className=\"popover-container\"\r\n                                >\r\n                                    <PopoverHeader>\r\n                                        <p>\r\n                                            <span>\r\n                                                Findings and Investigation :{\" \"}\r\n                                            </span>\r\n                                            {item.ticket_number}\r\n                                        </p>\r\n                                    </PopoverHeader>\r\n                                    <PopoverBody>\r\n                                        <p>\r\n                                            <span>Ticket Number: </span>{\" \"}\r\n                                            {item.ticket_number}\r\n                                        </p>\r\n                                        <p>\r\n                                            <span>Submitted Date:</span>{\" \"}\r\n                                            {item.submitted_date}\r\n                                        </p>\r\n                                        <p>\r\n                                            <span>Description:</span>{\" \"}\r\n                                            {item.description}\r\n                                        </p>\r\n                                    </PopoverBody>\r\n                                </UncontrolledPopover>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    fni_list: state.ccms.fni\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(RcaFniList);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    Form,\r\n    Row,\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Button,\r\n    Card,\r\n    CardTitle\r\n} from \"reactstrap\";\r\n\r\nimport RcaFniModal from \"./RcaFniModal\";\r\nimport RcaFniList from \"./RcaFniList\";\r\nimport { complete_fni, get_fni_list } from \"../../../../../actions/ccmsActions\";\r\n\r\nclass RcaFindingsAndInvestigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Need props >>> ccms_rca\r\n\r\n        this.state = {\r\n            fni: {\r\n                agent_name: \"\",\r\n                ticket_number: \"\",\r\n                description: \"\"\r\n            },\r\n            modal: false\r\n        };\r\n    }\r\n\r\n    handleChange = e => {\r\n        const { name, value } = e.target;\r\n\r\n        let fni = { ...this.state.fni };\r\n\r\n        fni[name] = value;\r\n\r\n        this.setState({\r\n            fni\r\n        });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        // Open confirmation modal\r\n        this.toggle();\r\n    };\r\n\r\n    parentCallback = childData => {\r\n        const { complete_fni, ccms_rca } = this.props;\r\n        let fni = { ...this.state.fni };\r\n        // console.log(childData);\r\n        // console.log(fni);\r\n        // console.log(ccms_rca.id);\r\n\r\n        if (childData === \"Yes\") {\r\n            // Save RCA\r\n            complete_fni({ ccms_rca: ccms_rca.id, ...fni });\r\n        }\r\n\r\n        this.toggle();\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState({ modal: !this.state.modal });\r\n    };\r\n\r\n    // modal, toggle, parentCallback, ccms_rca\r\n\r\n    render() {\r\n        const labelLength = 3;\r\n        const { fni, modal } = this.state;\r\n        const { ccms_rca, fni_list } = this.props;\r\n\r\n        const titleStyle = { fontWeight: \"bold\", fontSize: \"18px\" };\r\n        return (\r\n            <Fragment>\r\n                <RcaFniModal\r\n                    modal={modal}\r\n                    toggle={this.toggle}\r\n                    parentCallback={this.parentCallback}\r\n                    ccms_rca={ccms_rca}\r\n                />\r\n\r\n                <Card body className=\"mb-2\">\r\n                    <CardTitle style={titleStyle}>\r\n                        Findings and Investigation\r\n                    </CardTitle>\r\n                    <Form\r\n                        onSubmit={this.handleSubmit}\r\n                        autoComplete=\"off\"\r\n                        style={{ fontSize: \"14px\" }}\r\n                        className=\"mb-3\"\r\n                    >\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_fni_ticket_number\">\r\n                                Ticket Number\r\n                            </Label>\r\n\r\n                            <Input\r\n                                bsSize=\"sm\"\r\n                                type=\"text\"\r\n                                name=\"ticket_number\"\r\n                                id=\"id_fni_ticket_number\"\r\n                                onChange={this.handleChange}\r\n                                value={fni.ticket_number}\r\n                                required\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_fni_agent_name\">Agent's Name</Label>\r\n\r\n                            <Input\r\n                                bsSize=\"sm\"\r\n                                type=\"text\"\r\n                                name=\"agent_name\"\r\n                                id=\"id_fni_agent_name\"\r\n                                onChange={this.handleChange}\r\n                                value={fni.agent_name}\r\n                                required\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup size=\"sm\">\r\n                            <Label for=\"id_fni_description\">Description</Label>\r\n\r\n                            <Input\r\n                                bsSize=\"sm\"\r\n                                type=\"textarea\"\r\n                                name=\"description\"\r\n                                id=\"id_fni_description\"\r\n                                onChange={this.handleChange}\r\n                                value={fni.description}\r\n                                rows={4}\r\n                                required\r\n                            />\r\n                        </FormGroup>\r\n                        <Row className=\"mb-2\">\r\n                            <Col>\r\n                                <Button color=\"primary\">\r\n                                    <i className=\"fas fa-paper-plane mr-1\"></i>\r\n                                    Submit Findings\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                    {!fni_list || !fni_list.length ? null : (\r\n                        <Fragment>\r\n                            <CardTitle style={titleStyle}>\r\n                                List of Findings and Investigation\r\n                            </CardTitle>\r\n\r\n                            <RcaFniList />\r\n                        </Fragment>\r\n                    )}\r\n                </Card>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    fni_list: state.ccms.fni\r\n});\r\n\r\nexport default connect(mapStateToProps, { complete_fni, get_fni_list })(\r\n    RcaFindingsAndInvestigation\r\n);\r\n","// ENTRY WILL BE A MODAL, MODAL STATE WILL BE HANDLED BY CCMSTABLE2\r\n\r\nimport React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Button,\r\n    TabContent,\r\n    TabPane,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Card,\r\n    CardTitle,\r\n    CardText,\r\n    Row,\r\n    Col\r\n} from \"reactstrap\";\r\nimport {\r\n    get_ccms_rca,\r\n    close_ccms_rca,\r\n    toggle_active_tab,\r\n    get_fni_list\r\n} from \"../../../../actions/ccmsActions\";\r\nimport classnames from \"classnames\";\r\n\r\nimport DynamicForm from \"../Forms/DynamicForm\";\r\nimport CcmsRcaForm from \"./CcmsRcaForm\";\r\nimport RcaFindingsAndInvestigation from \"./RcaFindingsAndInvestigation/RcaFindingsAndInvestigationForm\";\r\n\r\nclass CcmsRcaModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { activeTab: 1 };\r\n    }\r\n\r\n    getData = () => {\r\n        this.props.get_ccms_rca(this.props.ccms);\r\n    };\r\n\r\n    toggleTab = tab => {\r\n        const {\r\n            activeTab,\r\n            toggle_active_tab,\r\n            get_fni_list,\r\n            ccms_rca\r\n        } = this.props;\r\n\r\n        if (activeTab !== tab) {\r\n            // this.setState({ activeTab: tab });\r\n\r\n            toggle_active_tab(tab);\r\n        }\r\n    };\r\n\r\n    checkStatus = data => {\r\n        if (data.is_rca_completed) {\r\n            return {\r\n                color: \"success\",\r\n                text: \"Completed RCA\",\r\n                icon: \"fas fa-check\"\r\n            };\r\n        } else {\r\n            return {\r\n                color: \"danger\",\r\n                text: \"Incomplete RCA\",\r\n                icon: \"fas fa-exclamation\"\r\n            };\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            ccms_rca_modal,\r\n            ccms,\r\n            ccms_rca,\r\n            close_ccms_rca,\r\n            activeTab,\r\n            fni_list,\r\n            ca_list\r\n        } = this.props;\r\n        // const { activeTab } = this.state;\r\n\r\n        const style = { cursor: \"pointer\" };\r\n\r\n        const getDetails = this.checkStatus(ccms);\r\n\r\n        return (\r\n            <Fragment>\r\n                <Button onClick={this.getData} color={getDetails.color}>\r\n                    <i className={`${getDetails.icon} mr-1`}></i>\r\n                    {getDetails.text}\r\n                </Button>\r\n                <Modal\r\n                    className=\"modal-xl\"\r\n                    isOpen={ccms_rca_modal && ccms.id == ccms_rca.ccms}\r\n                    toggle={close_ccms_rca}\r\n                >\r\n                    <ModalHeader toggle={close_ccms_rca}>CCMS RCA</ModalHeader>\r\n                    <ModalBody>\r\n                        <Row className=\"mb-3\">\r\n                            <Col className=\"mb-2\">\r\n                                {ccms_rca ? (\r\n                                    <CcmsRcaForm\r\n                                        ccms_rca={ccms_rca}\r\n                                        ccms={ccms}\r\n                                    />\r\n                                ) : null}\r\n                            </Col>\r\n                            {(ccms_rca || {}).completed_on ? (\r\n                                <Col>\r\n                                    <Row>\r\n                                        <Col sm=\"12\">\r\n                                            {ccms_rca ? (\r\n                                                <RcaFindingsAndInvestigation\r\n                                                    ccms_rca={ccms_rca}\r\n                                                    ccms={ccms}\r\n                                                />\r\n                                            ) : null}\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row className=\"mt-2\">\r\n                                        <Col sm=\"12\">\r\n                                            {fni_list && fni_list.length ? (\r\n                                                <DynamicForm\r\n                                                    form_title=\"corrective_actions\"\r\n                                                    form_inputs={{\r\n                                                        select_ticket_number:\r\n                                                            \"\",\r\n                                                        text_description: \"\"\r\n                                                    }}\r\n                                                    display_list={ca_list}\r\n                                                    select_options={fni_list}\r\n                                                    labelKey=\"ticket_number\"\r\n                                                />\r\n                                            ) : (\r\n                                                <h4>No data found</h4>\r\n                                            )}\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            ) : null}\r\n                        </Row>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ccms_rca: state.ccms.ccms_rca,\r\n    ccms_rca_modal: state.ccms.ccms_rca_modal,\r\n    activeTab: state.ccms.activeTab,\r\n    fni_list: state.ccms.fni,\r\n    ca_list: state.ccms.ca\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    get_ccms_rca,\r\n    close_ccms_rca,\r\n    toggle_active_tab,\r\n    get_fni_list\r\n})(CcmsRcaModal);\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nimport CcmsModal from \"./Modals/CcmsModal\";\r\nimport CommentForm from \"./Comment/CommentForm\";\r\n\r\nimport CcmsRcaModal from \"./CcmsRca/CcmsRcaModal\";\r\n\r\nimport {\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Input,\r\n    Label,\r\n    FormGroup,\r\n    Button,\r\n    Spinner,\r\n    Collapse,\r\n    Card,\r\n    CardTitle,\r\n    ButtonGroup,\r\n    CustomInput\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\n\r\nimport {\r\n    get_business_unit,\r\n    update_ccms,\r\n    getComments,\r\n    get_ccms_rca\r\n} from \"../../../actions/ccmsActions\";\r\n\r\nclass CcmsForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // props.getComments(props.ccms_entry.id);\r\n\r\n        // this.state = { ...props.ccms_entry, isOpen: false };\r\n\r\n        const {\r\n            ticket_status,\r\n            ticket_type,\r\n            business_unit,\r\n            escalation_type,\r\n            accountable_team,\r\n            site_code,\r\n            escalated_ticket,\r\n            escalated_by,\r\n            escalated_email_address,\r\n            specific_business_unit,\r\n            escalated_name,\r\n            lan_id,\r\n            silo,\r\n            ccms_owner,\r\n            summary_complaint,\r\n            rca_required,\r\n            is_complaint\r\n        } = props.ccms_entry || {};\r\n\r\n        this.state = {\r\n            escalated_ticket,\r\n            ticket_type,\r\n            escalated_by,\r\n            escalated_email_address,\r\n            business_unit,\r\n            specific_business_unit,\r\n            ticket_status,\r\n            escalation_type,\r\n            accountable_team,\r\n            escalated_name,\r\n            lan_id,\r\n            silo,\r\n            site_code,\r\n            ccms_owner,\r\n            summary_complaint,\r\n            rca_required,\r\n            is_complaint,\r\n\r\n            isOpen: false,\r\n            updateButton: true,\r\n            collapse: false\r\n        };\r\n    }\r\n\r\n    handleChange = event => {\r\n        const target = event.target;\r\n        const value =\r\n            target.type === \"checkbox\" ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    // NOT BEING USED YET\r\n    // WILL USE IT FOR RCA FORM\r\n\r\n    handleClick = event => {\r\n        event.preventDefault();\r\n\r\n        const { value } = event.target;\r\n\r\n        // create trigger to open up ARE YOU SURE? modal\r\n\r\n        if (value === \"Compliment\") {\r\n            console.log(\"Trigger Compliment Request\");\r\n        } else if (value === \"\") console.log(\"Trigger Complaint Request\");\r\n    };\r\n\r\n    // Look for a way to make below dynamically\r\n\r\n    arrayElements = [\r\n        \"business_unit\",\r\n        \"escalation_type\",\r\n        \"accountable_team\",\r\n        \"site_code\",\r\n        \"ticket_status\",\r\n        \"ccms_owner\",\r\n        \"ticket_type\",\r\n        \"silo\"\r\n    ];\r\n\r\n    typeaheadProps = col => ({\r\n        bsSize: \"sm\",\r\n        labelKey:\r\n            col === \"ccms_owner\" ? option => `${option.user.email}` : \"name\",\r\n        onChange: selected => this.setState({ [col]: selected[0] }),\r\n        id: \"id_\" + col,\r\n        options: this.props[col],\r\n        selected: this.state[col] ? [this.state[col]] : [],\r\n        disabled: this.props.list_type ? true : false,\r\n        placeholder: \"Select...\",\r\n        selectHintOnEnter: true,\r\n        clearButton: true,\r\n        name: col\r\n    });\r\n\r\n    inputProps = col => ({\r\n        bsSize: \"sm\",\r\n        type: col == \"escalated_email_address\" ? \"email\" : \"text\",\r\n        name: col,\r\n        id: \"id_\" + col,\r\n        value: this.state[col],\r\n        onChange: this.handleChange,\r\n        disabled: this.props.list_type ? true : false\r\n    });\r\n\r\n    formContructor = key_list => {\r\n        return key_list.map((item, i) => (\r\n            <Row key={i} className=\"mb-2\">\r\n                {item.map((col, index) => {\r\n                    let x = col\r\n                        .split(\"_\")\r\n                        .map(\r\n                            item => item.charAt(0).toUpperCase() + item.slice(1)\r\n                        )\r\n                        .join(\" \");\r\n\r\n                    return (\r\n                        <Fragment key={index}>\r\n                            {this.arrayElements.includes(col) ? (\r\n                                <Col>\r\n                                    <Label for={\"id_\" + col}>{x}: </Label>\r\n                                    <Typeahead\r\n                                        {...this.typeaheadProps(col)}\r\n                                        inputProps={{ required: true }}\r\n                                    />\r\n                                </Col>\r\n                            ) : (\r\n                                <Col>\r\n                                    <Label for={\"id_\" + col}>{x}: </Label>\r\n\r\n                                    <Input\r\n                                        {...this.inputProps(col)}\r\n                                        required\r\n                                    ></Input>\r\n                                </Col>\r\n                            )}\r\n                        </Fragment>\r\n                    );\r\n                })}\r\n            </Row>\r\n        ));\r\n    };\r\n\r\n    // Converts 1 array to 3 or to any number of dimensional array\r\n\r\n    convertToTwoDim = key_list => {\r\n        let newArr = [];\r\n        while (key_list.length) newArr.push(key_list.splice(0, 3));\r\n\r\n        return newArr;\r\n    };\r\n\r\n    // AUTO SET OF CCMS STATUS WHEN SUBMITTED\r\n\r\n    updateStateThenSend = (id, value) => {\r\n        if (value == \"Complaint\") {\r\n            this.setState(\r\n                {\r\n                    is_complaint: true,\r\n                    ccms_status: {\r\n                        id: 1,\r\n                        name: \"Open - Assigned\"\r\n                    }\r\n                },\r\n                () => this.submitForm(this.state, id)\r\n            );\r\n        } else if (value == \"Compliment\") {\r\n            this.setState(\r\n                {\r\n                    is_complaint: false,\r\n                    ccms_status: {\r\n                        id: 10,\r\n                        name: \"Closed\"\r\n                    }\r\n                },\r\n                () => this.submitForm(this.state, id)\r\n            );\r\n        }\r\n    };\r\n\r\n    callbackFunction = childData => {\r\n        const { is_sending, value, ccms_entry_id } = childData;\r\n\r\n        if (is_sending == \"No\") {\r\n            return this.setState({\r\n                isOpen: false\r\n            });\r\n        }\r\n\r\n        if (is_sending == \"Yes\") {\r\n            this.updateStateThenSend(ccms_entry_id, value);\r\n        }\r\n    };\r\n\r\n    submitForm = (data, id) => {\r\n        console.log(this.props.ccms_entry);\r\n        this.props.update_ccms(\r\n            { ...data, cba_auth_user: this.props.cba_auth_user },\r\n            id,\r\n            this.props.ccms_entry\r\n        );\r\n    };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        this.setState({ isOpen: !this.state.isOpen });\r\n    };\r\n\r\n    toggleModalCallback = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    render() {\r\n        // excluding below array from formContructor\r\n\r\n        let toRemove = [\r\n            \"summary_complaint\",\r\n            \"rca_required\",\r\n            \"is_complaint\",\r\n            \"isOpen\",\r\n            \"id\",\r\n            \"mail\",\r\n            \"ccms_status\",\r\n            \"mail_age\",\r\n            \"acknowledged_by\",\r\n            \"is_acknowledged\",\r\n            \"is_resolved\",\r\n            \"date_acknowledged\",\r\n            \"updateButton\",\r\n            \"collapse\"\r\n        ];\r\n\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Col>\r\n                        <p\r\n                            style={{ cursor: \"pointer\" }}\r\n                            onClick={() =>\r\n                                this.setState({\r\n                                    collapse: !this.state.collapse\r\n                                })\r\n                            }\r\n                        >\r\n                            Show Mail details...\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Collapse isOpen={this.state.collapse}>\r\n                    <MailDetails mail={this.props.ccms_entry.mail} />\r\n                </Collapse>\r\n\r\n                <Row className=\"mb-2\">\r\n                    <Col>\r\n                        <Form autoComplete=\"off\" onSubmit={this.handleSubmit}>\r\n                            <FormGroup>\r\n                                {this.formContructor(\r\n                                    this.convertToTwoDim(\r\n                                        Object.keys(this.state).filter(\r\n                                            item => !toRemove.includes(item)\r\n                                        )\r\n                                    )\r\n                                )}\r\n\r\n                                <Label for=\"id_summary_complaint\">\r\n                                    Summary:{\" \"}\r\n                                </Label>\r\n                                <Input\r\n                                    type=\"textarea\"\r\n                                    rows=\"4\"\r\n                                    name=\"summary_complaint\"\r\n                                    id=\"id_summary_complaint\"\r\n                                    value={this.state.summary_complaint}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                    disabled={\r\n                                        this.props.list_type ? true : false\r\n                                    }\r\n                                />\r\n                            </FormGroup>\r\n\r\n                            <Row>\r\n                                {!this.props.list_type ? (\r\n                                    <Col>\r\n                                        <CcmsModal\r\n                                            isOpen={this.state.isOpen}\r\n                                            parentToggle={\r\n                                                this.toggleModalCallback\r\n                                            }\r\n                                            parentCallback={\r\n                                                this.callbackFunction\r\n                                            }\r\n                                            value={\r\n                                                this.state.is_complaint\r\n                                                    ? \"Complaint\"\r\n                                                    : \"Compliment\"\r\n                                            }\r\n                                            ccms_entry_id={\r\n                                                (this.props.ccms_entry || {}).id\r\n                                            }\r\n                                        />\r\n                                        {this.props.ccms_entry.ccms_status &&\r\n                                        this.state.updateButton ? (\r\n                                            <Button\r\n                                                name=\"is_complaint\"\r\n                                                onClick={e =>\r\n                                                    this.setState({\r\n                                                        updateButton: false\r\n                                                    })\r\n                                                }\r\n                                                color=\"success\"\r\n                                                className=\"mr-2\"\r\n                                            >\r\n                                                <i className=\"fas fa-pen mr-1\"></i>\r\n                                                Update\r\n                                            </Button>\r\n                                        ) : (\r\n                                            <Fragment>\r\n                                                <ButtonGroup>\r\n                                                    <Button\r\n                                                        type=\"submit\"\r\n                                                        name=\"is_compliment\"\r\n                                                        onClick={e =>\r\n                                                            this.setState({\r\n                                                                is_complaint: false\r\n                                                            })\r\n                                                        }\r\n                                                        color=\"success\"\r\n                                                        className=\"mr-1\"\r\n                                                    >\r\n                                                        <i className=\"fas fa-thumbs-up mr-1\"></i>\r\n                                                        Compliment\r\n                                                    </Button>\r\n                                                    <Button\r\n                                                        type=\"submit\"\r\n                                                        name=\"is_complaint\"\r\n                                                        onClick={e =>\r\n                                                            this.setState({\r\n                                                                [e.target\r\n                                                                    .name]: true\r\n                                                            })\r\n                                                        }\r\n                                                        color=\"danger\"\r\n                                                        className=\"mr-1\"\r\n                                                    >\r\n                                                        <i className=\"fas fa-thumbs-down mr-1\"></i>\r\n                                                        Complaint\r\n                                                    </Button>\r\n                                                    {this.props.ccms_entry\r\n                                                        .ccms_status ? (\r\n                                                        <Button\r\n                                                            name=\"is_complaint\"\r\n                                                            onClick={e =>\r\n                                                                this.setState({\r\n                                                                    updateButton: true\r\n                                                                })\r\n                                                            }\r\n                                                            color=\"warning\"\r\n                                                            className=\"mr-1\"\r\n                                                        >\r\n                                                            <i className=\"fas fa-ban mr-1\"></i>\r\n                                                            Cancel Update\r\n                                                        </Button>\r\n                                                    ) : null}\r\n                                                </ButtonGroup>\r\n                                            </Fragment>\r\n                                        )}\r\n                                    </Col>\r\n                                ) : null}\r\n                                <Col md={3} className=\"mt-1\">\r\n                                    {this.props.list_type &&\r\n                                    this.state.rca_required ? (\r\n                                        <CcmsRcaModal\r\n                                            ccms={this.props.ccms_entry}\r\n                                        />\r\n                                    ) : this.props.list_type &&\r\n                                      !this.state.rca_required ? (\r\n                                        <h5>RCA not required</h5>\r\n                                    ) : (\r\n                                        <CustomInput\r\n                                            type=\"checkbox\"\r\n                                            name=\"rca_required\"\r\n                                            id=\"id_rca_required\"\r\n                                            checked={this.state.rca_required}\r\n                                            onChange={this.handleChange}\r\n                                            disabled={\r\n                                                this.props.list_type\r\n                                                    ? true\r\n                                                    : false\r\n                                            }\r\n                                            label=\"RCA required?\"\r\n                                        />\r\n                                    )}\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.props.ccms_entry.ccms_status &&\r\n                this.props.ccms_entry.ccms_owner ? (\r\n                    this.props.is_fetching_comments ? (\r\n                        <Spinner />\r\n                    ) : (\r\n                        <CommentForm ccms_entry={this.props.ccms_entry} />\r\n                    )\r\n                ) : null}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst MailDetails = ({ mail }) => {\r\n    const spanStyle = { textDecoration: \"underline\" };\r\n    const rowMarginBottom = \"mb-1\";\r\n\r\n    let stringDate = new Date(mail.receivedDateTime).toString();\r\n\r\n    return (\r\n        <Fragment>\r\n            <Row className=\"mb-3\">\r\n                <Col>\r\n                    <Card body style={{ fontSize: \"14px\" }}>\r\n                        <CardTitle>\r\n                            <Row className={rowMarginBottom}>\r\n                                <Col>\r\n                                    Sender Name:{\" \"}\r\n                                    <span style={spanStyle}>\r\n                                        {mail.sender_name}\r\n                                    </span>\r\n                                </Col>\r\n                                <Col>\r\n                                    Sender Email:{\" \"}\r\n                                    <span style={spanStyle}>\r\n                                        {mail.sender_email_address}\r\n                                    </span>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className={rowMarginBottom}>\r\n                                <Col>\r\n                                    Subject:{\" \"}\r\n                                    <span style={spanStyle}>\r\n                                        {mail.email_subject}\r\n                                    </span>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className={rowMarginBottom}>\r\n                                <Col>\r\n                                    Received Data and Time:{\" \"}\r\n                                    <span style={spanStyle}>{stringDate}</span>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardTitle>\r\n                        <Row className={rowMarginBottom}>\r\n                            <Col>Email Body:</Col>\r\n                        </Row>\r\n                        <Row className={rowMarginBottom}>\r\n                            <Col>\r\n                                <div\r\n                                    dangerouslySetInnerHTML={{\r\n                                        __html: mail.email_body\r\n                                    }}\r\n                                ></div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    business_unit: state.ccms.business_unit,\r\n    ticket_status: state.ccms.ticket_status,\r\n    escalation_type: state.ccms.escalation_type,\r\n    accountable_team: state.ccms.accountable_team,\r\n    site_code: state.ccms.site_code,\r\n    ccms_owner: state.ccms.ccms_owner,\r\n    comments: state.ccms.comments,\r\n    silo: state.ccms.silo,\r\n    ticket_type: state.ccms.ticket_type,\r\n    is_fetching_comments: state.ccms.is_fetching_comments,\r\n    cba_auth_user: state.auth.user\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    get_business_unit,\r\n    update_ccms,\r\n    getComments,\r\n    get_ccms_rca\r\n})(CcmsForm);\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nimport CcmsForm from \"../CcmsForm\";\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form\r\n} from \"reactstrap\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    open_collapse,\r\n    close_modal,\r\n    toggle_modal,\r\n    get_selected_ccms_new\r\n} from \"../../../../actions/ccmsActions\";\r\n\r\nclass NewCcmsFormModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { isOpen: false };\r\n    }\r\n\r\n    // toggle = () => this.setState({ isOpen: !this.state.isOpen });\r\n    toggle = () => {\r\n        console.log(\"working\");\r\n        this.props.get_selected_ccms_new(this.props.ccms_entry);\r\n    };\r\n\r\n    checkStatus = data => {\r\n        if (data.ccms_owner) {\r\n            return {\r\n                color: this.props.ccms_entry.is_complaint ? \"dark\" : \"success\",\r\n                text: \"View Case\",\r\n                icon: this.props.ccms_entry.is_complaint\r\n                    ? \"fas fa-thumbs-down\"\r\n                    : \"fas fa-thumbs-up\"\r\n            };\r\n        } else {\r\n            return {\r\n                color: \"danger\",\r\n                text: \"Unassigned Case\",\r\n                icon: \"fas fa-exclamation\"\r\n            };\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let status = this.checkStatus(this.props.ccms_entry);\r\n        return (\r\n            <Fragment>\r\n                <Button color={status.color} onClick={this.toggle}>\r\n                    <i className={`${status.icon} mr-1`}></i>\r\n                    {status.text}\r\n                </Button>\r\n                <Form>\r\n                    <Modal\r\n                        style={{\r\n                            color: \"white\"\r\n                        }}\r\n                        isOpen={\r\n                            this.props.modal &&\r\n                            this.props.selected_ccms.id ==\r\n                                this.props.ccms_entry.id\r\n                        }\r\n                        toggle={this.props.close_modal}\r\n                        // size=\"lg\"\r\n                        className=\"modal-xl\"\r\n                    >\r\n                        <ModalHeader\r\n                            toggle={this.props.close_modal}\r\n                            style={{\r\n                                color: \"white\",\r\n                                border: \"1px solid white\",\r\n                                backgroundColor: this.props.ccms_entry\r\n                                    .is_complaint\r\n                                    ? \"red\"\r\n                                    : \"green\"\r\n                            }}\r\n                        >\r\n                            CCMS ID {this.props.ccms_entry.id}\r\n                        </ModalHeader>\r\n                        <ModalBody\r\n                            style={{\r\n                                backgroundColor: \"black\",\r\n                                border: \"1px solid white\"\r\n                            }}\r\n                        >\r\n                            <CcmsForm\r\n                                list_type={this.props.list_type}\r\n                                ccms_entry={this.props.selected_ccms}\r\n                            />\r\n                        </ModalBody>\r\n                    </Modal>\r\n                </Form>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    users_list: state.ccms.users_list,\r\n    modal: state.ccms.modal,\r\n    selected_ccms: state.ccms.selected_ccms\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    open_collapse,\r\n    close_modal,\r\n    toggle_modal,\r\n    get_selected_ccms_new\r\n})(NewCcmsFormModal);\r\n","import React, { Component } from \"react\";\r\nimport { Form, FormGroup, Label, Input, Button, Row, Col } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    remove_user_from_ccms_admin,\r\n    add_user_to_ccms_admin\r\n} from \"../../../../actions/ccmsActions\";\r\n\r\nclass CcmsAdminForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            users_list: [],\r\n            ccms_admin_list: [],\r\n            ccms_owner: []\r\n        };\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    handleRemove = () => {\r\n        this.props.remove_user_from_ccms_admin(this.state.ccms_admin_list);\r\n    };\r\n\r\n    handleAdd = () => {\r\n        this.props.add_user_to_ccms_admin(this.state.ccms_owner);\r\n    };\r\n\r\n    handleChange = e => {\r\n        const { name, selectedOptions } = e.target;\r\n        const { users_list, ccms_admin_list, ccms_owner } = this.props;\r\n\r\n        if (name == \"ccms_owner\") {\r\n            let selected = [...selectedOptions].map(\r\n                item =>\r\n                    ccms_owner.filter(item => !item.user.groups.includes(1))[\r\n                        item.value\r\n                    ]\r\n            );\r\n\r\n            this.setState(\r\n                {\r\n                    ccms_owner: selected\r\n                },\r\n                () => console.log(this.state)\r\n            );\r\n        } else if (name == \"ccms_admin_list\") {\r\n            this.setState(\r\n                {\r\n                    ccms_admin_list: [...selectedOptions].map(\r\n                        item => ccms_admin_list[item.value]\r\n                    )\r\n                },\r\n                () => console.log(this.state)\r\n            );\r\n        }\r\n    };\r\n\r\n    getListofNotCcmsAdmin = list =>\r\n        list.filter(user => !user.groups.includes(1));\r\n\r\n    render() {\r\n        const { ccms } = this.props;\r\n\r\n        const labelStyle = { color: \"white\" };\r\n        return (\r\n            <Row>\r\n                <Col className=\"mb-3\">\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Label\r\n                                        style={labelStyle}\r\n                                        for=\"id_users_list\"\r\n                                    >\r\n                                        CCMS Owner's List\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"ccms_owner\"\r\n                                        id=\"id_ccms_owner\"\r\n                                        size=\"7\"\r\n                                        onChange={this.handleChange}\r\n                                        // value={this.state.users_list}\r\n                                    >\r\n                                        {(ccms || {}).ccms_owner\r\n                                            .filter(\r\n                                                item =>\r\n                                                    !(\r\n                                                        (item.user || {})\r\n                                                            .groups || {}\r\n                                                    ).includes(1)\r\n                                            )\r\n                                            .map((item, index) => {\r\n                                                const {\r\n                                                    first_name,\r\n                                                    last_name,\r\n                                                    username\r\n                                                } = item.user;\r\n                                                return (\r\n                                                    <option\r\n                                                        key={item.id}\r\n                                                        value={index}\r\n                                                    >{`${first_name} ${last_name}`}</option>\r\n                                                );\r\n                                            })}\r\n                                    </Input>\r\n                                </Col>\r\n                                <Col md={1} className=\"my-auto\">\r\n                                    <Row>\r\n                                        <Col className=\"text-center\">\r\n                                            <i\r\n                                                onClick={this.handleAdd}\r\n                                                id=\"ccms-btn-right\"\r\n                                                className=\"fas fa-chevron-circle-right\"\r\n                                            ></i>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col className=\"text-center\">\r\n                                            <i\r\n                                                onClick={this.handleRemove}\r\n                                                id=\"ccms-btn-left\"\r\n                                                className=\"fas fa-minus-circle\"\r\n                                            ></i>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Label\r\n                                        style={labelStyle}\r\n                                        for=\"id_ccms_admin\"\r\n                                    >\r\n                                        CCMS Administrators\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"ccms_admin_list\"\r\n                                        id=\"id_ccms_admin_list\"\r\n                                        size=\"7\"\r\n                                        onChange={this.handleChange}\r\n                                    >\r\n                                        {(ccms || {}).ccms_admin_list.map(\r\n                                            (item, index) => {\r\n                                                const {\r\n                                                    first_name,\r\n                                                    last_name,\r\n                                                    username\r\n                                                } = item;\r\n                                                return (\r\n                                                    <option\r\n                                                        key={item.id}\r\n                                                        value={index}\r\n                                                    >{`${first_name} ${last_name}`}</option>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                    </Input>\r\n                                </Col>\r\n                            </Row>\r\n                        </FormGroup>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ccms: state.ccms,\r\n    ccms_admin_list: state.ccms.ccms_admin_list,\r\n    users_list: state.ccms.users_list,\r\n    ccms_owner: state.ccms.ccms_owner\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    remove_user_from_ccms_admin,\r\n    add_user_to_ccms_admin\r\n})(CcmsAdminForm);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Modal, ModalHeader, ModalBody, Button } from \"reactstrap\";\r\n\r\nimport CcmsAdminForm from \"./CcmsAdminForm\";\r\n\r\nclass CcmsAdminModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n    }\r\n\r\n    toggle = () => this.setState({ isOpen: !this.state.isOpen });\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Button onClick={this.toggle} color={this.props.color}>\r\n                    <i className=\"fas fa-user-shield mr-1\"></i>\r\n                    CCMS Admin\r\n                </Button>\r\n\r\n                <Modal\r\n                    isOpen={this.state.isOpen}\r\n                    toggle={this.toggle}\r\n                    size=\"lg\"\r\n                >\r\n                    <ModalHeader toggle={this.toggle}>CCMS Admin</ModalHeader>\r\n                    <ModalBody style={{ backgroundColor: \"black\" }}>\r\n                        <CcmsAdminForm />\r\n                    </ModalBody>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CcmsAdminModal;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Form, FormGroup, Label, Input, Button, Row, Col } from \"reactstrap\";\r\nimport { add_ccms_owner } from \"../../../../actions/ccmsActions\";\r\n\r\nclass CcmsAccessRequest extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            access_request: null\r\n        };\r\n    }\r\n\r\n    handleChange = e => {\r\n        const { access_request } = this.props;\r\n        const { value } = e.target;\r\n\r\n        console.log(access_request[value]);\r\n        this.setState({\r\n            access_request: access_request[value]\r\n        });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    // add user to ccms_owner list then remove remove by deleting it\r\n    handleClick = () => {\r\n        this.props.add_ccms_owner(this.state.access_request);\r\n    };\r\n\r\n    handleDeny = () => {\r\n        this.props.add_ccms_owner(this.state.access_request);\r\n    };\r\n\r\n    render() {\r\n        const labelStyle = { color: \"white\" };\r\n        const { access_request } = this.props;\r\n        return (\r\n            <Fragment>\r\n                <Form>\r\n                    <FormGroup>\r\n                        <Row>\r\n                            <Col>\r\n                                <Label style={labelStyle} for=\"id_users_list\">\r\n                                    Access Requests\r\n                                </Label>\r\n\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"access_request\"\r\n                                    id=\"id_access_request\"\r\n                                    size=\"7\"\r\n                                    onChange={this.handleChange}\r\n                                    // value={this.state.users_list}\r\n                                >\r\n                                    {access_request.map((item, index) => {\r\n                                        const { username } = item.user;\r\n                                        return (\r\n                                            <option key={item.id} value={index}>\r\n                                                {username}\r\n                                            </option>\r\n                                        );\r\n                                    })}\r\n                                </Input>\r\n                                <Button\r\n                                    onClick={this.handleClick}\r\n                                    className=\"mt-3\"\r\n                                    color=\"success\"\r\n                                >\r\n                                    Approve\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"mt-3 ml-2\"\r\n                                    color=\"danger\"\r\n                                    onClick={this.handleDeny}\r\n                                >\r\n                                    Deny\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    access_request: state.ccms.access_request\r\n});\r\n\r\nexport default connect(mapStateToProps, { add_ccms_owner })(CcmsAccessRequest);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Modal, ModalHeader, ModalBody, Badge, Button } from \"reactstrap\";\r\n\r\nimport CcmsAccessRequest from \"./CcmsAccessRequest\";\r\n\r\nclass CcmsAccessRequestModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n    }\r\n\r\n    toggle = () => this.setState({ isOpen: !this.state.isOpen });\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Button\r\n                    onClick={this.toggle}\r\n                    color={this.props.color}\r\n                    className=\"mr-1\"\r\n                >\r\n                    <Badge style={{ fontSize: \"10px\" }} color=\"danger\">\r\n                        {this.props.requestCount}\r\n                    </Badge>\r\n                    <span className=\"mx-1\">\r\n                        <i id=\"btn_ccms_admin\" className=\"fas fa-user-plus\"></i>\r\n                    </span>\r\n                    Access Request\r\n                </Button>\r\n                <Modal\r\n                    isOpen={this.state.isOpen}\r\n                    toggle={this.toggle}\r\n                    size=\"lg\"\r\n                >\r\n                    <ModalHeader toggle={this.toggle}>\r\n                        CCMS Access Requests\r\n                    </ModalHeader>\r\n                    <ModalBody style={{ backgroundColor: \"black\" }}>\r\n                        <CcmsAccessRequest />\r\n                    </ModalBody>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CcmsAccessRequestModal;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form\r\n} from \"reactstrap\";\r\n\r\nconst ConfirmModal = ({\r\n    open,\r\n    toggle,\r\n    parentCallback,\r\n    tableName,\r\n    input,\r\n    task\r\n}) => {\r\n    const sendConfirmation = e => {\r\n        const { value } = e.target;\r\n\r\n        parentCallback(value);\r\n        toggle();\r\n    };\r\n\r\n    const modalDetails = (taskParam, input, tableName) => {\r\n        if (taskParam == \"add\") {\r\n            return {\r\n                style: { backgroundColor: \"green\", color: \"black\" },\r\n                body: (\r\n                    <div>\r\n                        <p>\r\n                            Are you sure you want to add{\" \"}\r\n                            <strong>{input}</strong> to{\" \"}\r\n                            <strong>{tableName}</strong> table?\r\n                        </p>\r\n                    </div>\r\n                )\r\n            };\r\n        } else if (taskParam == \"edit\") {\r\n            return {\r\n                style: { backgroundColor: \"yellow\", color: \"black\" },\r\n                body: (\r\n                    <div>\r\n                        <p>\r\n                            Are you sure you want to change it to{\" \"}\r\n                            <strong>{input}</strong>?\r\n                        </p>\r\n                    </div>\r\n                )\r\n            };\r\n        } else if (taskParam == \"delete\") {\r\n            return {\r\n                style: { backgroundColor: \"red\", color: \"black\" },\r\n                body: (\r\n                    <div>\r\n                        <p>\r\n                            Are you sure you want to delete{\" \"}\r\n                            <strong>{input}</strong>?\r\n                        </p>\r\n                    </div>\r\n                )\r\n            };\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* <Button size=\"sm\" color=\"success\">\r\n                <i className=\"fas fa-plus\"></i>\r\n            </Button> */}\r\n\r\n            <Modal isOpen={open} toggle={e => sendConfirmation(e)}>\r\n                <ModalHeader\r\n                    style={modalDetails(task, input, tableName).style}\r\n                    toggle={e => sendConfirmation(e)}\r\n                >\r\n                    {tableName}\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    {task == \"add\" && (\r\n                        <div>\r\n                            <p>\r\n                                Are you sure you want to add{\" \"}\r\n                                <strong>{input}</strong> to{\" \"}\r\n                                <strong>{tableName}</strong> table?\r\n                            </p>\r\n                        </div>\r\n                    )}\r\n                    {task == \"edit\" && (\r\n                        <div>\r\n                            <p>\r\n                                Are you sure you want to change it to{\" \"}\r\n                                <strong>{input}</strong>?\r\n                            </p>\r\n                        </div>\r\n                    )}\r\n                    {task == \"delete\" && (\r\n                        <div>\r\n                            <p>\r\n                                Are you sure you want to delete{\" \"}\r\n                                <strong>{input}</strong>?\r\n                            </p>\r\n                        </div>\r\n                    )}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"success\"\r\n                        onClick={e => sendConfirmation(e)}\r\n                        value=\"Yes\"\r\n                    >\r\n                        Yes\r\n                    </Button>{\" \"}\r\n                    <Button color=\"danger\" onClick={e => sendConfirmation(e)}>\r\n                        No\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConfirmModal;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    add_cause_code,\r\n    edit_cause_code,\r\n    addEscalationDriver,\r\n    editEscalationDriver,\r\n    addEscalationDriverCause,\r\n    editEscalationDriverCause\r\n} from \"../../../../actions/ccmsActions\";\r\n\r\nimport { Form, Input, InputGroup, InputGroupAddon, Button } from \"reactstrap\";\r\nimport ConfirmModal from \"./ConfirmModal\";\r\n\r\nclass AddDriverForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: props.task == \"add\" ? \"\" : props.driverDetails.name,\r\n            isOpen: false\r\n        };\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const { isOpen } = this.state;\r\n\r\n        // Open Modal\r\n\r\n        this.setState({ isOpen: !isOpen });\r\n    };\r\n\r\n    handleModalToggle = () => {\r\n        this.setState({ isOpen: !this.state.isOpen, name: \"\" });\r\n    };\r\n\r\n    parentCallback = childData => {\r\n        const {\r\n            editEscalationDriverCause,\r\n            addEscalationDriverCause,\r\n            addEscalationDriver,\r\n            editEscalationDriver,\r\n            add_cause_code,\r\n            edit_cause_code,\r\n            tableName,\r\n            task,\r\n            cancelEdit,\r\n            driverDetails,\r\n            selectedCode\r\n        } = this.props;\r\n\r\n        const { name } = this.state;\r\n\r\n        if (childData == \"Yes\") {\r\n            // Send\r\n\r\n            switch (tableName) {\r\n                case \"Cause Code\":\r\n                    if (task == \"add\") {\r\n                        add_cause_code({ name });\r\n                        break;\r\n                    } else if (task == \"edit\") {\r\n                        edit_cause_code(driverDetails, { name });\r\n                        break;\r\n                    }\r\n\r\n                case \"Escalation Driver\":\r\n                    if (task == \"add\") {\r\n                        addEscalationDriver({\r\n                            name,\r\n                            cause_code: selectedCode.id\r\n                        });\r\n                        break;\r\n                    } else if (task == \"edit\") {\r\n                        editEscalationDriver(driverDetails, {\r\n                            name,\r\n                            cause_code: driverDetails.cause_code\r\n                        });\r\n                        break;\r\n                    }\r\n                case \"Escalation Driver Cause\":\r\n                    if (task == \"add\") {\r\n                        console.log(selectedCode);\r\n                        addEscalationDriverCause({\r\n                            name,\r\n                            escalation_driver: selectedCode.id\r\n                        });\r\n                        break;\r\n                    } else if (task == \"edit\") {\r\n                        editEscalationDriverCause(driverDetails, {\r\n                            name,\r\n                            escalation_driver: driverDetails.escalation_driver\r\n                        });\r\n                        break;\r\n                    }\r\n                // else if (task == \"edit\") {\r\n                //     edit_cause_code(driverDetails, { name });\r\n                //     break;\r\n                // }\r\n\r\n                default:\r\n                    break;\r\n            }\r\n            // if (task == \"add\" && tableName == \"Cause Code\") {\r\n            //     // ADD CAUSE CODE\r\n            // } else if (task == \"edit\") {\r\n            //     // EDIT\r\n\r\n            //     edit_cause_code(driverDetails, { name });\r\n            // }\r\n        }\r\n\r\n        cancelEdit();\r\n\r\n        this.setState({ name: \"\" });\r\n    };\r\n\r\n    handleChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    handleKeyDown = e => {\r\n        if (e.keyCode == 27) {\r\n            this.props.cancelEdit();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, name } = this.state;\r\n        const { tableName, task } = this.props;\r\n\r\n        return (\r\n            <Form autoComplete=\"off\" onSubmit={e => this.handleSubmit(e)}>\r\n                <Input\r\n                    bsSize=\"sm\"\r\n                    className=\"w-200\"\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    onKeyDown={e => this.handleKeyDown(e)}\r\n                    onChange={e => this.handleChange(e)}\r\n                    value={name}\r\n                    placeholder=\"Input here...\"\r\n                />\r\n\r\n                <ConfirmModal\r\n                    open={isOpen}\r\n                    toggle={this.handleModalToggle}\r\n                    parentCallback={this.parentCallback}\r\n                    tableName={tableName}\r\n                    input={name}\r\n                    task={task}\r\n                />\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, {\r\n    add_cause_code,\r\n    edit_cause_code,\r\n    addEscalationDriver,\r\n    editEscalationDriver,\r\n    addEscalationDriverCause,\r\n    editEscalationDriverCause\r\n})(AddDriverForm);\r\n","import React, { useState, Fragment } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { Fade, Row, Col, UncontrolledTooltip } from \"reactstrap\";\r\n\r\nimport AddDriverForm from \"./AddDriverForm\";\r\nimport {\r\n    delete_cause_code,\r\n    deleteEscalationDriver,\r\n    deleteEscalationDriverCause\r\n} from \"../../../../actions/ccmsActions\";\r\nimport ConfirmModal from \"./ConfirmModal\";\r\n\r\nconst DriverData = ({ driverDetails, color, tableName }) => {\r\n    const tdStyle = { cursor: \"pointer\" };\r\n    // const count = useSelector(state => state.counter.count);\r\n    const [options, setOptions] = useState(false);\r\n    const [edit, setEdit] = useState(false);\r\n    // Modal\r\n    const [isModalOpen, setModal] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const callbackCancelEdit = () => {\r\n        setEdit(false);\r\n    };\r\n\r\n    const handleModalToggle = () => {\r\n        setModal(!isModalOpen);\r\n    };\r\n\r\n    const parentCallback = childData => {\r\n        if (childData == \"Yes\") {\r\n            // Send\r\n            // if (task == \"delete\") {\r\n            //  DELETE\r\n            if (tableName == \"Cause Code\") {\r\n                dispatch(delete_cause_code(driverDetails));\r\n            } else if (tableName == \"Escalation Driver\") {\r\n                dispatch(deleteEscalationDriver(driverDetails));\r\n            } else if (tableName == \"Escalation Driver Cause\") {\r\n                dispatch(deleteEscalationDriverCause(driverDetails));\r\n            }\r\n            // }\r\n        }\r\n    };\r\n\r\n    const toolTip = {\r\n        hide: {\r\n            placement: \"top\",\r\n            text: \"Hide\",\r\n            target: \"id_hide\"\r\n        },\r\n        edit: {\r\n            placement: \"top\",\r\n            text: \"Edit\",\r\n            target: \"id_edit\"\r\n        },\r\n        delete: {\r\n            placement: \"top\",\r\n            text: \"Delete\",\r\n            target: \"id_delete\"\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ConfirmModal\r\n                open={isModalOpen}\r\n                toggle={handleModalToggle}\r\n                parentCallback={parentCallback}\r\n                tableName={tableName}\r\n                input={driverDetails.name}\r\n                task=\"delete\"\r\n            />\r\n            <div className=\"float-left\" style={{ ...tdStyle, color: color }}>\r\n                {edit ? (\r\n                    <AddDriverForm\r\n                        tableName={tableName}\r\n                        driverDetails={driverDetails}\r\n                        task=\"edit\"\r\n                        cancelEdit={callbackCancelEdit}\r\n                    />\r\n                ) : (\r\n                    driverDetails.name\r\n                )}\r\n            </div>\r\n            <div\r\n                className=\"float-right\"\r\n                style={{ ...tdStyle }}\r\n                onClick={() => setOptions(!options)}\r\n            >\r\n                {options || edit ? (\r\n                    <div style={{ fontSize: \"18px\" }}>\r\n                        {edit ? (\r\n                            <i\r\n                                onClick={() => setEdit(false)}\r\n                                style={{ color: \"red\" }}\r\n                                className=\"fas fa-ban\"\r\n                            ></i>\r\n                        ) : (\r\n                            <Fragment>\r\n                                <div\r\n                                    className=\"d-inline\"\r\n                                    onClick={() => setModal(true)}\r\n                                    style={{\r\n                                        marginRight: \"5px\",\r\n                                        color: \"red\"\r\n                                    }}\r\n                                >\r\n                                    {/* DELETE */}\r\n                                    <i\r\n                                        className=\"far fa-minus-square\"\r\n                                        id=\"id_delete\"\r\n                                    ></i>\r\n                                    <UncontrolledTooltip {...toolTip.delete}>\r\n                                        {toolTip.delete.text}\r\n                                    </UncontrolledTooltip>\r\n                                </div>\r\n                                <div\r\n                                    className=\"d-inline\"\r\n                                    onClick={() => setEdit(true)}\r\n                                    style={{\r\n                                        color: \"green\",\r\n                                        marginRight: \"5px\"\r\n                                    }}\r\n                                >\r\n                                    {/* EDIT */}\r\n                                    <i\r\n                                        className=\"fas fa-pencil-alt\"\r\n                                        id=\"id_edit\"\r\n                                        style={{ top: \"20px\" }}\r\n                                    ></i>\r\n                                    <UncontrolledTooltip {...toolTip.edit}>\r\n                                        {toolTip.edit.text}\r\n                                    </UncontrolledTooltip>\r\n                                </div>\r\n                                <div className=\"d-inline\">\r\n                                    <i\r\n                                        onClick={() => setOptions(!options)}\r\n                                        style={{ color: \"white\" }}\r\n                                        className=\"fas fa-angle-double-right\"\r\n                                        id=\"id_hide\"\r\n                                    ></i>\r\n                                    <UncontrolledTooltip {...toolTip.hide}>\r\n                                        {toolTip.hide.text}\r\n                                    </UncontrolledTooltip>\r\n                                </div>\r\n                            </Fragment>\r\n                        )}\r\n                    </div>\r\n                ) : (\r\n                    <Fragment>\r\n                        <i className=\"fas fa-ellipsis-h\"></i>\r\n                    </Fragment>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DriverData;\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    Table,\r\n    Row,\r\n    Col,\r\n    PopoverHeader,\r\n    PopoverBody,\r\n    UncontrolledPopover\r\n} from \"reactstrap\";\r\nimport AddDriverForm from \"./AddDriverForm\";\r\nimport DriverData from \"./DriverData\";\r\n\r\nclass DriverTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selected: \"\",\r\n            addOption: false\r\n        };\r\n    }\r\n\r\n    handleEditOptionClick = () => {\r\n        this.setState({\r\n            addOption: !this.state.addOption\r\n        });\r\n    };\r\n\r\n    // tableName, driverList, selectCallback\r\n\r\n    render() {\r\n        const {\r\n            tableName,\r\n            driverList,\r\n            selectCallback,\r\n            selectedCode\r\n        } = this.props;\r\n        const { addOption, selected } = this.state;\r\n\r\n        let newName = tableName.replace(/\\s/g, \"_\").toLowerCase();\r\n\r\n        let icon_id = \"id_\" + newName;\r\n\r\n        return (\r\n            <Table dark hover bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            <Row className=\"text-warning\">\r\n                                <Col className=\"d-flex justify-content-start\">\r\n                                    {tableName}\r\n                                </Col>\r\n                                <Col className=\"d-flex justify-content-end\">\r\n                                    <i\r\n                                        onClick={this.handleEditOptionClick}\r\n                                        style={{\r\n                                            cursor: \"pointer\"\r\n                                        }}\r\n                                        className=\"fas fa-plus-square\"\r\n                                        id={icon_id}\r\n                                    ></i>\r\n                                </Col>\r\n                                {/* {!addOption ? (\r\n                                    <Col className=\"d-flex justify-content-end\">\r\n                                        <i\r\n                                            onClick={this.handleEditOptionClick}\r\n                                            style={{\r\n                                                cursor: \"pointer\"\r\n                                            }}\r\n                                            className=\"fas fa-ellipsis-h\"\r\n                                            id=\"id_add\"\r\n                                        ></i>\r\n                                    </Col>\r\n                                ) : (\r\n                                    <Col className=\"d-flex justify-content-end\">\r\n                                        <i\r\n                                            onClick={this.handleEditOptionClick}\r\n                                            style={{\r\n                                                color: \"red\",\r\n                                                fontSize: \"20px\",\r\n                                                cursor: \"pointer\",\r\n                                                verticalAlign: \"middle\",\r\n                                                marginTop: \"5px\"\r\n                                            }}\r\n                                            className=\"fas fa-ban\"\r\n                                        ></i>\r\n                                    </Col>\r\n                                )} */}\r\n                            </Row>\r\n\r\n                            <UncontrolledPopover\r\n                                placement=\"left\"\r\n                                isOpen={addOption}\r\n                                target={icon_id}\r\n                                toggle={this.handleEditOptionClick}\r\n                                trigger=\"legacy\"\r\n                            >\r\n                                <PopoverHeader>Add {tableName}</PopoverHeader>\r\n                                <PopoverBody>\r\n                                    <AddDriverForm\r\n                                        tableName={tableName}\r\n                                        task=\"add\"\r\n                                        cancelEdit={this.handleEditOptionClick}\r\n                                        selectedCode={selectedCode}\r\n                                    />\r\n                                </PopoverBody>\r\n                            </UncontrolledPopover>\r\n                            {/* {addOption ? (\r\n                                <Row className=\"my-3\">\r\n                                    <Col sm={12}>\r\n                                        <AddDriverForm\r\n                                            tableName={tableName}\r\n                                            task=\"add\"\r\n                                            cancelEdit={\r\n                                                this.handleEditOptionClick\r\n                                            }\r\n                                            selectedCode={selectedCode}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : null} */}\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {driverList.map((code, index) => (\r\n                        <tr key={code.id}>\r\n                            <td\r\n                                onClick={() => {\r\n                                    this.setState({\r\n                                        selected: code\r\n                                    });\r\n                                    selectCallback(index, tableName);\r\n                                }}\r\n                            >\r\n                                <DriverData\r\n                                    tableName={tableName}\r\n                                    driverDetails={code}\r\n                                    color={\r\n                                        selected.id == code.id ? \"green\" : null\r\n                                    }\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ccms: state.ccms\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(DriverTable);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Row, Col } from \"reactstrap\";\r\n\r\nimport DriverTable from \"./DriverTable\";\r\n\r\nclass DriverForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selected: {\r\n                cause_code: \"\",\r\n                escalation_driver: \"\",\r\n                escalation_driver_cause: \"\"\r\n            }\r\n        };\r\n    }\r\n\r\n    handleSelect = (index, driver_type) => {\r\n        const {\r\n            cause_code,\r\n            escalation_driver,\r\n            escalation_driver_cause\r\n        } = this.props.ccms;\r\n\r\n        let selected = { ...this.state.selected };\r\n\r\n        if (driver_type == \"Cause Code\") {\r\n            selected.cause_code = cause_code[index];\r\n            selected.escalation_driver = \"\";\r\n            selected.escalation_driver_cause = \"\";\r\n        } else if (driver_type == \"Escalation Driver\") {\r\n            selected.escalation_driver = this.filteredDriverList(\r\n                escalation_driver,\r\n                selected.cause_code,\r\n                \"Escalation Driver\"\r\n            )[index];\r\n            selected.escalation_driver_cause = \"\";\r\n        } else if (driver_type == \"Escalation Driver Cause\") {\r\n            selected.escalation_driver_cause = this.filteredDriverList(\r\n                escalation_driver_cause,\r\n                selected.escalation_driver,\r\n                \"Escalation Driver Cause\"\r\n            )[index];\r\n        }\r\n\r\n        this.setState({\r\n            selected\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n\r\n        const {\r\n            cause_code,\r\n            escalation_driver,\r\n            escalation_driver_cause\r\n        } = this.props.ccms;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    {cause_code ? (\r\n                        <Col>\r\n                            <DriverTable\r\n                                tableName=\"Cause Code\"\r\n                                driverList={cause_code}\r\n                                selectCallback={this.handleSelect}\r\n                            />\r\n                        </Col>\r\n                    ) : null}\r\n                    {selected.cause_code ? (\r\n                        <Col>\r\n                            <DriverTable\r\n                                tableName=\"Escalation Driver\"\r\n                                driverList={this.filteredDriverList(\r\n                                    escalation_driver,\r\n                                    selected.cause_code,\r\n                                    \"Escalation Driver\"\r\n                                )}\r\n                                selectCallback={this.handleSelect}\r\n                                selectedCode={selected.cause_code}\r\n                            />\r\n                        </Col>\r\n                    ) : null}\r\n                    {selected.escalation_driver ? (\r\n                        <Col>\r\n                            <DriverTable\r\n                                tableName=\"Escalation Driver Cause\"\r\n                                driverList={this.filteredDriverList(\r\n                                    escalation_driver_cause,\r\n                                    selected.escalation_driver,\r\n                                    \"Escalation Driver Cause\"\r\n                                )}\r\n                                selectCallback={this.handleSelect}\r\n                                selectedCode={selected.escalation_driver}\r\n                            />\r\n                        </Col>\r\n                    ) : null}\r\n                </Row>\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    filteredDriverList = (driverName, selectedData, tableName) => {\r\n        return driverName.filter(item => {\r\n            if (tableName == \"Escalation Driver Cause\") {\r\n                return item.escalation_driver == selectedData.id;\r\n            } else if (tableName == \"Escalation Driver\") {\r\n                return item.cause_code == selectedData.id;\r\n            }\r\n        });\r\n    };\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ccms: state.ccms\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(DriverForm);\r\n","import React from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody } from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    get_selected_ccms,\r\n    remove_selected_ccms\r\n} from \"../../../../actions/ccmsActions\";\r\n\r\nconst DynamicFormModal = ({\r\n    parentCallback,\r\n    modal,\r\n    formattedFormTitle,\r\n    form_inputs,\r\n    toggleModal,\r\n    ComponentForm: ComponentForm,\r\n    form_title,\r\n    select_options,\r\n    labelKey,\r\n    size,\r\n    ccms_entry\r\n}) => {\r\n    const selected_ccms = useSelector(state => state.ccms.selected_ccms);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div>\r\n            <Button\r\n                color=\"danger\"\r\n                onClick={() => {\r\n                    dispatch(get_selected_ccms(ccms_entry));\r\n                    toggleModal();\r\n                }}\r\n            >\r\n                {formattedFormTitle}\r\n            </Button>\r\n            {selected_ccms ? (\r\n                <Modal\r\n                    isOpen={modal && selected_ccms.id === ccms_entry.id}\r\n                    toggle={() => {\r\n                        dispatch(remove_selected_ccms());\r\n                        toggleModal();\r\n                    }}\r\n                    size={size}\r\n                >\r\n                    <ModalHeader\r\n                        toggle={() => {\r\n                            dispatch(remove_selected_ccms());\r\n                            toggleModal();\r\n                        }}\r\n                    >\r\n                        {formattedFormTitle}\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <ComponentForm\r\n                            form_title={form_title}\r\n                            form_inputs={form_inputs}\r\n                            select_options={select_options}\r\n                            labelKey={labelKey}\r\n                            ccms_entry={ccms_entry}\r\n                        />\r\n                    </ModalBody>\r\n                </Modal>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DynamicFormModal;\r\n","import React, { useState, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    ButtonDropdown\r\n} from \"reactstrap\";\r\n\r\nconst DataTableDropdownButton = ({\r\n    dataList,\r\n    color,\r\n    selectionCallback,\r\n    toggleCollapse\r\n}) => {\r\n    const [dropdownOpen, setdropdownOpen] = useState(false);\r\n\r\n    const toggle = () => setdropdownOpen(!dropdownOpen);\r\n\r\n    // const handleSelection = item => {\r\n    //     selectionCallback();\r\n    // };\r\n\r\n    return (\r\n        <Fragment>\r\n            <ButtonDropdown\r\n                isOpen={dropdownOpen}\r\n                toggle={toggle}\r\n                className=\"mr-1\"\r\n            >\r\n                <DropdownToggle color={color} caret>\r\n                    <i className=\"fas fa-list mr-1\"></i>Data Table List\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    {dataList.map((item, index) => (\r\n                        <DropdownItem\r\n                            key={index}\r\n                            onClick={() => {\r\n                                selectionCallback(item);\r\n                            }}\r\n                            value\r\n                        >\r\n                            {item.name}\r\n                        </DropdownItem>\r\n                    ))}\r\n                </DropdownMenu>\r\n            </ButtonDropdown>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nDataTableDropdownButton.propTypes = {};\r\n\r\nexport default DataTableDropdownButton;\r\n","import React, { useState, Fragment } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    Form,\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Input,\r\n    FormGroup,\r\n    Label,\r\n    Col,\r\n    Collapse,\r\n    Row,\r\n    ButtonGroup\r\n} from \"reactstrap\";\r\n\r\nimport { GeneralRequest } from \"../../../../actions/ccmsActions\";\r\nimport {\r\n    ADD_BUSINESS_UNIT,\r\n    DELETE_BUSINESS_UNIT,\r\n    EDIT_BUSINESS_UNIT\r\n} from \"../../../../actions/types\";\r\n\r\nconst GeneralDataConfirmModal = props => {\r\n    const { buttonLabel, className, data, table, color } = props;\r\n\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const toggle = () => setModal(!modal);\r\n\r\n    const properties = (buttonLabel, selectedData, toggle) => {\r\n        let dispatchType =\r\n            buttonLabel.toUpperCase() + \"_\" + table.endpoint.toUpperCase();\r\n\r\n        switch (buttonLabel) {\r\n            case \"Delete\":\r\n                return {\r\n                    bgColor: \"bg-danger\",\r\n                    content: (\r\n                        <DeleteContent\r\n                            buttonLabel={buttonLabel}\r\n                            selectedData={selectedData}\r\n                            textColor=\"text-danger\"\r\n                            toggle={toggle}\r\n                            table={table}\r\n                            dispatchType={dispatchType}\r\n                        />\r\n                    )\r\n                };\r\n            case \"Edit\":\r\n                return {\r\n                    bgColor: \"bg-warning\",\r\n                    content: (\r\n                        <EditContent\r\n                            buttonLabel={buttonLabel}\r\n                            selectedData={selectedData}\r\n                            textColor=\"text-warning\"\r\n                            toggle={toggle}\r\n                            table={table}\r\n                            dispatchType={dispatchType}\r\n                        />\r\n                    )\r\n                };\r\n            case \"Add\":\r\n                return {\r\n                    bgColor: \"bg-success\",\r\n                    content: (\r\n                        <AddContent\r\n                            buttonLabel={buttonLabel}\r\n                            selectedDataName={\r\n                                selectedData ? selectedData.name : \"\"\r\n                            }\r\n                            textColor=\"text-success\"\r\n                            table={table}\r\n                            toggle={toggle}\r\n                            dispatchType={dispatchType}\r\n                        />\r\n                    )\r\n                };\r\n\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Button color={color} onClick={toggle} className=\"mr-1\">\r\n                {buttonLabel.includes(\"Add\")\r\n                    ? `${buttonLabel} ${table.name}`\r\n                    : `${buttonLabel}`}\r\n            </Button>\r\n            <Modal\r\n                size=\"lg\"\r\n                isOpen={modal}\r\n                toggle={toggle}\r\n                className={className}\r\n            >\r\n                <ModalHeader\r\n                    toggle={toggle}\r\n                    className={properties(buttonLabel).bgColor}\r\n                >\r\n                    {buttonLabel.includes(\"Add\")\r\n                        ? `${buttonLabel} data to ${table.name} Table`\r\n                        : `${buttonLabel} ${data.name} from ${table.name} Table`}\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    {properties(buttonLabel, data, toggle).content}\r\n                </ModalBody>\r\n            </Modal>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n// endpoint, data, dispatchType\r\n\r\nconst AddContent = ({\r\n    buttonLabel,\r\n    selectedDataName,\r\n    textColor,\r\n    toggle,\r\n    table,\r\n    dispatchType\r\n}) => {\r\n    const initialInputState = { name: selectedDataName };\r\n    const [eachEntry, setEachEntry] = useState(initialInputState);\r\n\r\n    const { name } = eachEntry;\r\n\r\n    // REDUX\r\n\r\n    const handleChange = e => {\r\n        // console.log({ ...eachEntry }); // state\r\n        setEachEntry({ ...eachEntry, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        console.log(eachEntry, \"Submit Working\");\r\n        dispatchRedux(reduxAction.addData());\r\n        toggle();\r\n    };\r\n\r\n    const reduxAction = new GeneralRequest(\r\n        table.endpoint,\r\n        eachEntry,\r\n        dispatchType\r\n    );\r\n    const dispatchRedux = useDispatch();\r\n\r\n    return (\r\n        <div className=\"mb-3\">\r\n            <Form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                <FormGroup>\r\n                    <Label for=\"id_general_data\">{table.name} Name:</Label>\r\n\r\n                    <Input\r\n                        type=\"text\"\r\n                        id=\"id_general_data\"\r\n                        onChange={handleChange}\r\n                        value={name}\r\n                        name=\"name\"\r\n                        required\r\n                    />\r\n                </FormGroup>\r\n                <Button color=\"primary\">Submit</Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\n// DELETE_BUSINESS_UNIT\r\n\r\nconst DeleteContent = ({\r\n    buttonLabel,\r\n    selectedData,\r\n    textColor,\r\n    toggle,\r\n    table,\r\n    dispatchType\r\n}) => {\r\n    const reduxAction = new GeneralRequest(\r\n        table.endpoint,\r\n        selectedData,\r\n        dispatchType\r\n    );\r\n    const dispatchRedux = useDispatch();\r\n\r\n    const handleDelete = () => {\r\n        dispatchRedux(reduxAction.deleteData());\r\n        toggle();\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <p>\r\n                Are you sure you want to{\" \"}\r\n                <span className={textColor}>{buttonLabel}</span>{\" \"}\r\n                {selectedData.name}?\r\n            </p>\r\n            <ButtonGroup>\r\n                <Button className=\"mr-1\" color=\"primary\" onClick={handleDelete}>\r\n                    Yes\r\n                </Button>\r\n                <Button color=\"secondary\" onClick={toggle}>\r\n                    No\r\n                </Button>\r\n            </ButtonGroup>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst EditContent = ({\r\n    buttonLabel,\r\n    selectedData,\r\n    textColor,\r\n    toggle,\r\n    table,\r\n    dispatchType\r\n}) => {\r\n    const initialInputState = { name: selectedData.name };\r\n    const [eachEntry, setEachEntry] = useState(initialInputState);\r\n\r\n    const { name } = eachEntry;\r\n\r\n    const handleChange = e => {\r\n        console.log({ ...eachEntry }); // state\r\n        setEachEntry({ ...eachEntry, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        console.log(eachEntry, \"Submit Working\");\r\n        dispatchRedux(reduxAction.editData());\r\n        toggle();\r\n    };\r\n\r\n    const reduxAction = new GeneralRequest(\r\n        table.endpoint,\r\n        { id: selectedData.id, ...eachEntry },\r\n        dispatchType\r\n    );\r\n    const dispatchRedux = useDispatch();\r\n\r\n    const [isCollapseOpen, setCollapse] = useState(false);\r\n    const toggleCollapse = () => setCollapse(!isCollapseOpen);\r\n\r\n    return (\r\n        <div className=\"mb-3\">\r\n            <Collapse isOpen={!isCollapseOpen}>\r\n                <Row>\r\n                    <Col>\r\n                        <p>\r\n                            Are you sure you want to{\" \"}\r\n                            <span className={textColor}>{buttonLabel}</span>{\" \"}\r\n                            {selectedData.name}?\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <ButtonGroup>\r\n                            <Button\r\n                                className=\"mr-1\"\r\n                                color=\"primary\"\r\n                                onClick={toggleCollapse}\r\n                            >\r\n                                Yes\r\n                            </Button>\r\n                            <Button\r\n                                className=\"mr-1\"\r\n                                color=\"secondary\"\r\n                                onClick={toggle}\r\n                            >\r\n                                No\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Col>\r\n                </Row>\r\n            </Collapse>\r\n            <Collapse isOpen={isCollapseOpen}>\r\n                <Form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <FormGroup>\r\n                        <Label for=\"id_general_data\">Name:</Label>\r\n\r\n                        <Input\r\n                            type=\"text\"\r\n                            id=\"id_general_data\"\r\n                            onChange={handleChange}\r\n                            value={name}\r\n                            name=\"name\"\r\n                            required\r\n                        />\r\n                    </FormGroup>\r\n                    <ButtonGroup>\r\n                        <Button className=\"mr-1\" color=\"primary\">\r\n                            Submit\r\n                        </Button>\r\n                        <Button\r\n                            className=\"mr-1\"\r\n                            color=\"secondary\"\r\n                            onClick={toggle}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Form>\r\n            </Collapse>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneralDataConfirmModal;\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\n\r\nimport { Button, Row, Col, ButtonGroup, Form, Input } from \"reactstrap\";\r\n\r\nimport GeneralDataConfirmModal from \"../Modals/GeneralDataConfirmModal\";\r\n\r\n// Needed PROPS\r\n// data\r\n// data name\r\n\r\nclass GeneralDataTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filterOn: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.data);\r\n\r\n        // const table = { name: \"Business Unit\", endpoint: \"business_unit\" };\r\n\r\n        const { table } = this.props;\r\n        let columns =\r\n            table.data.length &&\r\n            Object.keys(table.data[0]).map(item => ({\r\n                Header: item.charAt(0).toUpperCase() + item.slice(1),\r\n                accessor: item,\r\n                show: !item.includes(\"id\"),\r\n                filterable: item.includes(\"name\") && this.state.filterOn\r\n            }));\r\n\r\n        let buttons = [\r\n            {\r\n                Header: \"Actions\",\r\n                Cell: cellprops => (\r\n                    <ButtonGroup>\r\n                        <GeneralDataConfirmModal\r\n                            buttonLabel=\"Delete\"\r\n                            data={cellprops.original}\r\n                            table={table}\r\n                            color=\"danger\"\r\n                        />\r\n\r\n                        <GeneralDataConfirmModal\r\n                            buttonLabel=\"Edit\"\r\n                            data={cellprops.original}\r\n                            table={table}\r\n                            color=\"warning\"\r\n                        />\r\n                    </ButtonGroup>\r\n                )\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <Fragment>\r\n                {/* ADD DATA */}\r\n                <ButtonGroup className=\"mb-2\">\r\n                    <GeneralDataConfirmModal\r\n                        buttonLabel=\"Add\"\r\n                        table={table}\r\n                        color=\"primary\"\r\n                    />\r\n                    {/* NEED TO ADD SEARCH */}\r\n                    <Button\r\n                        onClick={() =>\r\n                            this.setState({ filterOn: !this.state.filterOn })\r\n                        }\r\n                    >\r\n                        Filter Name\r\n                    </Button>\r\n                </ButtonGroup>\r\n\r\n                <ReactTable\r\n                    className=\"-striped -highlight\"\r\n                    style={{ backgroundColor: \"white\" }}\r\n                    data={table.data}\r\n                    columns={[...columns, ...buttons]}\r\n                    minRows={table.data.length + 1}\r\n                    defaultPageSize={table.data.length + 1}\r\n                    showPagination={false}\r\n                />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GeneralDataTable;\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    Button,\r\n    Container,\r\n    Collapse,\r\n    ButtonGroup\r\n} from \"reactstrap\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { columns } from \"./columns\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NewCcmsFormModal from \"../Modals/NewCcmsFormModal\";\r\nimport CcmsAdminModal from \"../CcmsAdmin/CcmsAdminModal\";\r\nimport CcmsAccessRequestModal from \"../CcmsAccessRequest/CcmsAccessRequestModal\";\r\nimport DriverForm from \"../Drivers/DriversForm\";\r\nimport CcmsRcaModal from \"../CcmsRca/CcmsRcaModal\";\r\nimport DynamicFormModal from \"../Modals/DynamicFormModal\";\r\nimport DynamicForm from \"../Forms/DynamicForm\";\r\nimport DataTableDropdownButton from \"../Tables/DataTableDropdownButton\";\r\nimport GeneralDataTable from \"./GeneralDataTable\";\r\n\r\nimport { search_ccms, set_table_page } from \"../../../../actions/ccmsActions\";\r\n\r\nclass CcmsTable2 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            collapseDrivers: false,\r\n            isModalOpen: false,\r\n            collapseGeneralTable: false,\r\n            table: null,\r\n            search: props.search,\r\n            page: props.page\r\n        };\r\n    }\r\n\r\n    toggleModal = () => this.setState({ isModalOpen: !this.state.isModalOpen });\r\n\r\n    buttonOptions = title => {\r\n        if (title) {\r\n            return [\r\n                {\r\n                    Header: \"Open CCMS Case\",\r\n                    Cell: cellprops => {\r\n                        return (\r\n                            <NewCcmsFormModal\r\n                                ccms_entry={cellprops.original}\r\n                                list_type={this.props.title}\r\n                            />\r\n                        );\r\n                    }\r\n                },\r\n                {\r\n                    Header: \"Reassign Case\",\r\n                    Cell: cellprops => (\r\n                        <DynamicFormModal\r\n                            modal={this.state.isModalOpen}\r\n                            form_inputs={{\r\n                                select_ccms_owner: \"\"\r\n                            }}\r\n                            formattedFormTitle=\"Change Owner\"\r\n                            form_title=\"change_owner\"\r\n                            toggleModal={this.toggleModal}\r\n                            ComponentForm={DynamicForm}\r\n                            select_options={this.props.ccms.ccms_owner}\r\n                            labelKey={option => `${option.user.email}`}\r\n                            size=\"lg\"\r\n                            ccms_entry={cellprops.original}\r\n                        />\r\n                    )\r\n                }\r\n            ];\r\n        } else {\r\n            return [\r\n                {\r\n                    Header: \"Update CCMS Case\",\r\n                    Cell: cellprops => (\r\n                        <NewCcmsFormModal\r\n                            ccms_entry={cellprops.original}\r\n                            list_type={this.props.title}\r\n                        />\r\n                    )\r\n                },\r\n                {\r\n                    Header: \"Review Case\",\r\n                    Cell: cellprops =>\r\n                        cellprops.original.rca_required ? (\r\n                            <CcmsRcaModal ccms={cellprops.original} />\r\n                        ) : (\r\n                            \"RCA not required\"\r\n                        )\r\n                }\r\n            ];\r\n        }\r\n    };\r\n\r\n    handleSearch = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n\r\n        let kw = e.target.value;\r\n        this.props.search_ccms(kw);\r\n    };\r\n\r\n    handlePageChange = data => {\r\n        this.setState({\r\n            page: data\r\n        });\r\n\r\n        this.props.set_table_page(data);\r\n    };\r\n\r\n    handlecollapseDrivers = () =>\r\n        this.setState({\r\n            collapseDrivers: !this.state.collapseDrivers\r\n        });\r\n\r\n    // HANDLERS FOR DATA TABLE LIST\r\n    tableSelectionCallback = childData => {\r\n        // close collapse > remove data table > update data table > open collapse\r\n        this.closeCollapse().then(res =>\r\n            this.removeDataTable().then(res =>\r\n                this.updateTable(childData).then(res =>\r\n                    this.setState({ collapseGeneralTable: true })\r\n                )\r\n            )\r\n        );\r\n    };\r\n\r\n    async closeCollapse() {\r\n        this.setState({ collapseGeneralTable: false });\r\n    }\r\n\r\n    async removeDataTable() {\r\n        this.setState({\r\n            table: null\r\n        });\r\n    }\r\n\r\n    async updateTable(childData) {\r\n        this.closeCollapse().then(res =>\r\n            this.setState({\r\n                table: childData\r\n            })\r\n        );\r\n    }\r\n\r\n    handlecollapseGeneralTable = () =>\r\n        this.setState({\r\n            collapseGeneralTable: false\r\n        });\r\n\r\n    render() {\r\n        const btnColor = \"primary\";\r\n\r\n        const {\r\n            table,\r\n            collapseGeneralTable,\r\n            collapseDrivers,\r\n            search\r\n        } = this.state;\r\n\r\n        const { ccms } = this.props;\r\n\r\n        const dataList = [\r\n            {\r\n                name: \"SILO\",\r\n                endpoint: \"silo\"\r\n            },\r\n            {\r\n                name: \"CCMS Status\",\r\n                endpoint: \"ccms_status\"\r\n            },\r\n            {\r\n                name: \"Site Code\",\r\n                endpoint: \"site_code\"\r\n            },\r\n            {\r\n                name: \"Accountable Team\",\r\n                endpoint: \"accountable_team\"\r\n            },\r\n            {\r\n                name: \"Ticket Type\",\r\n                endpoint: \"ticket_type\"\r\n            },\r\n            {\r\n                name: \"Escalation Type\",\r\n                endpoint: \"escalation_type\"\r\n            },\r\n            {\r\n                name: \"Business Unit\",\r\n                endpoint: \"business_unit\"\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <Fragment>\r\n                {ccms && table ? (\r\n                    <Collapse isOpen={collapseGeneralTable} className=\"mb-3\">\r\n                        <Card>\r\n                            <CardHeader>\r\n                                <Row>\r\n                                    <Col className=\"d-flex justify-content-start\">\r\n                                        <h5>{table.name} Data Table</h5>\r\n                                    </Col>\r\n                                    <Col className=\"d-flex justify-content-end\">\r\n                                        <i\r\n                                            onClick={\r\n                                                this.handlecollapseGeneralTable\r\n                                            }\r\n                                            style={{ cursor: \"pointer\" }}\r\n                                            className=\"fas fa-times mt-1\"\r\n                                        ></i>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardHeader>\r\n                            <CardBody>\r\n                                {/* FOR ADDING DATA TABLE >> UPDATE dataList >> UPDATE action/type.js >> UPDATE ccmsReducer */}\r\n                                <Container>\r\n                                    <GeneralDataTable\r\n                                        table={{\r\n                                            ...table,\r\n                                            data: this.props.ccms[\r\n                                                table.endpoint\r\n                                            ]\r\n                                        }}\r\n                                    />\r\n                                </Container>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Collapse>\r\n                ) : null}\r\n\r\n                <Collapse isOpen={collapseDrivers} className=\"mb-3\">\r\n                    <Card>\r\n                        <CardHeader>\r\n                            <Row>\r\n                                <Col className=\"d-flex justify-content-start\">\r\n                                    Drivers\r\n                                </Col>\r\n                                <Col className=\"d-flex justify-content-end\">\r\n                                    <i\r\n                                        onClick={this.handlecollapseDrivers}\r\n                                        style={{ cursor: \"pointer\" }}\r\n                                        className=\"fas fa-times mt-1\"\r\n                                    ></i>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            <DriverForm />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Collapse>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <h2>\r\n                            {!this.props.title\r\n                                ? \"CCMS CCA VIEW - Assigning Escalation\"\r\n                                : this.props.title}\r\n                        </h2>\r\n                    </CardHeader>\r\n                    <CardBody\r\n                        style={{ backgroundColor: \"rgb(169,169,169,0.5)\" }}\r\n                    >\r\n                        <Row className=\"mb-3\">\r\n                            <Col md={3}>\r\n                                <Form autoComplete=\"off\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"search\"\r\n                                        placeholder=\"Search\"\r\n                                        onChange={this.handleSearch}\r\n                                        value={this.state.search}\r\n                                    />\r\n                                </Form>\r\n                            </Col>\r\n\r\n                            {!this.props.title ? (\r\n                                <Col style={{ textAlign: \"right\" }}>\r\n                                    <ButtonGroup>\r\n                                        <DataTableDropdownButton\r\n                                            dataList={dataList}\r\n                                            color={btnColor}\r\n                                            selectionCallback={\r\n                                                this.tableSelectionCallback\r\n                                            }\r\n                                            toggleCollapse={\r\n                                                this.handlecollapseGeneralTable\r\n                                            }\r\n                                        />\r\n                                        {this.props.access_request &&\r\n                                        this.props.access_request.length !=\r\n                                            0 ? (\r\n                                            <CcmsAccessRequestModal\r\n                                                requestCount={\r\n                                                    this.props.access_request\r\n                                                        .length\r\n                                                }\r\n                                                color={btnColor}\r\n                                            />\r\n                                        ) : null}\r\n                                        <Button\r\n                                            onClick={this.handlecollapseDrivers}\r\n                                            color={btnColor}\r\n                                            className=\"mr-1\"\r\n                                        >\r\n                                            <span className=\"mr-1\">\r\n                                                <i className=\"fas fa-table\"></i>\r\n                                            </span>\r\n                                            Drivers\r\n                                        </Button>\r\n\r\n                                        <a href=\"https://10.235.83.26/control\">\r\n                                            <Button\r\n                                                onClick={() =>\r\n                                                    console.log(\r\n                                                        \"got to control page\"\r\n                                                    )\r\n                                                }\r\n                                                color={btnColor}\r\n                                                className=\"mr-1\"\r\n                                            >\r\n                                                <span className=\"mr-1\">\r\n                                                    <i className=\"fas fa-table\"></i>\r\n                                                </span>\r\n                                                Mailbox Monitor\r\n                                            </Button>\r\n                                        </a>\r\n\r\n                                        <CcmsAdminModal color={btnColor} />\r\n                                    </ButtonGroup>\r\n                                </Col>\r\n                            ) : null}\r\n                        </Row>\r\n                        <ReactTable\r\n                            className=\"-striped -highlight\"\r\n                            style={{ backgroundColor: \"white\" }}\r\n                            data={\r\n                                search\r\n                                    ? this.props.filtered_ccms_list\r\n                                    : this.props.data\r\n                            }\r\n                            columns={[\r\n                                ...columns,\r\n                                ...this.buttonOptions(this.props.title)\r\n                            ]}\r\n                            minRows={5}\r\n                            defaultPageSize={10}\r\n                            onPageChange={page => this.handlePageChange(page)}\r\n                            page={this.state.page}\r\n                        />\r\n                    </CardBody>\r\n                </Card>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    business_unit: state.ccms.business_unit,\r\n    comments: state.ccms.comments,\r\n    filtered_ccms_list: state.ccms.filtered_ccms_list,\r\n    search: state.ccms.search,\r\n    page: state.ccms.page,\r\n    ccms: state.ccms,\r\n    access_request: state.ccms.access_request\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    search_ccms,\r\n    set_table_page\r\n})(CcmsTable2);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    get_ccms_list,\r\n    isFetching,\r\n    getSurveys,\r\n    ack_entry,\r\n    getComments,\r\n    get_business_unit,\r\n    get_ticket_status,\r\n    get_escalation_type,\r\n    get_accountable_team,\r\n    get_site_code,\r\n    get_ccms_owner,\r\n    get_ccms_status,\r\n    get_silo,\r\n    get_ticket_type,\r\n    get_ccms_admin_list,\r\n    get_users_list,\r\n    get_all_data\r\n} from \"../../../actions/ccmsActions\";\r\n\r\nimport { Spinner, Container, Row, Col } from \"reactstrap\";\r\n\r\nimport CcmsTable2 from \"./Tables/CcmsTable2\";\r\n\r\nclass Ccms extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        props.get_all_data();\r\n\r\n        this.state = {\r\n            user_details: this.props.auth.user\r\n        };\r\n    }\r\n\r\n    handleClick = childData => {\r\n        const { user } = this.props.auth;\r\n\r\n        let data = {\r\n            is_acknowledged: true,\r\n            acknowledged_by: user.displayName,\r\n            date_acknowledged: this.getCurrentDate()\r\n        };\r\n        this.props.ack_entry(childData, data);\r\n    };\r\n\r\n    getCurrentDate = () => {\r\n        let today = new Date();\r\n        let dd = today.getDate();\r\n        let mm = today.getMonth() + 1;\r\n\r\n        let yyyy = today.getFullYear();\r\n        if (dd < 10) {\r\n            dd = \"0\" + dd;\r\n        }\r\n        if (mm < 10) {\r\n            mm = \"0\" + mm;\r\n        }\r\n        return mm + \"/\" + dd + \"/\" + yyyy;\r\n    };\r\n\r\n    render() {\r\n        const { ccms, auth, access_request, isLoading } = this.props;\r\n\r\n        if (isLoading) {\r\n            return <Loading />;\r\n        } else {\r\n\r\n            if (ccms.ccms_list.length && auth.user) {\r\n                return (\r\n                    <Container fluid>\r\n                        {auth.user.group_list.includes(\"CCMS Admin\") ? (\r\n                            <Row className=\"mb-5\">\r\n                                <Col>\r\n                                    <CcmsTable2\r\n                                        key={1}\r\n                                        table_name=\"main\"\r\n                                        title=\"\"\r\n                                        data={ccms.ccms_list}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        ) : (\r\n                            <Row>\r\n                                <Col>\r\n                                    <CcmsTable2\r\n                                        key={2}\r\n                                        table_name=\"owner\"\r\n                                        title=\"CCMS Owner VIEW - Assigning Escalation\"\r\n                                        data={ccms.ccms_list.filter(\r\n                                            item =>\r\n                                                ((item.ccms_owner || {}).user || {})\r\n                                                    .email ==\r\n                                                (auth.user || {}).username\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        )}\r\n                        {/* <Row>\r\n                            <Col>\r\n                                <CcmsTable2\r\n                                    table_name=\"owner\"\r\n                                    title=\"CCMS Owner VIEW - Assigning Escalation\"\r\n                                    data={ccms.ccms_list.filter(\r\n                                        item =>\r\n                                            ((item.ccms_owner || {}).user || {})\r\n                                                .email == (auth.user || {}).username\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                        </Row> */}\r\n                    </Container>\r\n                );\r\n            } else {\r\n\r\n                return (\r\n                    <Fragment>\r\n                        <h1>No CCMS entries</h1>\r\n                    </Fragment>\r\n                );\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ccms: state.ccms,\r\n    isLoading: state.ccms.isFetching,\r\n    auth: state.auth,\r\n    comments: state.ccms.comments,\r\n    access_request: state.ccms.access_request\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    get_ccms_list,\r\n    isFetching,\r\n    getSurveys,\r\n    ack_entry,\r\n    get_business_unit,\r\n    get_ticket_status,\r\n    get_escalation_type,\r\n    get_accountable_team,\r\n    get_site_code,\r\n    get_ccms_owner,\r\n    get_ccms_status,\r\n    get_silo,\r\n    get_ticket_type,\r\n    get_ccms_admin_list,\r\n    get_users_list,\r\n    get_all_data\r\n})(Ccms);\r\n\r\nexport const Loading = () => (\r\n    <Spinner\r\n        style={{\r\n            width: \"3rem\",\r\n            height: \"3rem\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            position: \"fixed\"\r\n        }}\r\n    />\r\n);\r\n","import axios from \"axios\";\r\nimport {\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    GET_ERRORS\r\n} from \"./types\";\r\n\r\nimport { axiosDefault } from \"./config\";\r\n\r\n// check token and load user\r\n\r\naxios.defaults.baseURL = axiosDefault;\r\n\r\nexport const loadUser = () => dispatch => {\r\n    // user loading\r\n    dispatch({ type: USER_LOADING });\r\n\r\n    axios.get(\"/api/cba_auth\").then(res => {\r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data\r\n        });\r\n    });\r\n};\r\n\r\n// login user\r\n\r\nexport const login = (username, password) => dispatch => {\r\n    // headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    };\r\n\r\n    // request body\r\n    const body = JSON.stringify({ username, password });\r\n\r\n    axios\r\n        .post(\"/api/auth/login\", body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            let errors;\r\n\r\n            if (err) {\r\n                if (err.response.data.non_field_errors[0]) {\r\n                    errors = {\r\n                        msg: err.response.data.non_field_errors[0],\r\n                        status: err.response.status\r\n                    };\r\n                    dispatch({\r\n                        type: GET_ERRORS,\r\n                        payload: errors\r\n                    });\r\n                    dispatch({\r\n                        type: LOGIN_FAIL\r\n                    });\r\n                }\r\n            }\r\n        });\r\n};\r\n\r\n// LOGOUT USER\r\n\r\nexport const logout = () => (dispatch, getState) => {\r\n    axios\r\n        .post(\"/api/auth/logout\", null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGOUT_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response);\r\n        });\r\n};\r\n\r\nexport const tokenConfig = getState => {\r\n    // get token from state\r\n    const token = getState().auth.token;\r\n\r\n    // headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    };\r\n\r\n    // if token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    return config;\r\n};\r\n\r\n// register user\r\n\r\nexport const register = ({ username, password, email }) => dispatch => {\r\n    // headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    };\r\n\r\n    // request body\r\n    const body = JSON.stringify({ username, password, email });\r\n\r\n    axios\r\n        .post(\"/api/auth/register\", body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: REGISTER_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err.response);\r\n            const errors = {\r\n                msg: err.response.data,\r\n                status: err.response.status\r\n            };\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: errors\r\n            });\r\n            dispatch({\r\n                type: REGISTER_FAIL\r\n            });\r\n        });\r\n};\r\n","import {\r\n    GET_SURVEYS,\r\n    ADD_SURVEY,\r\n    DELETE_SURVEY,\r\n    GET_SURVEY,\r\n    REMOVE_SURVEY,\r\n    GET_AGENT,\r\n    GET_SKILLS,\r\n    GET_DSAT_CODE1,\r\n    GET_BB_DRIVER_CODE2,\r\n    GET_BB_DRIVER_CODE3,\r\n    GET_TEAMS,\r\n    ADD_RCA,\r\n    FETCHING,\r\n    ADD_SKILL,\r\n    GET_TEAMLEADS,\r\n    ADD_TEAMLEAD,\r\n    ADD_DSAT_CODE1,\r\n    ADD_BB_DRIVER_CODE2,\r\n    ADD_BB_DRIVER_CODE3,\r\n    ADD_TEAM,\r\n    GET_RCAS,\r\n    GET_BOTTOMBOX,\r\n    GET_AGENTS,\r\n    GET_ERRORS,\r\n    STOP_FETCHING,\r\n    GET_ALL_DATA,\r\n    UPDATE_SURVEY,\r\n    UPDATE_RCA,\r\n    DELETE_RCA,\r\n    UPDATE_AGENT,\r\n    ADD_AGENT,\r\n    GET_RCA,\r\n    REMOVE_RCA,\r\n    DELETE_DSAT_CODE1,\r\n    UPDATE_DSAT_CODE1,\r\n    UPDATE_BB_DRIVER_CODE2,\r\n    UPDATE_BOTTOMBOX_DRIVER_STATE,\r\n    DELETE_BB_DRIVER_CODE2,\r\n    DELETE_BB_DRIVER_CODE3,\r\n    UPDATE_BB_DRIVER_CODE3,\r\n    UPDATE_AGENTS_COMPONENT_STATE,\r\n    UPDATE_CHART_DATA,\r\n    UPDATE_SELECTED_MONTH,\r\n    UPDATE_SELECTED_WEEK,\r\n    UPDATE_SELECTED_YEAR,\r\n    UPDATE_AGENT_CHART_DATA,\r\n    COLLAPSE_AGENT_VIEW,\r\n    COLLAPSE_BOTTOMBOX_DRIVER_VIEW,\r\n    COLLAPSE_SURVEY_VIEW,\r\n    ADD_FAILED_SURVEY,\r\n    GET_BOTTOMBOX_SURVEY_VIEW,\r\n    GET_TOPBOX_SURVEY_VIEW,\r\n    GET_COMPLETED_SURVEY_VIEW,\r\n    GET_ALL_SURVEY_VIEW,\r\n    COLLAPSE_DASHBOARD_VIEW\r\n} from \"./types\";\r\n\r\nimport { tokenConfig } from \"./auth\";\r\n\r\nimport { createMessage } from \"./messages\";\r\n\r\nimport axios from \"axios\";\r\nimport { axiosDefault } from \"./config\";\r\n\r\naxios.defaults.baseURL = axiosDefault;\r\n\r\n// surveys: this.props.getSurveys(),\r\n// rcas: this.props.getRcas(),\r\n// skills: this.props.getSkills(),\r\n// dsatCode1: this.props.getDsatCode1(),\r\n// bbDriverCode2: this.props.getBBDriverCode2(),\r\n// bbDriverCode3: this.props.getBBDriverCode3(),\r\n// teams: this.props.getTeams(),\r\n// agents: this.props.getAgents()\r\n\r\nexport const getAllSurveyView = () => dispatch => {\r\n    dispatch({\r\n        type: GET_ALL_SURVEY_VIEW\r\n    });\r\n};\r\n\r\nexport const getCompletedSurveyView = () => dispatch => {\r\n    dispatch({\r\n        type: GET_COMPLETED_SURVEY_VIEW\r\n    });\r\n};\r\n\r\nexport const getTopboxSurveyView = () => dispatch => {\r\n    dispatch({\r\n        type: GET_TOPBOX_SURVEY_VIEW\r\n    });\r\n};\r\n\r\nexport const getBottomboxSurveyView = () => dispatch => {\r\n    dispatch({\r\n        type: GET_BOTTOMBOX_SURVEY_VIEW\r\n    });\r\n};\r\n\r\nexport const dashboardViewCollapse = () => dispatch => {\r\n    dispatch({\r\n        type: COLLAPSE_DASHBOARD_VIEW\r\n    });\r\n};\r\n\r\nexport const agentViewCollapse = () => dispatch => {\r\n    dispatch({\r\n        type: COLLAPSE_AGENT_VIEW\r\n    });\r\n};\r\n\r\nexport const surveyViewCollapse = () => dispatch => {\r\n    dispatch({\r\n        type: COLLAPSE_SURVEY_VIEW\r\n    });\r\n};\r\n\r\nexport const bottomboxDriverViewCollapse = () => dispatch => {\r\n    dispatch({\r\n        type: COLLAPSE_BOTTOMBOX_DRIVER_VIEW\r\n    });\r\n};\r\n\r\nexport const updateChartData = data => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_CHART_DATA,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const updateAgentChartData = data => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_AGENT_CHART_DATA,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const updatedSelectedYear = data => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_SELECTED_YEAR,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const updatedSelectedWeek = data => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_SELECTED_WEEK,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const updatedSelectedMonth = data => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_SELECTED_MONTH,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const updateBBDriverState = data => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_BOTTOMBOX_DRIVER_STATE,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const updateAgentComponentState = data => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_AGENTS_COMPONENT_STATE,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const removeRca = () => dispatch => {\r\n    dispatch({\r\n        type: REMOVE_RCA\r\n    });\r\n};\r\n\r\nexport const getRca = surveyData => dispatch => {\r\n    dispatch({\r\n        type: GET_RCA,\r\n        payload: surveyData.reference_number\r\n    });\r\n};\r\n\r\nexport const addAgent = newAgent => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .post(\"/api/agents/\", newAgent, tokenConfig(getState))\r\n        .then(res =>\r\n            dispatch({\r\n                type: ADD_AGENT,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const updateAgent = agentData => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .put(\r\n            `/api/agents/${agentData.operator_lan_id}/`,\r\n            agentData,\r\n            tokenConfig(getState)\r\n        )\r\n        .then(res => {\r\n            console.log(res.data);\r\n            dispatch({\r\n                type: UPDATE_AGENT,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const deleteRca = data => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .delete(`/api/rca/${data.id}`, tokenConfig(getState))\r\n        .then(res => {\r\n            // dispatch(\r\n            //     createMessage({ surveyDeleted: `Survey ID ${id} Deleted` })\r\n            // );\r\n            dispatch({\r\n                type: DELETE_RCA,\r\n                payload: data\r\n            });\r\n            axios\r\n                .put(\r\n                    `/api/surveys/${data.surveyed_ticket}/`,\r\n                    { agent: data.agent, completed: false },\r\n                    tokenConfig(getState)\r\n                )\r\n                .then(res =>\r\n                    dispatch({\r\n                        type: UPDATE_SURVEY,\r\n                        payload: res.data\r\n                    })\r\n                )\r\n                .catch(err => console.log(err.response));\r\n        })\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const updateRca = rca_data => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .put(`/api/rca/${rca_data.id}/`, rca_data, tokenConfig(getState))\r\n        .then(res => {\r\n            console.log(res.data);\r\n            dispatch({\r\n                type: UPDATE_RCA,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const updateSurvey = survey_data => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .put(\r\n            `/api/surveys/${survey_data.reference_number}/`,\r\n            survey_data,\r\n            tokenConfig(getState)\r\n        )\r\n        .then(res => {\r\n            console.log(res.data);\r\n            dispatch({\r\n                type: UPDATE_SURVEY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const getAllData2 = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n    axios\r\n        .all([\r\n            axios.get(\"/api/surveys/\", tokenConfig(getState)),\r\n            axios.get(\"/api/rca/\", tokenConfig(getState)),\r\n            axios.get(\"/api/skills/\"),\r\n            axios.get(\"/api/dsat_code1/\"),\r\n            axios.get(\"/api/bb_driver_code2/\"),\r\n            axios.get(\"/api/bb_driver_code3/\"),\r\n            axios.get(\"/api/team/\"),\r\n            axios.get(\"/api/agents/\"),\r\n            axios.get(\"/api/teamleads/\")\r\n        ])\r\n        .then(\r\n            axios.spread(\r\n                (\r\n                    surveys,\r\n                    rcas,\r\n                    skills,\r\n                    dsat_code1,\r\n                    bb_driver_code2,\r\n                    bb_driver_code3,\r\n                    teams,\r\n                    agents,\r\n                    teamleads\r\n                ) => {\r\n                    dispatch({\r\n                        type: GET_ALL_DATA,\r\n                        payload: {\r\n                            surveys: surveys.data,\r\n                            rcas: rcas.data,\r\n                            skills: skills.data,\r\n                            dsat_code1: dsat_code1.data,\r\n                            bb_driver_code2: bb_driver_code2.data,\r\n                            bb_driver_code3: bb_driver_code3.data,\r\n                            teams: teams.data,\r\n                            agents: agents.data,\r\n                            teamleads: teamleads.data\r\n                        }\r\n                    });\r\n                    dispatch({\r\n                        type: STOP_FETCHING\r\n                    });\r\n                }\r\n            )\r\n        )\r\n        .catch(error => {\r\n            dispatch({\r\n                type: STOP_FETCHING\r\n            });\r\n            console.log(error.response);\r\n        });\r\n};\r\n\r\nexport const getAllData = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n    Promise.all([\r\n        axios\r\n            .get(\"/api/surveys/\", tokenConfig(getState))\r\n            .then(res =>\r\n                dispatch({\r\n                    type: GET_SURVEYS,\r\n                    payload: res.data\r\n                })\r\n            )\r\n            .catch(err => console.log(err.response.data)),\r\n        axios\r\n            .get(\"/api/rca/\")\r\n            .then(res =>\r\n                dispatch({\r\n                    type: GET_RCAS,\r\n                    payload: res.data\r\n                })\r\n            )\r\n            .catch(err => console.log(err.response.data)),\r\n        axios\r\n            .get(\"/api/skills/\")\r\n            .then(res =>\r\n                dispatch({\r\n                    type: GET_SKILLS,\r\n                    payload: res.data\r\n                })\r\n            )\r\n            .catch(err => console.log(err.response.data)),\r\n        axios\r\n            .get(\"/api/dsat_code1/\")\r\n            .then(res =>\r\n                dispatch({\r\n                    type: GET_DSAT_CODE1,\r\n                    payload: res.data\r\n                })\r\n            )\r\n            .catch(err => console.log(err.response.data)),\r\n        axios\r\n            .get(\"/api/bb_driver_code2/\")\r\n            .then(res =>\r\n                dispatch({\r\n                    type: GET_BB_DRIVER_CODE2,\r\n                    payload: res.data\r\n                })\r\n            )\r\n            .catch(err => console.log(err.response.data)),\r\n        axios\r\n            .get(\"/api/bb_driver_code3/\")\r\n            .then(res =>\r\n                dispatch({\r\n                    type: GET_BB_DRIVER_CODE3,\r\n                    payload: res.data\r\n                })\r\n            )\r\n            .catch(err => console.log(err.response.data)),\r\n        axios\r\n            .get(\"/api/team/\")\r\n            .then(res =>\r\n                dispatch({\r\n                    type: GET_TEAMS,\r\n                    payload: res.data\r\n                })\r\n            )\r\n            .catch(err => console.log(err.response.data)),\r\n        axios\r\n            .get(\"/api/agents/\")\r\n            .then(res =>\r\n                dispatch({\r\n                    type: GET_AGENTS,\r\n                    payload: res.data\r\n                })\r\n            )\r\n            .catch(err => console.log(err.response.data))\r\n    ]);\r\n};\r\n\r\nexport const isFetching = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n};\r\n\r\nexport const getSurveys = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/surveys/\", tokenConfig(getState))\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_SURVEYS,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const getAgents = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/agents/\")\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_AGENTS,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const getRcas = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/rca/\")\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_RCAS,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const deleteSurvey = id => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .delete(`/api/surveys/${id}`, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(\r\n                createMessage({ surveyDeleted: `Survey ID ${id} Deleted` })\r\n            );\r\n            dispatch({\r\n                type: DELETE_SURVEY,\r\n                payload: id\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const addSurveysBulk = list_data => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    const post_reqs = list_data.map(data => {\r\n        axios\r\n            .post(\"/api/surveys/\", data, tokenConfig(getState))\r\n            .then(res => {\r\n                dispatch({\r\n                    type: ADD_SURVEY,\r\n                    payload: res.data\r\n                });\r\n                dispatch({\r\n                    type: GET_BOTTOMBOX,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n                let errors;\r\n\r\n                if (err.response) {\r\n                    errors = {\r\n                        msg: err.response.data,\r\n                        status: err.response.status\r\n                    };\r\n                    dispatch({\r\n                        type: GET_ERRORS,\r\n                        payload: errors\r\n                    });\r\n                    dispatch({\r\n                        type: ADD_FAILED_SURVEY,\r\n                        payload: {\r\n                            data: err.config.data,\r\n                            msg: err.response.data,\r\n                            status: err.response.status\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    });\r\n    Promise.all(post_reqs);\r\n    dispatch({\r\n        type: STOP_FETCHING\r\n    });\r\n};\r\n\r\nexport const getSurvey = data => dispatch => {\r\n    dispatch({\r\n        type: GET_SURVEY,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const removeSurvey = () => dispatch => {\r\n    dispatch({\r\n        type: REMOVE_SURVEY,\r\n        payload: {}\r\n    });\r\n};\r\n\r\nexport const getAgentDetails = lan_id => dispatch => {\r\n    axios\r\n        .get(`/api/agents/${lan_id}`)\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_AGENT,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const getAgent = data => dispatch => {\r\n    dispatch({\r\n        type: GET_AGENT,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const addSkill = data => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .post(\"/api/skills/\", data)\r\n        .then(res =>\r\n            dispatch({\r\n                type: ADD_SKILL,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const getSkills = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/skills/\")\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_SKILLS,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const getDsatCode1 = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/dsat_code1/\")\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_DSAT_CODE1,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const getBBDriverCode2 = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/bb_driver_code2/\")\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_BB_DRIVER_CODE2,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const getBBDriverCode3 = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/bb_driver_code3/\")\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_BB_DRIVER_CODE3,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const addTeam = data => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .post(\"/api/team/\", data)\r\n        .then(res =>\r\n            dispatch({\r\n                type: ADD_TEAM,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const getTeams = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/team/\")\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_TEAMS,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const addRCA = (rcaData, agentData) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .post(\"/api/rca/\", rcaData, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: ADD_RCA,\r\n                payload: res.data\r\n            });\r\n            axios\r\n                .put(\r\n                    `/api/surveys/${rcaData.surveyed_ticket}/`,\r\n                    agentData,\r\n                    tokenConfig(getState)\r\n                )\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    dispatch({\r\n                        type: UPDATE_SURVEY,\r\n                        payload: res.data\r\n                    });\r\n                })\r\n                .catch(err => console.log(err.response));\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const getTeamLeads = () => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .get(\"/api/teamleads/\")\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_TEAMLEADS,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const addTeamLead = data => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .post(\"/api/teamleads/\", data)\r\n        .then(res =>\r\n            dispatch({\r\n                type: ADD_TEAMLEAD,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const addDsatCode1 = data => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .post(\"/api/dsat_code1/\", data)\r\n        .then(res =>\r\n            dispatch({\r\n                type: ADD_DSAT_CODE1,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const deleteDsatCode1 = (id, survey_list) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .delete(`/api/dsat_code1/${id}`, tokenConfig(getState))\r\n        .then(res => {\r\n            // dispatch(\r\n            //     createMessage({ surveyDeleted: `Survey ID ${id} Deleted` })\r\n            // );\r\n            dispatch({\r\n                type: DELETE_DSAT_CODE1,\r\n                payload: id\r\n            });\r\n            survey_list.forEach(element => {\r\n                axios\r\n                    .put(\r\n                        `/api/surveys/${element.surveyed_ticket}/`,\r\n                        { agent: element.agent, completed: false },\r\n                        tokenConfig(getState)\r\n                    )\r\n                    .then(res => {\r\n                        dispatch({\r\n                            type: UPDATE_SURVEY,\r\n                            payload: res.data\r\n                        });\r\n                    })\r\n                    .catch(err => console.log(err.response));\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const updateDsatCode1 = data => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .put(`/api/dsat_code1/${data.id}/`, data, tokenConfig(getState))\r\n        .then(res => {\r\n            console.log(res.data);\r\n            dispatch({\r\n                type: UPDATE_DSAT_CODE1,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const addBbDriverCode2 = data => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .post(\"/api/bb_driver_code2/\", data)\r\n        .then(res =>\r\n            dispatch({\r\n                type: ADD_BB_DRIVER_CODE2,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const deleteBbDriverCode2 = (id, survey_list) => (\r\n    dispatch,\r\n    getState\r\n) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .delete(`/api/bb_driver_code2/${id}`, tokenConfig(getState))\r\n        .then(res => {\r\n            // dispatch(\r\n            //     createMessage({ surveyDeleted: `Survey ID ${id} Deleted` })\r\n            // );\r\n            dispatch({\r\n                type: DELETE_BB_DRIVER_CODE2,\r\n                payload: id\r\n            });\r\n            survey_list.forEach(element => {\r\n                axios\r\n                    .put(\r\n                        `/api/surveys/${element.surveyed_ticket}/`,\r\n                        { agent: element.agent, completed: false },\r\n                        tokenConfig(getState)\r\n                    )\r\n                    .then(res => {\r\n                        dispatch({\r\n                            type: UPDATE_SURVEY,\r\n                            payload: res.data\r\n                        });\r\n                    })\r\n                    .catch(err => console.log(err.response));\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const deleteBbDriverCode3 = (id, survey_list) => (\r\n    dispatch,\r\n    getState\r\n) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .delete(`/api/bb_driver_code3/${id}`, tokenConfig(getState))\r\n        .then(res => {\r\n            // dispatch(\r\n            //     createMessage({ surveyDeleted: `Survey ID ${id} Deleted` })\r\n            // );\r\n            dispatch({\r\n                type: DELETE_BB_DRIVER_CODE3,\r\n                payload: id\r\n            });\r\n            survey_list.forEach(element => {\r\n                axios\r\n                    .put(\r\n                        `/api/surveys/${element.surveyed_ticket}/`,\r\n                        { agent: element.agent, completed: false },\r\n                        tokenConfig(getState)\r\n                    )\r\n                    .then(res => {\r\n                        dispatch({\r\n                            type: UPDATE_SURVEY,\r\n                            payload: res.data\r\n                        });\r\n                    })\r\n                    .catch(err => console.log(err.response));\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response.data));\r\n};\r\n\r\nexport const updateBbDriverCode2 = data => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .put(`/api/bb_driver_code2/${data.id}/`, data, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: UPDATE_BB_DRIVER_CODE2,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const updateBbDriverCode3 = data => (dispatch, getState) => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .put(`/api/bb_driver_code3/${data.id}/`, data, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: UPDATE_BB_DRIVER_CODE3,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err.response));\r\n};\r\n\r\nexport const addBbDriverCode3 = data => dispatch => {\r\n    dispatch({\r\n        type: FETCHING\r\n    });\r\n\r\n    axios\r\n        .post(\"/api/bb_driver_code3/\", data)\r\n        .then(res =>\r\n            dispatch({\r\n                type: ADD_BB_DRIVER_CODE3,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => console.log(err.reponse));\r\n};\r\n","import { CREATE_MESSAGE } from \"./types\";\r\n\r\nexport const createMessage = msg => {\r\n    return {\r\n        type: CREATE_MESSAGE,\r\n        payload: msg\r\n    };\r\n};\r\n","import { MODAL_TOGGLE } from \"./types\";\r\n\r\nexport const toggle = () => dispatch => {\r\n    dispatch({\r\n        type: MODAL_TOGGLE\r\n    });\r\n};\r\n","import React from \"react\";\r\n\r\nimport { FormGroup, Label, Input } from \"reactstrap\";\r\n\r\nfunction SingleInput(props) {\r\n    return (\r\n        <FormGroup>\r\n            <Label size=\"sm\" for={props.attr}>\r\n                {props.label_name}\r\n            </Label>\r\n            <Input\r\n                key={props.attr}\r\n                bsSize={props.size}\r\n                type={props.type}\r\n                name={props.attr}\r\n                id={props.id}\r\n                onChange={props.controlFunc}\r\n                value={props.value}\r\n                readOnly={props.readOnly}\r\n                required\r\n            />\r\n        </FormGroup>\r\n    );\r\n}\r\n\r\nexport default SingleInput;\r\n","import React from \"react\";\r\n\r\nimport { FormGroup, Label, Input } from \"reactstrap\";\r\n\r\nfunction SelectInput(props) {\r\n    return (\r\n        <FormGroup>\r\n            <Label size=\"sm\" for={props.attr}>\r\n                {props.label_name}\r\n            </Label>\r\n            <Input\r\n                key={props.attr}\r\n                bsSize={props.size}\r\n                type={props.type}\r\n                name={props.attr}\r\n                id={props.id}\r\n                onChange={props.controlFunc}\r\n                value={props.value}\r\n                required\r\n            >\r\n                <option value=\"\">--select--</option>\r\n                {props.options.map((item, index) => {\r\n                    if (\r\n                        props.attr == \"support_silo_issue_based\" ||\r\n                        props.attr == \"controllability\" ||\r\n                        props.attr == \"accountable_team\" ||\r\n                        props.attr == \"q1_answer\" ||\r\n                        props.attr == \"contacted_customer\" ||\r\n                        props.attr == \"coaching\" ||\r\n                        props.attr == \"dsat_cause\"\r\n                    ) {\r\n                        return (\r\n                            <option key={index} value={item.name}>\r\n                                {item.name}\r\n                            </option>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <option key={index} value={item.name}>\r\n                                {item.name}\r\n                            </option>\r\n                        );\r\n                    }\r\n                })}\r\n            </Input>\r\n        </FormGroup>\r\n    );\r\n}\r\n\r\nexport default SelectInput;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Card, CardHeader, CardBody, Row, Col } from \"reactstrap\";\r\nimport SingleInput from \"../rca/components/SingleInput\";\r\n\r\nclass SurveyDetails extends Component {\r\n    sendData = () => {\r\n        this.props.parentCallback(\"x\");\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let {\r\n            reference_number,\r\n            owner_name,\r\n            first_name,\r\n            last_name,\r\n            customer_email_address,\r\n            origination_source,\r\n            callback_reference_number,\r\n            related_incident_record,\r\n            site_location,\r\n            city,\r\n            state,\r\n            user_location,\r\n            phone_number,\r\n            call_type,\r\n            service_type,\r\n            service,\r\n            service_component,\r\n            average_score,\r\n            fulfillment,\r\n            assignment_group,\r\n            originating_ticket_description,\r\n            follow_up_comments,\r\n            q1,\r\n            q2,\r\n            q2a,\r\n            q3,\r\n            q3a,\r\n            q4,\r\n            q5,\r\n            q6,\r\n            budi_bu,\r\n            budi_lv7,\r\n            bu_catg,\r\n            date_issued,\r\n            uploaded_by,\r\n            date_uploaded\r\n        } = this.props.survey;\r\n\r\n        return (\r\n            <Fragment>\r\n                <h5>Survey Details</h5>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"customer_name\"\r\n                            label_name=\"Customer Name\"\r\n                            value={`${first_name} ${last_name}`}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"customer_email_address\"\r\n                            label_name=\"Email Address\"\r\n                            value={customer_email_address}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"phone_number\"\r\n                            label_name=\"Phone number\"\r\n                            value={phone_number}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"user_location\"\r\n                            label_name=\"User Location\"\r\n                            value={user_location}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"callback_reference_number\"\r\n                            label_name=\"Callback Reference Number\"\r\n                            value={callback_reference_number}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"related_incident_record\"\r\n                            label_name=\"Related Incident Record\"\r\n                            value={related_incident_record}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"site_location\"\r\n                            label_name=\"Site Location\"\r\n                            value={site_location}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"city\"\r\n                            label_name=\"City\"\r\n                            value={city}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"state\"\r\n                            label_name=\"State\"\r\n                            value={state}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"call_type\"\r\n                            label_name=\"Call Type\"\r\n                            value={call_type}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"service_type\"\r\n                            label_name=\"Service Type\"\r\n                            value={service_type}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"service\"\r\n                            label_name=\"Service\"\r\n                            value={service}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"service_component\"\r\n                            label_name=\"Service Component\"\r\n                            value={service_component}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"assignment_group\"\r\n                            label_name=\"Assignment Group\"\r\n                            value={assignment_group}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"origination_source\"\r\n                            label_name=\"Source\"\r\n                            value={origination_source}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={12}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"originating_ticket_description\"\r\n                            label_name=\"Originating Ticket Description\"\r\n                            value={originating_ticket_description}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={12}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"follow_up_comments\"\r\n                            label_name=\"Follow up comments\"\r\n                            value={follow_up_comments}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"average_score\"\r\n                            label_name=\"Average Score\"\r\n                            value={average_score}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"fulfillment\"\r\n                            label_name=\"Fulfillment\"\r\n                            value={fulfillment}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={12}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"q1\"\r\n                            label_name=\"Q1\"\r\n                            value={q1}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={12}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"q2\"\r\n                            label_name=\"Q2\"\r\n                            value={q2}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={12}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"q2a\"\r\n                            label_name=\"Q2a\"\r\n                            value={q2a}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={12}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"q3\"\r\n                            label_name=\"Q3\"\r\n                            value={q3}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={12}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"q3a\"\r\n                            label_name=\"Q3a\"\r\n                            value={q3a}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={12}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"q4\"\r\n                            label_name=\"Q4\"\r\n                            value={q4}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={12}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"q5\"\r\n                            label_name=\"Q5\"\r\n                            value={q5}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={12}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"q6\"\r\n                            label_name=\"Q6\"\r\n                            value={q6}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"budi_bu\"\r\n                            label_name=\"BUDI_BU\"\r\n                            value={budi_bu}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"budi_lv7\"\r\n                            label_name=\"BUDI_LV7\"\r\n                            value={budi_lv7}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"bu_catg\"\r\n                            label_name=\"BU_CATG\"\r\n                            value={bu_catg}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"date_issued\"\r\n                            label_name=\"Date Issued\"\r\n                            value={date_issued}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"survey-row\">\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"uploaded_by\"\r\n                            label_name=\"Uploaded by\"\r\n                            value={uploaded_by}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <SingleInput\r\n                            type=\"text\"\r\n                            size=\"sm\"\r\n                            attr=\"date_uploaded\"\r\n                            label_name=\"Date uploaded\"\r\n                            value={date_uploaded}\r\n                            controlFunc={this.handleChange}\r\n                            readOnly={true}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    survey: state.surveys.survey\r\n});\r\n\r\nexport default connect(null, {})(SurveyDetails);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Col,\r\n    Row,\r\n    Form\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { toggle } from \"../../../actions/modalToggleActions\";\r\nimport {\r\n    getSurveys,\r\n    deleteSurvey,\r\n    getSurvey,\r\n    getAgentDetails,\r\n    getSkills,\r\n    getDsatCode1,\r\n    getBBDriverCode2,\r\n    getBBDriverCode3,\r\n    removeSurvey,\r\n    getTeams,\r\n    addRCA,\r\n    updateRca\r\n} from \"../../../actions/surveyActions\";\r\n\r\nimport SingleInput from \"./components/SingleInput\";\r\nimport SelectInput from \"./components/SelectInput\";\r\n\r\nimport SurveyDetails from \"../components/SurveyDetails\";\r\n\r\nclass RCAFormModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        console.log(this.props.rca && this.props.rca);\r\n\r\n        this.state = {\r\n            ...this.props.rca,\r\n\r\n            selectDefault: [\r\n                {\r\n                    type: \"select\",\r\n                    size: \"sm\",\r\n                    id: \"no_data\",\r\n                    value: \"No Data\"\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let rca = this.props.rca ? this.props.rca : null;\r\n\r\n        this.setState({ ...rca });\r\n\r\n        // console.log(rca.dsat_cause ? rca : null);\r\n    }\r\n\r\n    handleToggle = () => {\r\n        this.props.removeSurvey();\r\n        this.props.toggle();\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    // Handle RCA Submit\r\n    // >>> Send Post to http://localhost:8000/api/rca/ contents newSurvey\r\n    // >>> Send Put request to http://localhost:8000/api/surveys/${reference_number}/ contents {\"completed\": true,\"owner_name\": \"Jona Dorado\",\"operator_lan_id\": \"doradojm\"}\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const rcaData = this.state;\r\n        delete rcaData.selectDefault;\r\n        rcaData.surveyed_ticket = this.props.survey.reference_number;\r\n        rcaData.agent = this.props.agent.operator_lan_id;\r\n        rcaData.dsat_cause = this.props.dsat_code1.filter(\r\n            item => item.id == this.state.dsat_cause\r\n        )[0];\r\n        rcaData.bb_driver_code2 = this.props.bb_driver_code2.filter(\r\n            item => item.id == this.state.bb_driver_code2\r\n        )[0];\r\n        rcaData.bb_driver_code3 = this.props.bb_driver_code3.filter(\r\n            item => item.id == this.state.bb_driver_code3\r\n        )[0];\r\n        rcaData.completed_by = this.props.user.email;\r\n\r\n        let agentData = {\r\n            agent: this.props.agent.operator_lan_id,\r\n            completed: true\r\n        };\r\n\r\n        console.log(rcaData);\r\n        console.log(agentData);\r\n\r\n        this.props.addRCA(rcaData, agentData);\r\n\r\n        this.props.toggle();\r\n    };\r\n\r\n    handleUpdate = e => {\r\n        e.preventDefault();\r\n\r\n        const rcaData = this.state;\r\n        rcaData.surveyed_ticket = this.props.rca.surveyed_ticket;\r\n        rcaData.agent = this.props.rca.agent;\r\n        rcaData.id = this.props.rca.id;\r\n\r\n        this.props.updateRca(rcaData);\r\n\r\n        this.props.toggle();\r\n    };\r\n\r\n    render() {\r\n        let { reference_number, owner_name } = this.props.survey;\r\n\r\n        const checkValue = elem => {\r\n            let value;\r\n            elem == null && !elem ? (value = \"\") : (value = elem);\r\n\r\n            return value;\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <Modal\r\n                    scrollable={true}\r\n                    className=\"modal-xl modal-main\"\r\n                    isOpen={this.props.isOpen}\r\n                    toggle={this.handleToggle}\r\n                >\r\n                    <Form\r\n                        className=\"modal-content\"\r\n                        onSubmit={\r\n                            this.props.rca.surveyed_ticket\r\n                                ? this.handleUpdate\r\n                                : this.handleSubmit\r\n                        }\r\n                    >\r\n                        <ModalHeader\r\n                            className=\"modal-header\"\r\n                            toggle={this.handleToggle}\r\n                        >\r\n                            Root Cause Analysis\r\n                        </ModalHeader>\r\n                        <ModalBody>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SurveyDetails survey={this.props.survey} />\r\n                                </Col>\r\n                                <Col>\r\n                                    <h5>RCA Details</h5>\r\n                                    <Row form>\r\n                                        <Col md={4}>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"surveyed_ticket\"\r\n                                                label_name=\"Surveyed Ticket Number\"\r\n                                                value={checkValue(\r\n                                                    reference_number\r\n                                                )}\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={true}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"agent\"\r\n                                                label_name=\"Agent's Name\"\r\n                                                value={checkValue(owner_name)}\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={true}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"skill\"\r\n                                                label_name=\"Agent's Primary Skill\"\r\n                                                value={checkValue(\r\n                                                    this.props.agent.skill\r\n                                                )}\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={true}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form>\r\n                                        <Col md={4}>\r\n                                            <SelectInput\r\n                                                type=\"select\"\r\n                                                size=\"sm\"\r\n                                                attr=\"support_silo_issue_based\"\r\n                                                label_name=\"SILO based on issue\"\r\n                                                value={\r\n                                                    this.state\r\n                                                        .support_silo_issue_based\r\n                                                }\r\n                                                controlFunc={this.handleChange}\r\n                                                options={this.props.skills}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"service\"\r\n                                                label_name=\"Service\"\r\n                                                value={this.state.service}\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={false}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"service_component\"\r\n                                                label_name=\"Service Component\"\r\n                                                value={\r\n                                                    this.state.service_component\r\n                                                }\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={false}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form>\r\n                                        <Col>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"brief_description\"\r\n                                                label_name=\"Brief Description\"\r\n                                                value={\r\n                                                    this.state.brief_description\r\n                                                }\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={false}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form>\r\n                                        <Col>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"user_verbatim\"\r\n                                                label_name=\"User's verbatim\"\r\n                                                value={this.state.user_verbatim}\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={false}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row form>\r\n                                        <Col md={4}>\r\n                                            <SelectInput\r\n                                                type=\"select\"\r\n                                                size=\"sm\"\r\n                                                attr=\"dsat_cause\"\r\n                                                label_name=\"BB Driver Code 1\"\r\n                                                value={this.state.dsat_cause}\r\n                                                controlFunc={this.handleChange}\r\n                                                options={this.props.dsat_code1}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            <SelectInput\r\n                                                type=\"select\"\r\n                                                size=\"sm\"\r\n                                                attr=\"bb_driver_code2\"\r\n                                                label_name=\"BB Driver Code 2\"\r\n                                                value={\r\n                                                    this.state.bb_driver_code2\r\n                                                }\r\n                                                controlFunc={this.handleChange}\r\n                                                options={\r\n                                                    this.state.dsat_cause\r\n                                                        ? this.props.bb_driver_code2.filter(\r\n                                                              item =>\r\n                                                                  this.state\r\n                                                                      .dsat_cause ==\r\n                                                                  item.dsat_Code1\r\n                                                          )\r\n                                                        : this.state\r\n                                                              .selectDefault\r\n                                                }\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            <SelectInput\r\n                                                type=\"select\"\r\n                                                size=\"sm\"\r\n                                                attr=\"bb_driver_code3\"\r\n                                                label_name=\"BB Driver Code 3\"\r\n                                                value={\r\n                                                    this.state.bb_driver_code3\r\n                                                }\r\n                                                controlFunc={this.handleChange}\r\n                                                options={\r\n                                                    this.state.bb_driver_code2\r\n                                                        ? this.props.bb_driver_code3.filter(\r\n                                                              item =>\r\n                                                                  this.state\r\n                                                                      .bb_driver_code2 ==\r\n                                                                  item.bb_Driver_Code2\r\n                                                          )\r\n                                                        : this.state\r\n                                                              .selectDefault\r\n                                                }\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form>\r\n                                        <Col>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"actual_issue\"\r\n                                                label_name=\"Actual issue\"\r\n                                                value={this.state.actual_issue}\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={false}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form>\r\n                                        <Col md={3}>\r\n                                            <SelectInput\r\n                                                type=\"select\"\r\n                                                size=\"sm\"\r\n                                                attr=\"controllability\"\r\n                                                label_name=\"Controllability\"\r\n                                                value={\r\n                                                    this.state.controllability\r\n                                                }\r\n                                                controlFunc={this.handleChange}\r\n                                                options={[\r\n                                                    {\r\n                                                        name:\r\n                                                            \"ITSD Controllable\"\r\n                                                    },\r\n                                                    {\r\n                                                        name:\r\n                                                            \"Non ITSD Controllable\"\r\n                                                    }\r\n                                                ]}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <SelectInput\r\n                                                type=\"select\"\r\n                                                size=\"sm\"\r\n                                                attr=\"accountable_team\"\r\n                                                label_name=\"Accountable Team\"\r\n                                                value={\r\n                                                    this.state.accountable_team\r\n                                                }\r\n                                                controlFunc={this.handleChange}\r\n                                                options={\r\n                                                    this.props.accountable_team\r\n                                                }\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <SelectInput\r\n                                                type=\"select\"\r\n                                                size=\"sm\"\r\n                                                attr=\"q1_answer\"\r\n                                                label_name=\"Q1 Answer?\"\r\n                                                value={this.state.q1_answer}\r\n                                                controlFunc={this.handleChange}\r\n                                                options={[\r\n                                                    {\r\n                                                        name: \"Yes\"\r\n                                                    },\r\n                                                    {\r\n                                                        name: \"No\"\r\n                                                    }\r\n                                                ]}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <SelectInput\r\n                                                type=\"select\"\r\n                                                size=\"sm\"\r\n                                                attr=\"contacted_customer\"\r\n                                                label_name=\"Informed user?\"\r\n                                                value={\r\n                                                    this.state\r\n                                                        .contacted_customer\r\n                                                }\r\n                                                controlFunc={this.handleChange}\r\n                                                options={[\r\n                                                    {\r\n                                                        name: \"Yes\"\r\n                                                    },\r\n                                                    {\r\n                                                        name: \"No\"\r\n                                                    }\r\n                                                ]}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form>\r\n                                        <Col>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"summary\"\r\n                                                label_name=\"Summary\"\r\n                                                value={this.state.summary}\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={false}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form>\r\n                                        <Col>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"obs_in_call\"\r\n                                                label_name=\"Place only relevant information in\r\n                                        the call\"\r\n                                                value={this.state.obs_in_call}\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={false}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form>\r\n                                        <Col>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"accountable_entity\"\r\n                                                label_name=\"Accountable Entity\"\r\n                                                value={\r\n                                                    this.state\r\n                                                        .accountable_entity\r\n                                                }\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={false}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form>\r\n                                        <Col>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"overall_reason_dsat\"\r\n                                                label_name=\"Place overall reason for DSAT\"\r\n                                                value={\r\n                                                    this.state\r\n                                                        .overall_reason_dsat\r\n                                                }\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={false}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row form>\r\n                                        <Col md={3}>\r\n                                            <SelectInput\r\n                                                type=\"select\"\r\n                                                size=\"sm\"\r\n                                                attr=\"coaching\"\r\n                                                label_name=\"Coahing done?\"\r\n                                                value={this.state.coaching}\r\n                                                controlFunc={this.handleChange}\r\n                                                options={[\r\n                                                    {\r\n                                                        name: \"true\"\r\n                                                    },\r\n                                                    {\r\n                                                        name: \"false\"\r\n                                                    }\r\n                                                ]}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={9}>\r\n                                            <SingleInput\r\n                                                type=\"text\"\r\n                                                size=\"sm\"\r\n                                                attr=\"corrective_actions\"\r\n                                                label_name=\"Corrective actions\"\r\n                                                value={\r\n                                                    this.state\r\n                                                        .corrective_actions\r\n                                                }\r\n                                                controlFunc={this.handleChange}\r\n                                                readOnly={false}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            {this.props.rca.surveyed_ticket ? (\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    onSubmit={this.handleUpdate}\r\n                                    className=\"btn-submit\"\r\n                                    // onClick={this.handleToggle}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            ) : (\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    onSubmit={this.handleSubmit}\r\n                                    className=\"btn-submit\"\r\n                                    // onClick={this.handleToggle}\r\n                                >\r\n                                    Submit\r\n                                </Button>\r\n                            )}\r\n                            <Button\r\n                                type=\"submit\"\r\n                                className=\"btn-submit\"\r\n                                onClick={this.handleToggle}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isOpen: state.modal.isOpen,\r\n    survey: state.surveys.survey,\r\n    agent: state.surveys.agent,\r\n    skills: state.surveys.skills,\r\n    dsat_code1: state.surveys.dsat_code1,\r\n    bb_driver_code2: state.surveys.bb_driver_code2,\r\n    bb_driver_code3: state.surveys.bb_driver_code3,\r\n    accountable_team: state.surveys.teams,\r\n    rca: state.surveys.rca,\r\n    user: state.auth.user\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getSurveys,\r\n    deleteSurvey,\r\n    toggle,\r\n    getSurvey,\r\n    getAgentDetails,\r\n    getSkills,\r\n    getDsatCode1,\r\n    getBBDriverCode2,\r\n    getBBDriverCode3,\r\n    removeSurvey,\r\n    getTeams,\r\n    addRCA,\r\n    updateRca\r\n})(RCAFormModal);\r\n","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    Row,\r\n    Col\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateSurvey } from \"../../../actions/surveyActions\";\r\n\r\nimport SingleInput from \"../../../components/bottombox/rca/components/SingleInput\";\r\n\r\nclass SurveyDetailsModal extends React.Component {\r\n    state = {\r\n        modal: false,\r\n        callback_reference_number: this.props.survey.callback_reference_number,\r\n        related_incident_record: this.props.survey.related_incident_record,\r\n        first_name: this.props.survey.first_name,\r\n        last_name: this.props.survey.last_name,\r\n        company_name: this.props.survey.company_name,\r\n        phone_number: this.props.survey.phone_number,\r\n        site_location: this.props.survey.site_location,\r\n        customer_email_address: this.props.survey.customer_email_address,\r\n        city: this.props.survey.city,\r\n        state: this.props.survey.state,\r\n        date_time: this.props.survey.date_time,\r\n        origination_source: this.props.survey.origination_source,\r\n        call_type: this.props.survey.call_type,\r\n        service_type: this.props.survey.service_type,\r\n        service: this.props.survey.service,\r\n        service_component: this.props.survey.service_component,\r\n        assignment_group: this.props.survey.assignment_group,\r\n        q1: this.props.survey.q1,\r\n        q2: this.props.survey.q2,\r\n        q2a: this.props.survey.q2a,\r\n        q3: this.props.survey.q3,\r\n        q3a: this.props.survey.q3a,\r\n        q4: this.props.survey.q4,\r\n        q5: this.props.survey.q5,\r\n        q6: this.props.survey.q6,\r\n        average_score: this.props.survey.average_score,\r\n        operator_lan_id: this.props.survey.operator_lan_id,\r\n        owner_name: this.props.survey.owner_name,\r\n        fulfillment: this.props.survey.fulfillment,\r\n        follow_up_comments: this.props.survey.follow_up_comments,\r\n        originating_ticket_description: this.props.survey\r\n            .originating_ticket_description,\r\n        budi_bu: this.props.survey.budi_bu,\r\n        budi_lv7: this.props.survey.budi_lv7,\r\n        bu_catg: this.props.survey.bu_catg,\r\n        date_issued: this.props.survey.date_issued\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState(prevState => ({\r\n            modal: !prevState.modal\r\n        }));\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        let survey_data = this.state;\r\n        delete survey_data.modal;\r\n\r\n        survey_data.reference_number = this.props.survey.reference_number;\r\n        survey_data.agent = this.props.survey.operator_lan_id;\r\n\r\n        console.log(this.state);\r\n        this.props.updateSurvey(survey_data);\r\n        this.toggle();\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState(prevState => ({\r\n            callback_reference_number: this.props.survey\r\n                .callback_reference_number,\r\n            related_incident_record: this.props.survey.related_incident_record,\r\n            first_name: this.props.survey.first_name,\r\n            last_name: this.props.survey.last_name,\r\n            company_name: this.props.survey.company_name,\r\n            phone_number: this.props.survey.phone_number,\r\n            site_location: this.props.survey.site_location,\r\n            customer_email_address: this.props.survey.customer_email_address,\r\n            city: this.props.survey.city,\r\n            state: this.props.survey.state,\r\n            date_time: this.props.survey.date_time,\r\n            origination_source: this.props.survey.origination_source,\r\n            call_type: this.props.survey.call_type,\r\n            service_type: this.props.survey.service_type,\r\n            service: this.props.survey.service,\r\n            service_component: this.props.survey.service_component,\r\n            assignment_group: this.props.survey.assignment_group,\r\n            q1: this.props.survey.q1,\r\n            q2: this.props.survey.q2,\r\n            q2a: this.props.survey.q2a,\r\n            q3: this.props.survey.q3,\r\n            q3a: this.props.survey.q3a,\r\n            q4: this.props.survey.q4,\r\n            q5: this.props.survey.q5,\r\n            q6: this.props.survey.q6,\r\n            average_score: this.props.survey.average_score,\r\n            operator_lan_id: this.props.survey.operator_lan_id,\r\n            owner_name: this.props.survey.owner_name,\r\n            fulfillment: this.props.survey.fulfillment,\r\n            follow_up_comments: this.props.survey.follow_up_comments,\r\n            originating_ticket_description: this.props.survey\r\n                .originating_ticket_description,\r\n            budi_bu: this.props.survey.budi_bu,\r\n            budi_lv7: this.props.survey.budi_lv7,\r\n            bu_catg: this.props.survey.bu_catg,\r\n            date_issued: this.props.survey.date_issued\r\n        }));\r\n        this.toggle();\r\n    };\r\n\r\n    render() {\r\n        const { reference_number } = this.props.survey;\r\n        return (\r\n            <div>\r\n                <Button color=\"primary\" size=\"sm\" onClick={this.toggle}>\r\n                    View\r\n                </Button>\r\n                <Modal\r\n                    scrollable={true}\r\n                    className=\"modal-xl modal-main\"\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n                    <Form className=\"modal-content\">\r\n                        <ModalHeader\r\n                            className=\"modal-header\"\r\n                            toggle={this.handleCancel}\r\n                        >\r\n                            {reference_number}\r\n                        </ModalHeader>\r\n                        <ModalBody>\r\n                            {/* below on TOP */}\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"first_name\"\r\n                                        label_name=\"First Name\"\r\n                                        value={this.state.first_name}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"first_name\"\r\n                                        label_name=\"Last Name\"\r\n                                        value={this.state.last_name}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"customer_email_address\"\r\n                                        label_name=\"Customer Email Address\"\r\n                                        value={\r\n                                            this.state.customer_email_address\r\n                                        }\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"company_name\"\r\n                                        label_name=\"Company Name\"\r\n                                        value={this.state.company_name}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"phone_number\"\r\n                                        label_name=\"Phone Number\"\r\n                                        attr=\"phone_number\"\r\n                                        value={this.state.phone_number}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"site_location\"\r\n                                        label_name=\"Site Location\"\r\n                                        value={this.state.site_location}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"city\"\r\n                                        label_name=\"City\"\r\n                                        value={this.state.city}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"state\"\r\n                                        label_name=\"State\"\r\n                                        value={this.state.state}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"callback_reference_number\"\r\n                                        label_name=\"Callback Reference Number\"\r\n                                        value={\r\n                                            this.state.callback_reference_number\r\n                                        }\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"relared_incident_record\"\r\n                                        label_name=\"Related Incident Record\"\r\n                                        value={\r\n                                            this.state.relared_incident_record\r\n                                        }\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"vip\"\r\n                                        label_name=\"VIP\"\r\n                                        value={this.state.vip}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"date_time\"\r\n                                        label_name=\"Date Time\"\r\n                                        value={this.state.date_time}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"origination_source\"\r\n                                        label_name=\"Origination Source\"\r\n                                        value={this.state.origination_source}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"call_type\"\r\n                                        label_name=\"Call Type\"\r\n                                        value={this.state.call_type}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"service_type\"\r\n                                        label_name=\"Service Type\"\r\n                                        value={this.state.service_type}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"service\"\r\n                                        label_name=\"Service\"\r\n                                        value={this.state.service}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"service_component\"\r\n                                        label_name=\"Service Component\"\r\n                                        value={this.state.service_component}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"assignment_group\"\r\n                                        label_name=\"Assignment Group\"\r\n                                        value={this.state.assignment_group}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"q1\"\r\n                                        label_name=\"Q1\"\r\n                                        value={this.state.q1}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"q2\"\r\n                                        label_name=\"Q2\"\r\n                                        value={this.state.q2}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"q2a\"\r\n                                        label_name=\"Q2a\"\r\n                                        value={this.state.q2a}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"q3\"\r\n                                        label_name=\"Q3\"\r\n                                        value={this.state.q3}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"q3a\"\r\n                                        label_name=\"Q3a\"\r\n                                        value={this.state.q3a}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"q4\"\r\n                                        label_name=\"Q4\"\r\n                                        value={this.state.q4}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"q5\"\r\n                                        label_name=\"Q5\"\r\n                                        value={this.state.q5}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"q6\"\r\n                                        label_name=\"Q6\"\r\n                                        value={this.state.q6}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"average_score\"\r\n                                        label_name=\"Average Score\"\r\n                                        value={this.state.average_score}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"owner_name\"\r\n                                        label_name=\"Owner Name\"\r\n                                        value={this.state.owner_name}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"operator_lan_id\"\r\n                                        label_name=\"Operator Lan ID\"\r\n                                        value={this.state.operator_lan_id}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"fulfillment\"\r\n                                        label_name=\"Fulfillment\"\r\n                                        value={this.state.fulfillment}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"follow_up_comments\"\r\n                                        label_name=\"Follow Up Comments\"\r\n                                        value={this.state.follow_up_comments}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"originating_ticket_description\"\r\n                                        label_name=\"Originating Ticket Description\"\r\n                                        value={\r\n                                            this.state\r\n                                                .originating_ticket_description\r\n                                        }\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"budi_bu\"\r\n                                        label_name=\"Budi_Bu\"\r\n                                        value={this.state.budi_bu}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"budi_lv7\"\r\n                                        label_name=\"Budi_lv7\"\r\n                                        value={this.state.budi_lv7}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"bu_catg\"\r\n                                        label_name=\"Bu_catg\"\r\n                                        value={this.state.bu_catg}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"date_issued\"\r\n                                        label_name=\"Date Issued\"\r\n                                        value={this.state.date_issued}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button color=\"primary\" onClick={this.handleSubmit}>\r\n                                Update\r\n                            </Button>{\" \"}\r\n                            <Button\r\n                                color=\"secondary\"\r\n                                onClick={this.handleCancel}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    { updateSurvey }\r\n)(SurveyDetailsModal);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\nimport moment from \"moment\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    deleteSurvey,\r\n    getBottomboxSurveyView,\r\n    getTopboxSurveyView,\r\n    getCompletedSurveyView,\r\n    getAllSurveyView\r\n} from \"../../../../actions/surveyActions\";\r\nimport { toggle } from \"../../../../actions/modalToggleActions\";\r\n\r\nimport RCAFormModal from \"../../rca/RCAFormModal\";\r\n\r\nimport SurveyDetailsModal from \"../../components/SurveyDetailsModal\";\r\n\r\nimport {\r\n    getSurvey,\r\n    getAgentDetails,\r\n    getRca,\r\n    removeRca\r\n} from \"../../../../actions/surveyActions\";\r\n\r\nimport ReactExport from \"react-data-export\";\r\n\r\nimport { Button, Badge, Row, Col } from \"reactstrap\";\r\n\r\nimport DateRangePicker from \"react-bootstrap-daterangepicker\";\r\nimport \"bootstrap-daterangepicker/daterangepicker.css\";\r\n\r\nlet agent_headers = [\r\n    \"operator_lan_id\",\r\n    \"surveys\",\r\n    \"name\",\r\n    \"email\",\r\n    \"location\",\r\n    \"wave\",\r\n    \"skill\",\r\n    \"team_lead\"\r\n];\r\n\r\nconst ExcelFile = ReactExport.ExcelFile;\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\r\n\r\nclass DatatablePage extends Component {\r\n    state = {\r\n        cellprops: null,\r\n        filtered: [],\r\n        start_date: \"\",\r\n        end_date: \"\",\r\n        data: [],\r\n        filter: false,\r\n        sortedData: [],\r\n        rca_headers: [],\r\n\r\n        agent: []\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { agents, rcas } = this.props;\r\n        if (rcas != prevProps.rcas) {\r\n            this.setState({\r\n                rca_headers: rcas[0] && Object.keys(rcas[0]),\r\n                rcas\r\n            });\r\n        }\r\n        if (agents != prevProps.agents) {\r\n            this.setState({\r\n                agents\r\n            });\r\n        }\r\n    }\r\n\r\n    getData = data => {\r\n        if (data === \"bottombox\") {\r\n            this.props.getBottomboxSurveyView();\r\n        } else if (data === \"topbox\") {\r\n            this.props.getTopboxSurveyView();\r\n        } else if (data === \"completed\") {\r\n            this.props.getCompletedSurveyView();\r\n        } else if (data === \"all\") {\r\n            this.props.getAllSurveyView();\r\n        }\r\n    };\r\n\r\n    handleDelete = e => this.props.deleteSurvey(e);\r\n\r\n    handleToggle = data => {\r\n        data.completed == true\r\n            ? this.props.getRca(data)\r\n            : this.props.removeRca();\r\n        this.props.getSurvey(data);\r\n        this.props.getAgentDetails(data.operator_lan_id);\r\n        this.props.toggle();\r\n    };\r\n\r\n    handleClick = () => {\r\n        let sortedData = this.reactTable.getResolvedState().sortedData;\r\n        this.setState({ sortedData });\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: moment(e.target.value).format(\"DD/MM/YYYY\")\r\n        });\r\n    };\r\n\r\n    handleEvent = (e, picker) => {\r\n        console.log(moment(picker.startDate).format(\"DD/MM/YYYY\"));\r\n    };\r\n\r\n    filterToggle = () => {\r\n        this.setState((state, props) => ({\r\n            filter: !state.filter\r\n        }));\r\n    };\r\n\r\n    resetFields = () => {\r\n        this.setState({ filtered: [], sortedData: [] });\r\n    };\r\n\r\n    render() {\r\n        // customfilter not used yet\r\n        // const customFilter = ({ fieldName, filter, onChange }) => {\r\n        //   return (\r\n        //     <select\r\n        //       onChange={event => onChange(event.target.value)}\r\n        //       style={{ width: \"100%\" }}\r\n        //       value={filter ? filter.value : \"all\"}\r\n        //     >\r\n        //       <option value=\"all\">Show All</option>\r\n        //       {testData\r\n        //         .map(item => item[fieldName])\r\n\r\n        //         .filter((item, i, s) => s.lastIndexOf(item) == i)\r\n        //         .map(function(value) {\r\n        //           log.debug(\"renderItem: \", value);\r\n        //           return (\r\n        //             <option key={value} value={value}>\r\n        //               {value}\r\n        //             </option>\r\n        //           );\r\n        //         })}\r\n        //     </select>\r\n        //   );\r\n        // };\r\n\r\n        // Creating Headers for table\r\n        const headers = this.props.headers.map(val => {\r\n            switch (val) {\r\n                case \"date_issued\":\r\n                    return Object.assign({\r\n                        [\"Header\"]: val,\r\n                        [\"accessor\"]: val,\r\n\r\n                        [\"Filter\"]: ({ filter, onChange }) => (\r\n                            <DateRangePicker\r\n                                onApply={(event, picker) => onChange(picker)}\r\n                            >\r\n                                <Button className=\"btn-filter\" size=\"sm\">\r\n                                    Filter Date\r\n                                </Button>\r\n                            </DateRangePicker>\r\n                        ),\r\n                        [\"filterMethod\"]: (filter, row) => {\r\n                            //   let date_q = moment(row[\"date_issued\"]).format(\"YYYY-MM-DD\");\r\n\r\n                            filter\r\n                                ? console.log(filter)\r\n                                : console.log(\"no filter\");\r\n\r\n                            let format = \"YYYY-MM-DD\";\r\n                            let date_q = row[\"date_issued\"];\r\n                            let startD = moment(filter.value.startDate).format(\r\n                                format\r\n                            );\r\n                            let endD = moment(filter.value.endDate).format(\r\n                                format\r\n                            );\r\n\r\n                            if (\r\n                                moment(date_q).isBetween(startD, endD, null, [])\r\n                            ) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                case \"completed\":\r\n                    return Object.assign({\r\n                        [\"Header\"]: val,\r\n                        [\"id\"]: val,\r\n                        [\"accessor\"]: val => val.completed.toString()\r\n                    });\r\n\r\n                default:\r\n                    return Object.assign({\r\n                        [\"Header\"]: val,\r\n                        [\"accessor\"]: val\r\n                    });\r\n            }\r\n        });\r\n\r\n        // Creating buttons for table\r\n        const buttons = {\r\n            Header: \"Actions\",\r\n            filterable: false,\r\n            Cell: cellprops => (\r\n                <Fragment>\r\n                    <div className=\"btn-group\">\r\n                        <SurveyDetailsModal survey={cellprops.original} />\r\n\r\n                        <Button\r\n                            color={\r\n                                this.props.surveys\r\n                                    .filter(\r\n                                        survey =>\r\n                                            cellprops.original\r\n                                                .reference_number ===\r\n                                            survey.reference_number\r\n                                    )\r\n                                    .map(item => item.completed)[0] == true\r\n                                    ? \"success\"\r\n                                    : cellprops.original.bottombox == 1\r\n                                    ? \"danger\"\r\n                                    : \"warning\"\r\n                            }\r\n                            size=\"sm\"\r\n                            className=\"ml-1\"\r\n                            onClick={() =>\r\n                                this.handleToggle(cellprops.original)\r\n                            }\r\n                        >\r\n                            RCA\r\n                        </Button>\r\n                        <RCAFormModal />\r\n\r\n                        <Button\r\n                            className=\"ml-1\"\r\n                            color=\"danger\"\r\n                            size=\"sm\"\r\n                            onClick={() =>\r\n                                this.handleDelete(\r\n                                    cellprops.original.reference_number\r\n                                )\r\n                            }\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </div>\r\n                </Fragment>\r\n            ),\r\n            width: 200\r\n        };\r\n        const columns = [buttons, ...headers];\r\n\r\n        const surveysTableExcelSheet = (\r\n            <ExcelSheet\r\n                data={\r\n                    this.state.sortedData[0]\r\n                        ? this.state.sortedData\r\n                        : this.props.surveys\r\n                }\r\n                name=\"Surveys\"\r\n            >\r\n                {this.props.headers.map(item => (\r\n                    <ExcelColumn key={item} label={item} value={item} />\r\n                ))}\r\n            </ExcelSheet>\r\n        );\r\n\r\n        let rca_headers;\r\n        let rcaTableExcelSheet;\r\n\r\n        if (!Array.isArray(this.props.rcas) || !this.props.rcas.length) {\r\n            rcaTableExcelSheet = (\r\n                <ExcelSheet data={[{ data: \"no_data\" }]} name=\"RCAS\">\r\n                    <ExcelColumn label=\"data\" value=\"data\" />\r\n                </ExcelSheet>\r\n            );\r\n        } else {\r\n            rca_headers = Object.keys(this.props.rcas[0]);\r\n            rcaTableExcelSheet = (\r\n                <ExcelSheet data={this.props.rcas} name=\"RCAS\">\r\n                    {rca_headers.map(item => (\r\n                        <ExcelColumn key={item} label={item} value={item} />\r\n                    ))}\r\n                </ExcelSheet>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <h5>Survey Table</h5>\r\n\r\n                <Row className=\"mb-3 mt-2\">\r\n                    <Col style={{ display: \"inline\" }}>\r\n                        <Button\r\n                            size=\"sm\"\r\n                            color=\"success\"\r\n                            onClick={() => this.getData(\"completed\")}\r\n                            className=\"mr-2\"\r\n                        >\r\n                            Completed RCA{\" \"}\r\n                            <Badge color=\"secondary\">\r\n                                {this.props.completed_survey_count}\r\n                            </Badge>\r\n                        </Button>\r\n                        <Button\r\n                            size=\"sm\"\r\n                            color=\"warning\"\r\n                            className=\"mr-2\"\r\n                            onClick={() => this.getData(\"topbox\")}\r\n                        >\r\n                            Topbox - RCA not done{\" \"}\r\n                            <Badge color=\"secondary\">\r\n                                {this.props.incomplete_topbox_count}\r\n                            </Badge>\r\n                        </Button>\r\n                        <Button\r\n                            size=\"sm\"\r\n                            color=\"danger\"\r\n                            className=\"mr-2\"\r\n                            onClick={() => this.getData(\"bottombox\")}\r\n                        >\r\n                            Bottombox - RCA not done{\" \"}\r\n                            <Badge color=\"secondary\">\r\n                                {this.props.incomplete_bottombox_count}\r\n                            </Badge>\r\n                        </Button>\r\n                        <Button\r\n                            size=\"sm\"\r\n                            color=\"primary\"\r\n                            className=\"mr-2\"\r\n                            onClick={() => this.getData(\"all\")}\r\n                        >\r\n                            All{\" \"}\r\n                            <Badge color=\"secondary\">\r\n                                {this.props.data.length}\r\n                            </Badge>\r\n                        </Button>\r\n                        <span>Legend for RCA button</span>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"mb-2\">\r\n                    <Col md={6} style={{ display: \"inline\" }}>\r\n                        <Fragment>\r\n                            <ExcelFile\r\n                                filename=\"Bottombox\"\r\n                                element={\r\n                                    <Button\r\n                                        className=\"mr-2 btn-bb\"\r\n                                        onClick={this.handleClick}\r\n                                    >\r\n                                        Download\r\n                                    </Button>\r\n                                }\r\n                            >\r\n                                {surveysTableExcelSheet}\r\n                                {rcaTableExcelSheet}\r\n\r\n                                {this.props.agents.length != 0 ? (\r\n                                    <ExcelSheet\r\n                                        data={this.props.agents}\r\n                                        name=\"Agents\"\r\n                                    >\r\n                                        {this.props.agent_headers.map(item =>\r\n                                            item != \"surveys\" ? (\r\n                                                <ExcelColumn\r\n                                                    key={item}\r\n                                                    label={item}\r\n                                                    value={item}\r\n                                                />\r\n                                            ) : (\r\n                                                <ExcelColumn\r\n                                                    key={item}\r\n                                                    label={item}\r\n                                                    value=\"test\"\r\n                                                />\r\n                                            )\r\n                                        )}\r\n                                    </ExcelSheet>\r\n                                ) : (\r\n                                    console.log(\"Do Nothing Agent\")\r\n                                )}\r\n                            </ExcelFile>\r\n                        </Fragment>\r\n\r\n                        <Button\r\n                            className=\"mr-2 btn-bb\"\r\n                            onClick={this.filterToggle}\r\n                        >\r\n                            Filter\r\n                        </Button>\r\n                        <Button\r\n                            className=\"mr-2 btn-bb\"\r\n                            onClick={this.resetFields}\r\n                        >\r\n                            Reset\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <ReactTable\r\n                    className=\"-striped -highlight\"\r\n                    ref={r => (this.reactTable = r)}\r\n                    filtered={this.state.filtered}\r\n                    onFilteredChange={filtered => {\r\n                        this.setState({\r\n                            filtered,\r\n                            sortedData: this.reactTable.getResolvedState()\r\n                                .sortedData\r\n                        });\r\n                    }}\r\n                    style={{ backgroundColor: \"white\" }}\r\n                    // DATA that will be displayed should be the same data to be extracted\r\n                    data={this.props.surveys_view}\r\n                    columns={columns}\r\n                    minRows={10}\r\n                    defaultPageSize={10}\r\n                    filterable={this.state.filter}\r\n                />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    headers: state.surveys.headers,\r\n    data: state.surveys.surveys,\r\n    surveys_view: state.surveys.surveys_view,\r\n    isOpen: state.modal.isOpen,\r\n    surveys: state.surveys.surveys,\r\n    agents: state.surveys.agents,\r\n    agent_headers: state.surveys.agent_headers,\r\n    rcas: state.surveys.rcas,\r\n    rca: state.surveys.rca,\r\n    incomplete_bottombox_count: state.surveys.surveys.filter(\r\n        survey => survey.bottombox === 1 && survey.completed === false\r\n    ).length,\r\n    incomplete_topbox_count: state.surveys.surveys.filter(\r\n        survey => survey.bottombox === 0 && survey.completed === false\r\n    ).length,\r\n    completed_survey_count: state.surveys.surveys.filter(\r\n        survey => survey.completed === true\r\n    ).length\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    deleteSurvey,\r\n    toggle,\r\n    getSurvey,\r\n    getAgentDetails,\r\n    getRca,\r\n    removeRca,\r\n    getBottomboxSurveyView,\r\n    getTopboxSurveyView,\r\n    getCompletedSurveyView,\r\n    getAllSurveyView\r\n})(DatatablePage);\r\n","import React, { Component } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n} from \"reactstrap\";\r\n\r\nimport SingleInput from \"../../../components/bottombox/rca/components/SingleInput\";\r\nimport SelectInput from \"../../../components/bottombox/rca/components/SelectInput\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { updateRca } from \"../../../actions/surveyActions\";\r\n\r\nclass RcaEditForm extends Component {\r\n    state = {\r\n        modal: false,\r\n        // surveyed_ticket: this.props.rca.surveyed_ticket,\r\n        // agent: this.props.rca.agent,\r\n        // support_silo_issue_based: this.props.rca.support_silo_issue_based,\r\n        // service: this.props.rca.service,\r\n        // service_component: this.props.rca.service_component,\r\n        // brief_description: this.props.rca.brief_description,\r\n        // user_verbatim: this.props.rca.user_verbatim,\r\n        // dsat_cause: this.props.rca.dsat_cause,\r\n        // bb_driver_code2: this.props.rca.bb_driver_code2,\r\n        // bb_driver_code3: this.props.rca.bb_driver_code3,\r\n        // actual_issue: this.props.rca.actual_issue,\r\n        // controllability: this.props.rca.controllability,\r\n        // accountable_team: this.props.rca.accountable_team,\r\n        // q1_answer: this.props.rca.q1_answer,\r\n        // contacted_customer: this.props.rca.contacted_customer,\r\n        // summary: this.props.rca.summary,\r\n        // obs_in_call: this.props.rca.obs_in_call,\r\n        // accountable_entity: this.props.rca.accountable_entity,\r\n        // overall_reason_dsat: this.props.rca.overall_reason_dsat,\r\n        // coaching: this.props.rca.coaching,\r\n        // corrective_actions: this.props.rca.corrective_actions\r\n        surveyed_ticket: \"\",\r\n        agent: \"\",\r\n        support_silo_issue_based: \"\",\r\n        service: \"\",\r\n        service_component: \"\",\r\n        brief_description: \"\",\r\n        user_verbatim: \"\",\r\n        dsat_cause: \"test\",\r\n        bb_driver_code2: \"\",\r\n        bb_driver_code3: \"\",\r\n        actual_issue: \"\",\r\n        controllability: \"\",\r\n        accountable_team: \"\",\r\n        q1_answer: \"\",\r\n        contacted_customer: \"\",\r\n        summary: \"\",\r\n        obs_in_call: \"\",\r\n        accountable_entity: \"\",\r\n        overall_reason_dsat: \"\",\r\n        coaching: \"\",\r\n        corrective_actions: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            ...this.props.local_rca\r\n        });\r\n        // console.log(this.props.local_rca);\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        let rca_data = this.state;\r\n        rca_data.id = this.props.local_rca.id;\r\n        delete rca_data.modal;\r\n\r\n        console.log(rca_data);\r\n\r\n        this.props.updateRca(rca_data);\r\n\r\n        this.toggle();\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState(prevState => ({\r\n            modal: !prevState.modal\r\n        }));\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.toggle();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button color=\"primary\" size=\"sm\" onClick={this.toggle}>\r\n                    View\r\n                </Button>\r\n                <Modal\r\n                    scrollable={true}\r\n                    className=\"modal-xl modal-main\"\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n                    <Form className=\"modal-content\">\r\n                        <ModalHeader\r\n                            className=\"modal-header\"\r\n                            toggle={this.handleCancel}\r\n                        >\r\n                            {this.state.surveyed_ticket} - Root Cause Analysis\r\n                        </ModalHeader>\r\n                        <ModalBody>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"agent\"\r\n                                        label_name=\"Agent\"\r\n                                        value={this.state.agent}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={true}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SelectInput\r\n                                        type=\"select\"\r\n                                        size=\"sm\"\r\n                                        attr=\"support_silo_issue_based\"\r\n                                        label_name=\"SILO based on issue\"\r\n                                        value={\r\n                                            this.state.support_silo_issue_based\r\n                                        }\r\n                                        controlFunc={this.handleChange}\r\n                                        options={this.props.skills}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"service\"\r\n                                        label_name=\"Service\"\r\n                                        value={this.state.service}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"service_component\"\r\n                                        label_name=\"Service Component\"\r\n                                        value={this.state.service_component}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"brief_description\"\r\n                                        label_name=\"Brief Description\"\r\n                                        value={this.state.brief_description}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"user_verbatim\"\r\n                                        label_name=\"User's verbatim\"\r\n                                        value={this.state.user_verbatim}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md={4}>\r\n                                    <FormGroup>\r\n                                        <Label size=\"sm\" for=\"dsat_cause\">\r\n                                            What caused DSAT?\r\n                                        </Label>\r\n                                        <Input\r\n                                            key=\"dsat_cause\"\r\n                                            bsSize=\"sm\"\r\n                                            type=\"select\"\r\n                                            name=\"dsat_cause\"\r\n                                            id=\"dsat_cause\"\r\n                                            onChange={this.handleChange}\r\n                                            value={this.state.dsat_cause}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">--select--</option>\r\n                                            {this.props.dsat_code1.map(item => (\r\n                                                <option\r\n                                                    key={item.name}\r\n                                                    value={item.name}\r\n                                                >\r\n                                                    {item.name}\r\n                                                </option>\r\n                                            ))}\r\n                                        </Input>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={4}>\r\n                                    <FormGroup>\r\n                                        <Label size=\"sm\" for=\"bb_driver_code2\">\r\n                                            \"BB Driver Code 2\"\r\n                                        </Label>\r\n                                        <Input\r\n                                            key=\"bb_driver_code2\"\r\n                                            bsSize=\"sm\"\r\n                                            type=\"select\"\r\n                                            name=\"bb_driver_code2\"\r\n                                            id=\"bb_driver_code2\"\r\n                                            onChange={this.handleChange}\r\n                                            value={this.state.bb_driver_code2}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">--select--</option>\r\n                                            {this.props.bb_driver_code2.map(\r\n                                                item => (\r\n                                                    <option\r\n                                                        key={item.name}\r\n                                                        value={item.name}\r\n                                                    >\r\n                                                        {item.name}\r\n                                                    </option>\r\n                                                )\r\n                                            )}\r\n                                        </Input>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={4}>\r\n                                    <FormGroup>\r\n                                        <Label size=\"sm\" for=\"bb_driver_code3\">\r\n                                            \"BB Driver Code 3\"\r\n                                        </Label>\r\n                                        <Input\r\n                                            key=\"bb_driver_code3\"\r\n                                            bsSize=\"sm\"\r\n                                            type=\"select\"\r\n                                            name=\"bb_driver_code3\"\r\n                                            id=\"bb_driver_code3\"\r\n                                            onChange={this.handleChange}\r\n                                            value={this.state.bb_driver_code2}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">--select--</option>\r\n                                            {this.props.bb_driver_code3.map(\r\n                                                item => (\r\n                                                    <option\r\n                                                        key={item.name}\r\n                                                        value={item.name}\r\n                                                    >\r\n                                                        {item.name}\r\n                                                    </option>\r\n                                                )\r\n                                            )}\r\n                                        </Input>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"actual_issue\"\r\n                                        label_name=\"Actual issue\"\r\n                                        value={this.state.actual_issue}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md={3}>\r\n                                    <SelectInput\r\n                                        type=\"select\"\r\n                                        size=\"sm\"\r\n                                        attr=\"controllability\"\r\n                                        label_name=\"Controllability\"\r\n                                        value={this.state.controllability}\r\n                                        controlFunc={this.handleChange}\r\n                                        options={[\r\n                                            {\r\n                                                name: \"ITSD Controllable\"\r\n                                            },\r\n                                            {\r\n                                                name: \"Non ITSD Controllable\"\r\n                                            }\r\n                                        ]}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <SelectInput\r\n                                        type=\"select\"\r\n                                        size=\"sm\"\r\n                                        attr=\"accountable_team\"\r\n                                        label_name=\"Accountable Team\"\r\n                                        value={this.state.accountable_team}\r\n                                        controlFunc={this.handleChange}\r\n                                        options={this.props.accountable_team}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <SelectInput\r\n                                        type=\"select\"\r\n                                        size=\"sm\"\r\n                                        attr=\"q1_answer\"\r\n                                        label_name=\"Q1 Answer?\"\r\n                                        value={this.state.q1_answer}\r\n                                        controlFunc={this.handleChange}\r\n                                        options={[\r\n                                            {\r\n                                                name: \"Yes\"\r\n                                            },\r\n                                            {\r\n                                                name: \"No\"\r\n                                            }\r\n                                        ]}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <SelectInput\r\n                                        type=\"select\"\r\n                                        size=\"sm\"\r\n                                        attr=\"contacted_customer\"\r\n                                        label_name=\"Informed user?\"\r\n                                        value={this.state.contacted_customer}\r\n                                        controlFunc={this.handleChange}\r\n                                        options={[\r\n                                            {\r\n                                                name: \"Yes\"\r\n                                            },\r\n                                            {\r\n                                                name: \"No\"\r\n                                            }\r\n                                        ]}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"summary\"\r\n                                        label_name=\"Summary\"\r\n                                        value={this.state.summary}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"obs_in_call\"\r\n                                        label_name=\"Place only relevant information in\r\n                                        the call\"\r\n                                        value={this.state.obs_in_call}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"accountable_entity\"\r\n                                        label_name=\"Accountable Entity\"\r\n                                        value={this.state.accountable_entity}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"overall_reason_dsat\"\r\n                                        label_name=\"Place overall reason for DSAT\"\r\n                                        value={this.state.overall_reason_dsat}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md={2}>\r\n                                    <SelectInput\r\n                                        type=\"select\"\r\n                                        size=\"sm\"\r\n                                        attr=\"coaching\"\r\n                                        label_name=\"Coahing done?\"\r\n                                        value={this.state.coaching}\r\n                                        controlFunc={this.handleChange}\r\n                                        options={[\r\n                                            {\r\n                                                name: \"true\"\r\n                                            },\r\n                                            {\r\n                                                name: \"false\"\r\n                                            }\r\n                                        ]}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={10}>\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"sm\"\r\n                                        attr=\"corrective_actions\"\r\n                                        label_name=\"Corrective actions\"\r\n                                        value={this.state.corrective_actions}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button color=\"primary\" onClick={this.handleSubmit}>\r\n                                Update\r\n                            </Button>{\" \"}\r\n                            <Button\r\n                                color=\"secondary\"\r\n                                onClick={this.handleCancel}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    agent: state.surveys.agent,\r\n    survey: state.surveys.survey,\r\n    skills: state.surveys.skills,\r\n    dsat_code1: state.surveys.dsat_code1,\r\n    bb_driver_code2: state.surveys.bb_driver_code2,\r\n    bb_driver_code3: state.surveys.bb_driver_code3,\r\n    accountable_team: state.surveys.teams\r\n});\r\n\r\nexport default connect(mapStateToProps, { updateRca })(RcaEditForm);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport ReactTable from \"react-table\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button } from \"reactstrap\";\r\nimport RcaEditForm from \"../components/RcaEditForm\";\r\nimport {\r\n    getSurvey,\r\n    deleteRca,\r\n    getAgentDetails\r\n} from \"../../../actions/surveyActions\";\r\n\r\nclass RCATable extends Component {\r\n    state = {\r\n        filter: false,\r\n        filtered: [],\r\n        sortedData: []\r\n    };\r\n\r\n    filterToggle = () => {\r\n        this.setState((state, props) => ({\r\n            filter: !state.filter\r\n        }));\r\n    };\r\n\r\n    handleDelete = data => {\r\n        this.props.deleteRca(data);\r\n    };\r\n\r\n    handleClick = data => {\r\n        this.props.getSurvey(data);\r\n    };\r\n\r\n    resetFields = () => {\r\n        this.setState({ filtered: [], sortedData: [] });\r\n    };\r\n\r\n    render() {\r\n        if (!Array.isArray(this.props.rcas) || !this.props.rcas.length) {\r\n            return <Fragment></Fragment>;\r\n        } else {\r\n            let rcas = this.props.rcas.map(item => {\r\n                return {\r\n                    ...item,\r\n                    dsat_cause: item.dsat_cause.name,\r\n                    bb_driver_code2: item.bb_driver_code2.name,\r\n                    bb_driver_code3: item.bb_driver_code3.name\r\n                };\r\n            });\r\n\r\n            const rca_headers = Object.keys(this.props.rcas[0]);\r\n\r\n            let headers = rca_headers.map(val =>\r\n                Object.assign({ [\"Header\"]: val, [\"accessor\"]: val })\r\n            );\r\n            const buttons = {\r\n                Header: \"Actions\",\r\n                filterable: false,\r\n                Cell: cellprops => (\r\n                    <Fragment>\r\n                        <div className=\"btn-group\">\r\n                            <RcaEditForm local_rca={cellprops.original} />\r\n                        </div>\r\n                        <Button\r\n                            className=\"ml-1\"\r\n                            color=\"danger\"\r\n                            size=\"sm\"\r\n                            onClick={() =>\r\n                                this.handleDelete(cellprops.original)\r\n                            }\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </Fragment>\r\n                ),\r\n                width: 200\r\n            };\r\n            const columns = [buttons, ...headers];\r\n            return (\r\n                <Fragment>\r\n                    <h5>RCA Table</h5>\r\n                    <Button\r\n                        className=\"mr-2 mb-2 btn-bb\"\r\n                        onClick={this.filterToggle}\r\n                    >\r\n                        Filter\r\n                    </Button>\r\n                    <Button\r\n                        className=\"mr-2 mb-2 btn-bb\"\r\n                        onClick={this.resetFields}\r\n                    >\r\n                        Reset\r\n                    </Button>\r\n                    <ReactTable\r\n                        className=\"-striped -highlight\"\r\n                        data={rcas}\r\n                        columns={columns}\r\n                        minRows={5}\r\n                        defaultPageSize={5}\r\n                        filterable={this.state.filter}\r\n                        style={{ backgroundColor: \"white\" }}\r\n                    />\r\n                </Fragment>\r\n            );\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    rcas: state.surveys.rcas\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getSurvey,\r\n    deleteRca,\r\n    getAgentDetails\r\n})(RCATable);\r\n","export const keys = [\r\n    \"reference_number\",\r\n    \"callback_reference_number\",\r\n    \"related_incident_record\",\r\n    \"company_name\",\r\n    \"phone_number\",\r\n    \"site_location\",\r\n    \"city\",\r\n    \"state\",\r\n    \"user_location\",\r\n    \"first_name\",\r\n    \"last_name\",\r\n    \"VIP\",\r\n    \"customer_email_address\",\r\n    \"date_time\",\r\n    \"origination_source\",\r\n    \"call_type\",\r\n    \"service_type\",\r\n    \"service\",\r\n    \"service_component\",\r\n    \"assignment_group\",\r\n    \"q1\",\r\n    \"q2\",\r\n    \"q2a\",\r\n    \"q3\",\r\n    \"q3a\",\r\n    \"q4\",\r\n    \"q5\",\r\n    \"q6\",\r\n    \"average_score\",\r\n    \"owner_name\",\r\n    \"operator_lan_id\",\r\n    \"fulfillment\",\r\n    \"follow_up_comments\",\r\n    \"originating_ticket_description\",\r\n    \"budi_bu\",\r\n    \"budi_lv7\",\r\n    \"bu_catg\",\r\n    \"date_issued\",\r\n    \"bottombox\",\r\n    \"completed\",\r\n    \"uploaded_by\",\r\n    \"date_uploaded\"\r\n];\r\n","import React, { Component, Fragment } from \"react\";\r\nimport XLSX from \"xlsx\";\r\nimport { SheetJSFT } from \"./helpers/types\";\r\nimport { keys } from \"./helpers/obj-keys\";\r\nimport { addSurveysBulk, getSurveys } from \"../../../actions/surveyActions\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ReactTable from \"react-table\";\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    Input,\r\n    NavLink\r\n} from \"reactstrap\";\r\n\r\nimport { toggle } from \"../../../actions/modalToggleActions\";\r\n\r\nclass UploadDataModal extends Component {\r\n    state = {\r\n        file: {},\r\n        data: [],\r\n        isStaged: false,\r\n        keys: keys.filter(\r\n            item =>\r\n                item != \"uploaded_by\" &&\r\n                item != \"date_uploaded\" &&\r\n                item != \"completed\"\r\n        ),\r\n        modal: false\r\n    };\r\n\r\n    handleChange = e => {\r\n        const files = e.target.files;\r\n\r\n        if (files && files[0]) this.setState({ file: files[0] });\r\n\r\n        const reader = new FileReader();\r\n        const rABS = !!reader.readAsBinaryString;\r\n\r\n        reader.onload = e => {\r\n            /* Parse data */\r\n            const bstr = e.target.result;\r\n\r\n            const wb = XLSX.read(bstr, {\r\n                type: rABS ? \"binary\" : \"array\",\r\n                bookVBA: true,\r\n                sheetStubs: true\r\n            });\r\n            /* Get first worksheet */\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_json(ws, {\r\n                defval: \"\",\r\n                header: this.state.keys,\r\n                range: 1\r\n            });\r\n\r\n            let filtered_data = data.filter(\r\n                item =>\r\n                    !this.props.surveys\r\n                        .map(survey => survey.reference_number)\r\n                        .includes(item.reference_number)\r\n            );\r\n\r\n            /* Update state */\r\n\r\n            this.setState(\r\n                {\r\n                    data: filtered_data.map(item => ({\r\n                        ...item,\r\n                        uploaded_by: this.props.user.email\r\n                    })),\r\n                    isStaged: !this.state.isStaged\r\n                },\r\n                () => {\r\n                    console.log(JSON.stringify(this.state.data, null, 2));\r\n                }\r\n            );\r\n\r\n            // this.setState({ data: data, isStaged: !this.state.isStaged });\r\n        };\r\n\r\n        if (rABS) {\r\n            reader.readAsBinaryString(files[0]);\r\n        } else {\r\n            reader.readAsArrayBuffer(files[0]);\r\n        }\r\n    };\r\n\r\n    handleFile = e => {\r\n        e.preventDefault();\r\n\r\n        this.props.addSurveysBulk(this.state.data);\r\n\r\n        this.toggle();\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState(\r\n            (state, props) => state.isStaged && { isStaged: !state.isStaged }\r\n        );\r\n        this.toggle();\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState((state, props) => ({ modal: !state.modal }));\r\n    };\r\n\r\n    render() {\r\n        const headers = this.props.headers.map(val =>\r\n            Object.assign({\r\n                [\"Header\"]: val,\r\n                [\"accessor\"]: val\r\n            })\r\n        );\r\n        const columns = [...headers];\r\n        return (\r\n            <Fragment>\r\n                <NavLink\r\n                    style={{ textAlign: \"center\", color: \"white\" }}\r\n                    className=\"sidebar-navlink\"\r\n                    onClick={this.toggle}\r\n                >\r\n                    <i className=\"fa fa-upload fa-2x\" />\r\n                    <p style={{ fontSize: \"12px\" }}>Upload Data</p>\r\n                </NavLink>\r\n                {/* <Button\r\n                    color=\"dark\"\r\n                    size=\"md\"\r\n                    onClick={this.toggle}\r\n                    style={{ color: \"#ffed00\", padding: \"7px 30px\" }}\r\n                >\r\n                    Upload Data\r\n                </Button> */}\r\n                <Modal\r\n                    scrollable={true}\r\n                    className=\"modal-lg modal-main\"\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n                    <Form className=\"modal-content\">\r\n                        <ModalHeader\r\n                            toggle={this.toggle}\r\n                            className=\"modal-header\"\r\n                        >\r\n                            Upload Surveys\r\n                        </ModalHeader>\r\n                        <ModalBody>\r\n                            <Input\r\n                                type=\"file\"\r\n                                name=\"selectedFile\"\r\n                                className=\"form-control-file\"\r\n                                id=\"file\"\r\n                                accept={SheetJSFT}\r\n                                onChange={this.handleChange}\r\n                            />\r\n\r\n                            {this.state.isStaged && (\r\n                                <ReactTable\r\n                                    className=\"-striped -highlight\"\r\n                                    data={this.state.data}\r\n                                    columns={columns}\r\n                                    minRows={10}\r\n                                    defaultPageSize={10}\r\n                                />\r\n                            )}\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button\r\n                                className=\"btn-submit\"\r\n                                onClick={this.handleFile}\r\n                            >\r\n                                Send\r\n                            </Button>{\" \"}\r\n                            <Button\r\n                                className=\"btn-submit\"\r\n                                onClick={this.handleCancel}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    headers: state.surveys.headers,\r\n    user: state.auth.user,\r\n    surveys: state.surveys.surveys\r\n});\r\n\r\nexport default connect(mapStateToProps, { addSurveysBulk, toggle, getSurveys })(\r\n    UploadDataModal\r\n);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Table } from \"reactstrap\";\r\n\r\nclass DataTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { table: props.table };\r\n    }\r\n\r\n    table = table => (\r\n        <Table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {table.map(item => (\r\n                    <tr key={item.name}>\r\n                        <td>{item.name}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n\r\n    render() {\r\n        return <Fragment>{this.table(this.props.table)}</Fragment>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    teamleads: state.surveys.teamleads,\r\n    skills: state.surveys.skills\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(DataTable);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n    Modal,\r\n    Form,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Row,\r\n    Col,\r\n    ModalFooter,\r\n    Button\r\n} from \"reactstrap\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    addTeam,\r\n    addSkill,\r\n    addTeamLead,\r\n    addDsatCode1,\r\n    addBbDriverCode2,\r\n    addBbDriverCode3\r\n} from \"../../../actions/surveyActions\";\r\nimport SingleInput from \"../rca/components/SingleInput\";\r\n\r\nimport DataTable from \"./DataTable\";\r\n\r\nclass SimpleDataInput extends Component {\r\n    state = {\r\n        modal: false,\r\n        name: \"\"\r\n    };\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        this.setState((state, props) => ({\r\n            modal: newProps.modal\r\n        }));\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState((state, props) => ({ modal: false, name: \"\" }));\r\n        this.props.onModalChange(false);\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    // identifier = e.target.name.id\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const data = { name: this.state.name };\r\n\r\n        console.log(e.target.name.id);\r\n\r\n        switch (e.target.name.id) {\r\n            case \"addSkill\":\r\n                this.props.addSkill(data);\r\n                // console.log(e.target.name.id)\r\n                break;\r\n            case \"addTeamLead\":\r\n                this.props.addTeamLead(data);\r\n                // console.log(e.target.name.id)\r\n                break;\r\n            case \"addDsatCode1\":\r\n                this.props.addDsatCode1(data);\r\n                // console.log(e.target.name.id)\r\n                break;\r\n            case \"addBbDriverCode2\":\r\n                this.props.addBbDriverCode2(data);\r\n                // console.log(e.target.name.id)\r\n                break;\r\n            case \"addBbDriverCode3\":\r\n                this.props.addBbDriverCode3(data);\r\n                // console.log(e.target.name.id)\r\n                break;\r\n            case \"addTeam\":\r\n                this.props.addTeam(data);\r\n                // console.log(e.target.name.id)\r\n                break;\r\n            default:\r\n                return console.log(\"not added\");\r\n        }\r\n\r\n        this.toggle();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Modal\r\n                    scrollable={true}\r\n                    className=\"modal-md modal-main\"\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n                    <Form\r\n                        className=\"modal-content\"\r\n                        onSubmit={this.handleSubmit}\r\n                    >\r\n                        <ModalHeader\r\n                            toggle={this.toggle}\r\n                            className=\"modal-header\"\r\n                            // this.props.label_name\r\n                        >\r\n                            {this.props.label_name}\r\n                        </ModalHeader>\r\n                        <ModalBody>\r\n                            <Row>\r\n                                <Col className=\"mx-auto\">\r\n                                    <SingleInput\r\n                                        type=\"text\"\r\n                                        size=\"md\"\r\n                                        attr=\"name\"\r\n                                        // this.props.data_name\r\n                                        id={this.props.data_name}\r\n                                        label_name=\"Name\"\r\n                                        value={this.state.name}\r\n                                        controlFunc={this.handleChange}\r\n                                        readOnly={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <DataTable\r\n                                        table={\r\n                                            (this.props.data_name ==\r\n                                                \"addSkill\" &&\r\n                                                this.props.skills) ||\r\n                                            (this.props.data_name ==\r\n                                                \"addTeamLead\" &&\r\n                                                this.props.teamleads) ||\r\n                                            (this.props.data_name ==\r\n                                                \"addTeam\" &&\r\n                                                this.props.teams)\r\n                                        }\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                onSubmit={this.handleSubmit}\r\n                                className=\"btn-submit\"\r\n                            >\r\n                                Submit\r\n                            </Button>{\" \"}\r\n                            <Button\r\n                                type=\"button\"\r\n                                className=\"btn-submit\"\r\n                                onClick={this.toggle}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    teamleads: state.surveys.teamleads,\r\n    teams: state.surveys.teams,\r\n    skills: state.surveys.skills\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    addTeam,\r\n    addSkill,\r\n    addTeamLead,\r\n    addDsatCode1,\r\n    addBbDriverCode2,\r\n    addBbDriverCode3\r\n})(SimpleDataInput);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Nav, NavItem, NavLink, Button } from \"reactstrap\";\r\nimport UploadDataModal from \"./bottombox/upload-data/UploadDataModal\";\r\nimport SimpleDataInput from \"./bottombox/components/SimpleDataInput\";\r\nimport {\r\n    agentViewCollapse,\r\n    bottomboxDriverViewCollapse,\r\n    surveyViewCollapse,\r\n    dashboardViewCollapse\r\n} from \"../actions/surveyActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// Add TeamLead, DSAT_Code1, BB_Driver_Code2, BB_Driver_Code3, Team\r\n\r\nclass SideBar extends Component {\r\n    state = {\r\n        modal: false,\r\n        table: {}\r\n    };\r\n\r\n    handleClick = table => {\r\n        this.setState((state, props) => ({ modal: !state.modal, table }));\r\n    };\r\n\r\n    handleModalState = x => {\r\n        this.setState({ modal: x });\r\n    };\r\n\r\n    handleCollapse = data => {\r\n        if (data === \"agent_view\") {\r\n            this.props.agentViewCollapse();\r\n        } else if (data === \"bottombox_driver_view\") {\r\n            this.props.bottomboxDriverViewCollapse();\r\n        } else if (data === \"survey_view\") {\r\n            this.props.surveyViewCollapse();\r\n        } else if (data === \"dashboard\") {\r\n            this.props.dashboardViewCollapse();\r\n        }\r\n    };\r\n\r\n    checkActive = () => {\r\n        const {\r\n            agent_view_collapse,\r\n            bottombox_view_collapse,\r\n            survey_view_collapse\r\n        } = this.props;\r\n\r\n        if (agent_view_collapse === true) {\r\n            return {\r\n                fontWeight: \"bold\",\r\n                color: \"white\"\r\n            };\r\n        } else if (bottombox_view_collapse === true) {\r\n            return {\r\n                fontWeight: \"bold\",\r\n                color: \"white\"\r\n            };\r\n        } else if (survey_view_collapse === true) {\r\n            return {\r\n                fontWeight: \"bold\",\r\n                color: \"white\"\r\n            };\r\n        }\r\n    };\r\n\r\n    style = { textAlign: \"center\", color: \"white\" };\r\n\r\n    render() {\r\n        const tables = [\r\n            {\r\n                label_name: \"Add Agent Skill\",\r\n                data_name: \"addSkill\"\r\n            },\r\n            {\r\n                label_name: \"Add Team Lead\",\r\n                data_name: \"addTeamLead\"\r\n            },\r\n\r\n            {\r\n                label_name: \"Add Team\",\r\n                data_name: \"addTeam\"\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <Nav vertical>\r\n                <NavItem\r\n                    style={{\r\n                        backgroundColor: \"black\",\r\n                        color: \"white\",\r\n                        paddingTop: \"10px\",\r\n                        paddingLeft: \"14px\"\r\n                    }}\r\n                ></NavItem>\r\n\r\n                <NavItem className=\"sidebar-navitem\">\r\n                    <NavLink\r\n                        className=\"sidebar-navlink\"\r\n                        onClick={() => this.handleCollapse(\"dashboard\")}\r\n                        style={this.style}\r\n                    >\r\n                        <i\r\n                            style={{\r\n                                color: !this.props.dashboard_view_collapse\r\n                                    ? \"white\"\r\n                                    : \"#ffed00\"\r\n                            }}\r\n                            className=\"fa fa-chart-area fa-2x\"\r\n                        />{\" \"}\r\n                        <p style={{ fontSize: \"12px\" }}>Dashboard</p>\r\n                    </NavLink>\r\n                    <NavLink\r\n                        className=\"sidebar-navlink\"\r\n                        onClick={() => this.handleCollapse(\"survey_view\")}\r\n                        style={this.style}\r\n                    >\r\n                        <i\r\n                            style={{\r\n                                color: !this.props.survey_view_collapse\r\n                                    ? \"white\"\r\n                                    : \"#ffed00\"\r\n                            }}\r\n                            className=\"fa fa-table fa-2x\"\r\n                        />{\" \"}\r\n                        <p style={{ fontSize: \"12px\" }}>Survey View</p>\r\n                    </NavLink>\r\n                    <NavLink\r\n                        className=\"sidebar-navlink\"\r\n                        onClick={() => this.handleCollapse(\"agent_view\")}\r\n                        style={this.style}\r\n                    >\r\n                        <i\r\n                            style={{\r\n                                color: !this.props.agent_view_collapse\r\n                                    ? \"white\"\r\n                                    : \"#ffed00\"\r\n                            }}\r\n                            className=\"fa fa-users fa-2x\"\r\n                        />\r\n                        <p style={{ fontSize: \"12px\" }}>Agent View</p>\r\n                    </NavLink>\r\n                    <NavLink\r\n                        className=\"sidebar-navlink\"\r\n                        onClick={() =>\r\n                            this.handleCollapse(\"bottombox_driver_view\")\r\n                        }\r\n                        style={this.style}\r\n                    >\r\n                        <i\r\n                            style={{\r\n                                color: !this.props.bottombox_view_collapse\r\n                                    ? \"white\"\r\n                                    : \"#ffed00\"\r\n                            }}\r\n                            className=\"fa fa-list-ol fa-2x\"\r\n                        />\r\n                        <p style={{ fontSize: \"12px\" }}>Drivers View</p>\r\n                    </NavLink>\r\n                    <UploadDataModal />\r\n                    {tables.map(table => (\r\n                        <Fragment key={table.data_name}>\r\n                            <NavLink\r\n                                className=\"sidebar-navlink\"\r\n                                style={this.style}\r\n                                onClick={() => this.handleClick(table)}\r\n                            >\r\n                                <i className=\"fa fa-plus fa-2x\" />\r\n                                <p style={{ fontSize: \"12px\" }}>\r\n                                    {table.label_name}\r\n                                </p>\r\n                            </NavLink>\r\n                            <SimpleDataInput\r\n                                data_name={this.state.table.data_name}\r\n                                label_name={this.state.table.label_name}\r\n                                modal={this.state.modal}\r\n                                onModalChange={this.handleModalState}\r\n                            />\r\n                            {/* add data_name=\"addSkill\" and label_name=\"Agent Skill\" */}\r\n                        </Fragment>\r\n                    ))}\r\n                </NavItem>\r\n            </Nav>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    agent_view_collapse: state.surveys.agent_view_collapse,\r\n    bottombox_view_collapse: state.surveys.bottombox_view_collapse,\r\n    survey_view_collapse: state.surveys.survey_view_collapse,\r\n    dashboard_view_collapse: state.surveys.dashboard_view_collapse\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    agentViewCollapse,\r\n    bottomboxDriverViewCollapse,\r\n    surveyViewCollapse,\r\n    dashboardViewCollapse\r\n})(SideBar);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport moment from \"moment\";\r\n\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport \"chartjs-plugin-datalabels\";\r\nimport { FormGroup, Label, Input, Row, Col } from \"reactstrap\";\r\n\r\nimport {\r\n    updateChartData,\r\n    updatedSelectedMonth,\r\n    updatedSelectedWeek,\r\n    updatedSelectedYear,\r\n    updateAgentChartData\r\n} from \"../../../../actions/surveyActions\";\r\n\r\n// default by month > select month > by week\r\n\r\nclass StackedBarChart extends Component {\r\n    state = {\r\n        data: {},\r\n        monthSelection: [],\r\n        weekSelection: [],\r\n        selectedMonth: this.props.selectedMonth,\r\n        selectedWeek: this.props.selectedWeek,\r\n        selectedYear: \"\",\r\n        curr_year: \"\",\r\n        curr_month: \"\",\r\n        curr_month_string: \"\",\r\n        days_per_week: [],\r\n        selectedMonth_chart_data: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        let curr = new Date();\r\n\r\n        let curr_year = curr.getFullYear();\r\n        let curr_month = curr.getMonth() + 1;\r\n\r\n        let monthRangeInt = Array.from(new Array(curr_month), (x, i) => i + 1);\r\n\r\n        let monthSelection = monthRangeInt.map(item => {\r\n            let monthName = new Intl.DateTimeFormat(\"en-US\", { month: \"short\" })\r\n                .format;\r\n            let name = monthName(new Date(`${curr_year}-${item}-01`));\r\n            return { string: name, int: item };\r\n        });\r\n\r\n        this.setState({\r\n            monthSelection,\r\n            curr_year,\r\n            curr_month\r\n            // curr_month_string: monthSelection[10].string\r\n        });\r\n    }\r\n\r\n    get_data = (filtered_list, year) => {\r\n        let curr = new Date();\r\n\r\n        let curr_year = !year ? curr.getFullYear() : year;\r\n        let curr_month = curr.getMonth() + 1;\r\n\r\n        let monthRangeInt = !year\r\n            ? Array.from(new Array(curr_month), (x, i) => i + 1)\r\n            : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12];\r\n\r\n        console.log(monthRangeInt);\r\n\r\n        // filter data per month\r\n        let surveyCountPerMonth = monthRangeInt.map(month => {\r\n            let filteredSurveyPerMonth = filtered_list.filter(\r\n                survey =>\r\n                    new Date(survey.date_issued).getMonth() + 1 == month &&\r\n                    new Date(survey.date_issued).getFullYear() == curr_year\r\n            );\r\n\r\n            let monthName = new Intl.DateTimeFormat(\"en-US\", { month: \"short\" })\r\n                .format;\r\n            let name = monthName(new Date(`${curr_year}-${month}-01`));\r\n\r\n            return {\r\n                [name]: filteredSurveyPerMonth\r\n            };\r\n        });\r\n\r\n        return surveyCountPerMonth;\r\n    };\r\n\r\n    get_data_by_month = (filtered_list, month) => {\r\n        let y = !this.state.selectedYear\r\n            ? new Date().getFullYear()\r\n            : this.state.selectedYear;\r\n\r\n        //  if date === item.start %% item\r\n        let days_per_week = this.getWeeksInMonth(month);\r\n        // console.log(days_per_week);\r\n\r\n        this.setState({\r\n            days_per_week\r\n        });\r\n\r\n        let data_per_week = [];\r\n\r\n        days_per_week.forEach((item, i) => {\r\n            let m = filtered_list.filter(survey => {\r\n                let date = new Date(survey.date_issued);\r\n\r\n                return (\r\n                    date >= new Date(`${y}-${month}-${item.start}`) &&\r\n                    date <= new Date(`${y}-${month}-${item.end}`)\r\n                );\r\n            });\r\n\r\n            let val = `Week ${i + 1}`;\r\n            return data_per_week.push({ [val]: m });\r\n        });\r\n        // console.log(data_per_week);\r\n        return data_per_week;\r\n    };\r\n\r\n    getWeeksInMonth = (month, year) => {\r\n        let y = !year ? new Date().getFullYear() : year;\r\n\r\n        const weeks = [];\r\n        const firstDay = new Date(y, month - 1, 1);\r\n        const lastDay = new Date(y, month, 0);\r\n        const daysInMonth = lastDay.getDate();\r\n        let dayOfWeek = firstDay.getDay();\r\n        let start = \"\";\r\n        let end = \"\";\r\n\r\n        for (let i = 1; i < daysInMonth + 1; i++) {\r\n            if (dayOfWeek === 0 || i === 1) {\r\n                start = i;\r\n            }\r\n\r\n            if (dayOfWeek === 6 || i === daysInMonth) {\r\n                end = i;\r\n\r\n                if (start != end) {\r\n                    weeks.push({\r\n                        start: start,\r\n                        end: end\r\n                    });\r\n                }\r\n            }\r\n\r\n            dayOfWeek = new Date(y, month - 1, i).getDay();\r\n        }\r\n\r\n        return weeks;\r\n    };\r\n\r\n    options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                    stacked: true\r\n                }\r\n            ],\r\n            yAxes: [\r\n                {\r\n                    stacked: true\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n\r\n        if (e.target.name === \"selectedYear\") {\r\n            let new_data = this.get_data(\r\n                this.props.filtered_list,\r\n                e.target.value\r\n            );\r\n\r\n            let curr = new Date();\r\n\r\n            let curr_year = curr.getFullYear();\r\n            let curr_month = curr.getMonth() + 1;\r\n\r\n            let monthRangeInt =\r\n                e.target.value == new Date().getFullYear()\r\n                    ? Array.from(new Array(curr_month), (x, i) => i + 1)\r\n                    : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\n            let monthSelection = monthRangeInt.map(item => {\r\n                let monthName = new Intl.DateTimeFormat(\"en-US\", {\r\n                    month: \"short\"\r\n                }).format;\r\n                let name = monthName(new Date(`${curr_year}-${item}-01`));\r\n                return { string: name, int: item };\r\n            });\r\n\r\n            this.setState({\r\n                monthSelection\r\n            });\r\n\r\n            if (this.props.agent_chart_data) {\r\n                this.props.updateAgentChartData(new_data);\r\n            }\r\n            this.props.updateChartData(new_data);\r\n            let defaultSelectedMonth = \"\";\r\n            this.props.updatedSelectedMonth(defaultSelectedMonth);\r\n            this.props.updatedSelectedYear(e.target.value);\r\n        }\r\n\r\n        if (e.target.name === \"selectedMonth\") {\r\n            this.props.updatedSelectedMonth(e.target.value);\r\n\r\n            let selectedMonth_chart_data = this.get_data_by_month(\r\n                this.props.filtered_list,\r\n                e.target.value\r\n            );\r\n            if (this.props.agent_chart_data) {\r\n                this.props.updateAgentChartData(selectedMonth_chart_data);\r\n            }\r\n            this.props.updateChartData(selectedMonth_chart_data);\r\n            this.setState({\r\n                weekSelection: selectedMonth_chart_data.map(item =>\r\n                    Object.keys(item)\r\n                ),\r\n                selectedMonth_chart_data\r\n            });\r\n\r\n            let resetWeek = \"\";\r\n\r\n            this.props.updatedSelectedWeek(resetWeek);\r\n\r\n            if (e.target.value === \"reset\") {\r\n                if (this.props.agent_chart_data) {\r\n                    this.props.updateAgentChartData(\r\n                        this.get_data(this.props.filtered_list)\r\n                    );\r\n                }\r\n                this.props.updateChartData(\r\n                    this.get_data(this.props.filtered_list)\r\n                );\r\n            }\r\n        }\r\n\r\n        if (e.target.name === \"selectedWeek\") {\r\n            if (e.target.value === \"reset\") {\r\n                let reset_week = \"\";\r\n                this.props.updatedSelectedWeek(reset_week);\r\n                if (this.props.agent_chart_data) {\r\n                    this.props.updateAgentChartData(\r\n                        this.get_data_by_month(\r\n                            this.props.filtered_list,\r\n                            this.props.selectedMonth\r\n                        )\r\n                    );\r\n                }\r\n\r\n                this.props.updateChartData(\r\n                    this.get_data_by_month(\r\n                        this.props.filtered_list,\r\n                        this.props.selectedMonth\r\n                    )\r\n                );\r\n            } else {\r\n                this.props.updatedSelectedWeek(e.target.value);\r\n                const { selectedMonth, selectedYear } = this.state;\r\n                const { selectedIndex } = e.target.options;\r\n                const chart_data = this.state.selectedMonth_chart_data;\r\n                let week_data = chart_data[selectedIndex - 1];\r\n                let days_of_selectedWeek = this.state.days_per_week[\r\n                    selectedIndex - 1\r\n                ];\r\n                //   console.log(Object.values(week_data)[0]);\r\n                //   console.log(days_of_selectedWeek);\r\n\r\n                let selectedWeek_dates = [];\r\n\r\n                let y = !selectedYear ? new Date().getFullYear() : selectedYear;\r\n\r\n                for (\r\n                    let i = days_of_selectedWeek.start;\r\n                    i <= days_of_selectedWeek.end;\r\n                    i++\r\n                ) {\r\n                    let newDate = moment(`${y},${selectedMonth},${i}`).format(\r\n                        \"YYYY-MM-DD\"\r\n                    );\r\n                    //   console.log(`${newDate} = ${y},${selectedMonth},${i}`);\r\n                    selectedWeek_dates.push(newDate);\r\n                }\r\n\r\n                // console.log(selectedWeek_dates);\r\n\r\n                let week_data_array = Object.values(week_data)[0];\r\n\r\n                let selectedWeek_data = selectedWeek_dates.map(item => {\r\n                    let x = week_data_array.filter(survey => {\r\n                        // console.log(`${survey.date_issued} === ${item}`);\r\n                        return survey.date_issued === item;\r\n                    });\r\n                    return { [item]: x };\r\n                });\r\n\r\n                // console.log(selectedWeek_data);\r\n                if (this.props.agent_chart_data) {\r\n                    this.props.updateAgentChartData(selectedWeek_data);\r\n                }\r\n\r\n                this.props.updateChartData(selectedWeek_data);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Data entry this.props.filtered_list\r\n\r\n    // GET number days in a month\r\n    // console.log(new Date(2019, filter, 0).getDate())\r\n\r\n    // GET number of weeks in a month\r\n    // console.log(new Date(2019, filter - 1, 1).getDay())\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Row className=\"mx-1\">\r\n                    <Col>\r\n                        <FormGroup>\r\n                            <Label size=\"sm\" for=\"selectedYear\">\r\n                                Select Year\r\n                            </Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                id=\"selectedYear\"\r\n                                name=\"selectedYear\"\r\n                                value={this.state.selectedYear || \"\"}\r\n                                onChange={this.handleChange}\r\n                            >\r\n                                {this.props.yearSelection.map((item, i) => (\r\n                                    <option key={i} value={item}>\r\n                                        {item}\r\n                                    </option>\r\n                                ))}\r\n                            </Input>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormGroup>\r\n                            <Label size=\"sm\" for=\"selectedMonth\">\r\n                                Select Month\r\n                            </Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                id=\"selectedMonth\"\r\n                                name=\"selectedMonth\"\r\n                                value={this.props.selectedMonth}\r\n                                onChange={this.handleChange}\r\n                            >\r\n                                <option value=\"reset\">----</option>\r\n\r\n                                {this.state.monthSelection.map(item => (\r\n                                    <option key={item.int} value={item.int}>\r\n                                        {item.string}\r\n                                    </option>\r\n                                ))}\r\n                            </Input>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    {this.props.selectedMonth &&\r\n                        this.props.selectedMonth != \"reset\" && (\r\n                            <Col>\r\n                                <FormGroup>\r\n                                    <Label size=\"sm\" for=\"selectedWeek\">\r\n                                        Select Week\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        id=\"selectedWeek\"\r\n                                        name=\"selectedWeek\"\r\n                                        value={this.props.selectedWeek}\r\n                                        onChange={this.handleChange}\r\n                                    >\r\n                                        <option value=\"reset\">----</option>\r\n\r\n                                        {this.state.weekSelection.map(\r\n                                            (item, i) => (\r\n                                                <option key={i} value={item}>\r\n                                                    {item}\r\n                                                </option>\r\n                                            )\r\n                                        )}\r\n                                    </Input>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        )}\r\n                </Row>\r\n\r\n                {this.props.chart_parent}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    surveys: state.surveys.surveys,\r\n    agent: state.surveys.agent,\r\n    filtered_agent_data: state.surveys.filtered_agent_data,\r\n    chart_data: state.surveys.chart_data,\r\n    agent_chart_data: state.surveys.agent_chart_data,\r\n    selectedMonth: state.surveys.selectedMonth,\r\n    selectedYear: state.surveys.selectedYear,\r\n    selectedWeek: state.surveys.selectedWeek,\r\n    yearSelection: state.surveys.yearSelection\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    updateChartData,\r\n    updatedSelectedMonth,\r\n    updatedSelectedWeek,\r\n    updatedSelectedYear,\r\n    updateAgentChartData\r\n})(StackedBarChart);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Card, CardHeader, CardBody, Row, Col } from \"reactstrap\";\r\n\r\nimport StackedBarChart from \"./Charts/StackedBarChart\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\nimport { defaults } from \"react-chartjs-2\";\r\n\r\ndefaults.global.defaultFontColor = \"white\";\r\ndefaults.global.legend.display = true;\r\ndefaults.global.title.position = \"top\";\r\n\r\nclass Dashboard extends Component {\r\n    state = {\r\n        monthSelection: [],\r\n        selectedMonth: \"\",\r\n        curr_year: \"\",\r\n        curr_month: \"\",\r\n        curr_month_string: \"\",\r\n        dateFilteredSurveys: [],\r\n        dateFilteredRcas: [],\r\n        noDataStyle: {\r\n            lineHeight: \"100px\",\r\n            textAlign: \"center\",\r\n            margin: \"auto\"\r\n        }\r\n    };\r\n    // componentDidMount() {\r\n    //     let curr = new Date();\r\n\r\n    //     let curr_year = curr.getFullYear();\r\n    //     let curr_month = curr.getMonth() + 1;\r\n\r\n    //     let monthRangeInt = Array.from(new Array(curr_month), (x, i) => i + 1);\r\n\r\n    //     let monthSelection = monthRangeInt.map(item => {\r\n    //         let monthName = new Intl.DateTimeFormat(\"en-US\", { month: \"short\" })\r\n    //             .format;\r\n    //         let name = monthName(new Date(`${curr_year}-${item}-01`));\r\n    //         return { string: name, int: item };\r\n    //     });\r\n\r\n    //     this.setState({\r\n    //         monthSelection,\r\n    //         curr_year,\r\n    //         curr_month,\r\n    //         curr_month_string: monthSelection[10].string,\r\n    //         dateFilteredSurveys: this.props.surveys.filter(\r\n    //             survey =>\r\n    //                 new Date(survey.date_issued).getMonth() + 1 == curr_month\r\n    //         ),\r\n    //         dateFilteredRcas: this.props.rcas.filter(\r\n    //             rca =>\r\n    //                 new Date(rca.survey_date_issued).getMonth() + 1 ==\r\n    //                 curr_month\r\n    //         )\r\n    //     });\r\n    // }\r\n\r\n    // console.log(nextState.selectedMonth)\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return this.state.selectedMonth === nextState.selectedMonth; // equals() is your implementation\r\n    // }\r\n\r\n    datasetKeyProvider = () => Math.random();\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n            dateFilteredSurveys: this.props.surveys.filter(\r\n                survey =>\r\n                    new Date(survey.date_issued).getMonth() + 1 ==\r\n                    e.target.value\r\n            ),\r\n            dateFilteredRcas: this.props.rcas.filter(\r\n                rca =>\r\n                    new Date(rca.survey_date_issued).getMonth() + 1 ==\r\n                    e.target.value\r\n            )\r\n        });\r\n    };\r\n\r\n    // FIX THIS!!!!\r\n\r\n    getListTopDrivers = () => {\r\n        return this.props.chart_data.map(item =>\r\n            Object.values(item)[0]\r\n                .filter(survey => survey.completed === true)\r\n                .map(item => item.dsat_cause.name)\r\n                .reduce((r, k) => {\r\n                    r[k] = 1 + r[k] || 1;\r\n                    return r;\r\n                }, {})\r\n        );\r\n    };\r\n\r\n    getTopDrivers = () => {\r\n        let dataset = this.props.chart_data.map(item =>\r\n            Object.values(item)[0]\r\n                .filter(survey => survey.completed === true)\r\n                .map(item => item.dsat_cause.name)\r\n                .reduce((r, k) => {\r\n                    r[k] = 1 + r[k] || 1;\r\n                    return r;\r\n                }, {})\r\n        );\r\n\r\n        return this.props.dsat_code1\r\n            .map((code, i) => {\r\n                let data = [];\r\n                dataset.forEach(x => {\r\n                    return Object.keys(x).includes(code.name)\r\n                        ? data.push(x[code.name])\r\n                        : data.push(0);\r\n                });\r\n\r\n                return {\r\n                    label: code.name,\r\n                    data: data,\r\n                    backgroundColor: !this.props.colors[i]\r\n                        ? this.getRandomColor()\r\n                        : this.props.colors[i]\r\n                };\r\n            })\r\n            .filter(item => item.data.reduce((total, num) => total - num) != 0);\r\n    };\r\n\r\n    getAccountableTeams = () => {\r\n        let dataset = this.props.chart_data.map(item =>\r\n            Object.values(item)[0]\r\n                .filter(survey => survey.completed === true)\r\n                .map(item => item.accountable_team)\r\n                .reduce((r, k) => {\r\n                    r[k] = 1 + r[k] || 1;\r\n                    return r;\r\n                }, {})\r\n        );\r\n\r\n        return this.props.teams\r\n            .map((team, i) => {\r\n                let data = [];\r\n                dataset.forEach(x => {\r\n                    return Object.keys(x).includes(team.name)\r\n                        ? data.push(x[team.name])\r\n                        : data.push(0);\r\n                });\r\n\r\n                return {\r\n                    label: team.name,\r\n                    data: data,\r\n                    backgroundColor: !this.props.colors[i]\r\n                        ? this.getRandomColor()\r\n                        : this.props.colors[i]\r\n                };\r\n            })\r\n            .filter(item => item.data.reduce((total, num) => total - num) != 0);\r\n    };\r\n\r\n    getSurveyPerSilo = () => {\r\n        let dataset = this.props.chart_data.map(item =>\r\n            Object.values(item)[0]\r\n                .filter(survey => survey.completed === true)\r\n                .map(item => item.support_silo_issue_based)\r\n                .reduce((r, k) => {\r\n                    r[k] = 1 + r[k] || 1;\r\n                    return r;\r\n                }, {})\r\n        );\r\n\r\n        return this.props.skills\r\n            .map((team, i) => {\r\n                let data = [];\r\n                dataset.forEach(x => {\r\n                    return Object.keys(x).includes(team.name)\r\n                        ? data.push(x[team.name])\r\n                        : data.push(0);\r\n                });\r\n\r\n                return {\r\n                    label: team.name,\r\n                    data: data,\r\n                    backgroundColor: !this.props.colors[i]\r\n                        ? this.getRandomColor()\r\n                        : this.props.colors[i]\r\n                };\r\n            })\r\n            .filter(item => item.data.reduce((total, num) => total - num) != 0);\r\n    };\r\n\r\n    getSPGControllability = () => {\r\n        let budi_bu_list = [\r\n            ...new Set(this.props.surveys.map(survey => survey.budi_bu))\r\n        ];\r\n        let dataset = this.props.chart_data.map(item =>\r\n            Object.values(item)[0]\r\n                .map(item => item.budi_bu)\r\n                .reduce((r, k) => {\r\n                    r[k] = 1 + r[k] || 1;\r\n                    return r;\r\n                }, {})\r\n        );\r\n\r\n        return budi_bu_list\r\n            .map((spg, i) => {\r\n                let data = [];\r\n                dataset.forEach(x => {\r\n                    return Object.keys(x).includes(spg)\r\n                        ? data.push(x[spg])\r\n                        : data.push(0);\r\n                });\r\n                // let color_length = this.props.color.length;\r\n                return {\r\n                    label: spg,\r\n                    data: data,\r\n                    backgroundColor: !this.props.colors[i]\r\n                        ? this.getRandomColor()\r\n                        : this.props.colors[i]\r\n                };\r\n            })\r\n            .filter(item => item.data.reduce((total, num) => total - num) != 0);\r\n    };\r\n\r\n    getRandomColor = () => {\r\n        var letters = \"0123456789ABCDEF\";\r\n        var color = \"#\";\r\n        for (var i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    };\r\n\r\n    chart_height = 350;\r\n\r\n    combinedData = this.props.surveys.map(survey => {\r\n        let x = this.props.rcas.filter(\r\n            rca => rca.surveyed_ticket === survey.reference_number\r\n        )[0];\r\n        return { ...survey, ...x };\r\n    });\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <h4>\r\n                            <strong>Dashboard</strong>\r\n                        </h4>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <StackedBarChart\r\n                            filtered_list={this.combinedData}\r\n                            chart_parent={\r\n                                <Fragment>\r\n                                    <Row className=\"mt-3 px-3\">\r\n                                        <Col className=\"py-4 mx-2 border border-white\">\r\n                                            <Line\r\n                                                datasetKeyProvider={\r\n                                                    this.datasetKeyProvider\r\n                                                }\r\n                                                data={{\r\n                                                    datasets: [\r\n                                                        {\r\n                                                            label:\r\n                                                                \"Bottombox %\",\r\n                                                            data: this.props.chart_data.map(\r\n                                                                item => {\r\n                                                                    let surveyCount = Object.values(\r\n                                                                        item\r\n                                                                    )[0].length;\r\n\r\n                                                                    let bottomboxCount = Object.values(\r\n                                                                        item\r\n                                                                    )[0].filter(\r\n                                                                        survey =>\r\n                                                                            survey.bottombox ===\r\n                                                                            1\r\n                                                                    ).length;\r\n\r\n                                                                    let percentage =\r\n                                                                        (bottomboxCount /\r\n                                                                            surveyCount) *\r\n                                                                        100;\r\n\r\n                                                                    return percentage.toFixed(\r\n                                                                        2\r\n                                                                    );\r\n                                                                }\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                \"white\",\r\n                                                            fill: true,\r\n                                                            backgroundColor:\r\n                                                                \"rgba(100, 255, 0, .8)\",\r\n\r\n                                                            borderColor: \"white\"\r\n                                                        }\r\n                                                    ],\r\n                                                    labels: this.props.chart_data.map(\r\n                                                        item =>\r\n                                                            Object.keys(item)[0]\r\n                                                    )\r\n                                                }}\r\n                                                options={{\r\n                                                    title: {\r\n                                                        display: true,\r\n                                                        text:\r\n                                                            \"Bottombox % Trend\",\r\n                                                        fontSize: \"20\"\r\n                                                    },\r\n                                                    tooltips: {\r\n                                                        mode: \"index\",\r\n                                                        intersect: false\r\n                                                    },\r\n                                                    hover: {\r\n                                                        mode: \"nearest\",\r\n                                                        intersect: true\r\n                                                    },\r\n                                                    responsive: true,\r\n                                                    maintainAspectRatio: false,\r\n\r\n                                                    scales: {\r\n                                                        xAxes: [],\r\n                                                        yAxes: [\r\n                                                            {\r\n                                                                ticks: {\r\n                                                                    callback: function(\r\n                                                                        value\r\n                                                                    ) {\r\n                                                                        return (\r\n                                                                            value +\r\n                                                                            \"%\"\r\n                                                                        );\r\n                                                                    }\r\n                                                                }\r\n                                                                // scaleLabel: {\r\n                                                                //     display: true,\r\n                                                                //     labelString:\r\n                                                                //         \"Percentage\"\r\n                                                                // }\r\n                                                            }\r\n                                                        ]\r\n                                                    },\r\n                                                    plugins: {\r\n                                                        datalabels: {\r\n                                                            anchor: \"end\",\r\n                                                            align: \"top\",\r\n                                                            // formatter: Math.round,\r\n                                                            font: {\r\n                                                                weight: \"bold\"\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                height={this.chart_height}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row className=\"mt-4 px-3\">\r\n                                        <Col className=\"py-4 mx-2 border border-white\">\r\n                                            <Bar\r\n                                                datasetKeyProvider={\r\n                                                    this.datasetKeyProvider\r\n                                                }\r\n                                                data={{\r\n                                                    datasets: [\r\n                                                        {\r\n                                                            label: \"Topbox\",\r\n                                                            data: this.props.chart_data.map(\r\n                                                                item =>\r\n                                                                    Object.values(\r\n                                                                        item\r\n                                                                    )[0].filter(\r\n                                                                        survey =>\r\n                                                                            survey.bottombox !=\r\n                                                                            1\r\n                                                                    ).length\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                \"#ffed00\"\r\n                                                        },\r\n                                                        {\r\n                                                            label: \"Bottombox\",\r\n                                                            data: this.props.chart_data.map(\r\n                                                                item =>\r\n                                                                    Object.values(\r\n                                                                        item\r\n                                                                    )[0].filter(\r\n                                                                        survey =>\r\n                                                                            survey.bottombox ===\r\n                                                                            1\r\n                                                                    ).length\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                \"#64ff00\"\r\n                                                        }\r\n                                                    ],\r\n                                                    labels: this.props.chart_data.map(\r\n                                                        item =>\r\n                                                            Object.keys(item)[0]\r\n                                                    )\r\n                                                }}\r\n                                                options={{\r\n                                                    title: {\r\n                                                        display: true,\r\n                                                        text:\r\n                                                            \"Bottombox count trend\",\r\n                                                        fontSize: \"20\"\r\n                                                    },\r\n                                                    tooltips: {\r\n                                                        mode: \"index\",\r\n                                                        intersect: false\r\n                                                    },\r\n                                                    hover: {\r\n                                                        mode: \"nearest\",\r\n                                                        intersect: true\r\n                                                    },\r\n                                                    responsive: true,\r\n                                                    maintainAspectRatio: false,\r\n\r\n                                                    scales: {\r\n                                                        xAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ],\r\n                                                        yAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ]\r\n                                                    },\r\n                                                    plugins: {\r\n                                                        datalabels: {\r\n                                                            anchor: \"start\",\r\n                                                            align: \"top\",\r\n                                                            // formatter: Math.round,\r\n                                                            font: {\r\n                                                                weight: \"bold\"\r\n                                                            },\r\n                                                            display: function(\r\n                                                                context\r\n                                                            ) {\r\n                                                                return (\r\n                                                                    context\r\n                                                                        .dataset\r\n                                                                        .data[\r\n                                                                        context\r\n                                                                            .dataIndex\r\n                                                                    ] > 1\r\n                                                                );\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                height={this.chart_height}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col className=\"py-4 ml-2 border border-white\">\r\n                                            <Bar\r\n                                                datasetKeyProvider={\r\n                                                    this.datasetKeyProvider\r\n                                                }\r\n                                                data={{\r\n                                                    datasets: [\r\n                                                        {\r\n                                                            label:\r\n                                                                \"Completed RCA\",\r\n                                                            data: this.props.chart_data.map(\r\n                                                                item =>\r\n                                                                    Object.values(\r\n                                                                        item\r\n                                                                    )[0].filter(\r\n                                                                        survey =>\r\n                                                                            survey.completed ===\r\n                                                                            true\r\n                                                                    ).length\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                \"#ffed00\"\r\n                                                        },\r\n                                                        {\r\n                                                            label: \"\",\r\n                                                            data: this.props.chart_data.map(\r\n                                                                item =>\r\n                                                                    Object.values(\r\n                                                                        item\r\n                                                                    )[0].filter(\r\n                                                                        survey =>\r\n                                                                            survey.completed ===\r\n                                                                            false\r\n                                                                    ).length\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                \"#64ff00\"\r\n                                                        }\r\n                                                    ],\r\n                                                    labels: this.props.chart_data.map(\r\n                                                        item =>\r\n                                                            Object.keys(item)[0]\r\n                                                    )\r\n                                                }}\r\n                                                options={{\r\n                                                    title: {\r\n                                                        display: true,\r\n                                                        text:\r\n                                                            \"RCA completion count\",\r\n                                                        fontSize: \"20\"\r\n                                                    },\r\n                                                    tooltips: {\r\n                                                        mode: \"index\",\r\n                                                        intersect: false\r\n                                                    },\r\n                                                    hover: {\r\n                                                        mode: \"nearest\",\r\n                                                        intersect: true\r\n                                                    },\r\n                                                    responsive: true,\r\n                                                    maintainAspectRatio: false,\r\n                                                    scales: {\r\n                                                        xAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ],\r\n                                                        yAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ]\r\n                                                    },\r\n                                                    plugins: {\r\n                                                        datalabels: {\r\n                                                            // formatter: Math.round,\r\n                                                            font: {\r\n                                                                weight: \"bold\"\r\n                                                            },\r\n                                                            display: function(\r\n                                                                context\r\n                                                            ) {\r\n                                                                return (\r\n                                                                    context\r\n                                                                        .dataset\r\n                                                                        .data[\r\n                                                                        context\r\n                                                                            .dataIndex\r\n                                                                    ] > 1\r\n                                                                );\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                height={this.chart_height}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row className=\"mt-4 px-3\">\r\n                                        <Col className=\"py-4 mx-2 border border-white\">\r\n                                            <Bar\r\n                                                datasetKeyProvider={\r\n                                                    this.datasetKeyProvider\r\n                                                }\r\n                                                data={{\r\n                                                    datasets: this.getTopDrivers(),\r\n                                                    labels: this.props.chart_data.map(\r\n                                                        item =>\r\n                                                            Object.keys(item)[0]\r\n                                                    )\r\n                                                }}\r\n                                                options={{\r\n                                                    barShowStroke: false,\r\n                                                    title: {\r\n                                                        display: true,\r\n                                                        text:\r\n                                                            \"Bottombox Top Drivers\",\r\n                                                        fontSize: \"20\"\r\n                                                    },\r\n                                                    tooltips: {\r\n                                                        mode: \"index\",\r\n                                                        intersect: false\r\n                                                    },\r\n                                                    hover: {\r\n                                                        mode: \"nearest\",\r\n                                                        intersect: true\r\n                                                    },\r\n                                                    responsive: true,\r\n                                                    maintainAspectRatio: false,\r\n                                                    scales: {\r\n                                                        yAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ],\r\n                                                        xAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ]\r\n                                                    },\r\n\r\n                                                    plugins: {\r\n                                                        datalabels: {\r\n                                                            // formatter: Math.round,\r\n                                                            font: {\r\n                                                                weight: \"bold\"\r\n                                                            }\r\n                                                        },\r\n                                                        display: function(\r\n                                                            context\r\n                                                        ) {\r\n                                                            return (\r\n                                                                context.dataset\r\n                                                                    .data[\r\n                                                                    context\r\n                                                                        .dataIndex\r\n                                                                ] > 1\r\n                                                            );\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                height={this.chart_height}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col className=\"py-4 ml-2 border border-white\">\r\n                                            <Bar\r\n                                                datasetKeyProvider={\r\n                                                    this.datasetKeyProvider\r\n                                                }\r\n                                                data={{\r\n                                                    datasets: this.getAccountableTeams(),\r\n                                                    labels: this.props.chart_data.map(\r\n                                                        item =>\r\n                                                            Object.keys(item)[0]\r\n                                                    )\r\n                                                }}\r\n                                                options={{\r\n                                                    barShowStroke: false,\r\n                                                    title: {\r\n                                                        display: true,\r\n                                                        text:\r\n                                                            \"Bottombox Accountable Teams\",\r\n                                                        fontSize: \"20\"\r\n                                                    },\r\n                                                    tooltips: {\r\n                                                        mode: \"index\",\r\n                                                        intersect: false\r\n                                                    },\r\n                                                    hover: {\r\n                                                        mode: \"nearest\",\r\n                                                        intersect: true\r\n                                                    },\r\n                                                    responsive: true,\r\n                                                    maintainAspectRatio: false,\r\n                                                    scales: {\r\n                                                        yAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ],\r\n                                                        xAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ]\r\n                                                    },\r\n\r\n                                                    plugins: {\r\n                                                        datalabels: {\r\n                                                            // formatter: Math.round,\r\n                                                            font: {\r\n                                                                weight: \"bold\"\r\n                                                            },\r\n\r\n                                                            color: \"gray\"\r\n                                                        },\r\n                                                        display: function(\r\n                                                            context\r\n                                                        ) {\r\n                                                            return (\r\n                                                                context.dataset\r\n                                                                    .data[\r\n                                                                    context\r\n                                                                        .dataIndex\r\n                                                                ] > 1\r\n                                                            );\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                height={this.chart_height}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"mt-4 px-3\">\r\n                                        <Col className=\"py-4 mx-2 border border-white\">\r\n                                            <HorizontalBar\r\n                                                datasetKeyProvider={\r\n                                                    this.datasetKeyProvider\r\n                                                }\r\n                                                data={{\r\n                                                    datasets: [\r\n                                                        {\r\n                                                            label:\r\n                                                                \"ITSD Controllable\",\r\n                                                            data: this.props.chart_data.map(\r\n                                                                item => {\r\n                                                                    let itsd_count = Object.values(\r\n                                                                        item\r\n                                                                    )[0].filter(\r\n                                                                        survey =>\r\n                                                                            survey.controllability ===\r\n                                                                            \"ITSD Controllable\"\r\n                                                                    ).length;\r\n\r\n                                                                    let bottombox_count = Object.values(\r\n                                                                        item\r\n                                                                    )[0].filter(\r\n                                                                        survey =>\r\n                                                                            survey.completed ===\r\n                                                                            true\r\n                                                                    ).length;\r\n\r\n                                                                    return (\r\n                                                                        (itsd_count /\r\n                                                                            bottombox_count) *\r\n                                                                        100\r\n                                                                    ).toFixed(\r\n                                                                        2\r\n                                                                    );\r\n                                                                }\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                \"#ffed00\"\r\n                                                        },\r\n                                                        {\r\n                                                            label:\r\n                                                                \"Non ITSD Controllable\",\r\n                                                            data: this.props.chart_data.map(\r\n                                                                item => {\r\n                                                                    let non_itsd_count = Object.values(\r\n                                                                        item\r\n                                                                    )[0].filter(\r\n                                                                        survey =>\r\n                                                                            survey.controllability ===\r\n                                                                            \"Non ITSD Controllable\"\r\n                                                                    ).length;\r\n\r\n                                                                    let bottombox_count = Object.values(\r\n                                                                        item\r\n                                                                    )[0].filter(\r\n                                                                        survey =>\r\n                                                                            survey.completed ===\r\n                                                                            true\r\n                                                                    ).length;\r\n\r\n                                                                    return (\r\n                                                                        (non_itsd_count /\r\n                                                                            bottombox_count) *\r\n                                                                        100\r\n                                                                    ).toFixed(\r\n                                                                        2\r\n                                                                    );\r\n                                                                }\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                \"#64ff00\"\r\n                                                        }\r\n                                                    ],\r\n                                                    labels: this.props.chart_data.map(\r\n                                                        item =>\r\n                                                            Object.keys(item)[0]\r\n                                                    )\r\n                                                }}\r\n                                                options={{\r\n                                                    title: {\r\n                                                        display: true,\r\n                                                        text:\r\n                                                            \"Bottombox Controllability\",\r\n                                                        fontSize: \"20\"\r\n                                                    },\r\n                                                    tooltips: {\r\n                                                        mode: \"index\",\r\n                                                        intersect: false\r\n                                                    },\r\n                                                    hover: {\r\n                                                        mode: \"nearest\",\r\n                                                        intersect: true\r\n                                                    },\r\n                                                    responsive: true,\r\n                                                    maintainAspectRatio: false,\r\n                                                    scales: {\r\n                                                        xAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ],\r\n                                                        yAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ]\r\n                                                    },\r\n                                                    plugins: {\r\n                                                        datalabels: {\r\n                                                            // formatter: Math.round,\r\n                                                            font: {\r\n                                                                weight: \"bold\"\r\n                                                            },\r\n\r\n                                                            color: \"white\"\r\n                                                        },\r\n                                                        display: function(\r\n                                                            context\r\n                                                        ) {\r\n                                                            return (\r\n                                                                context.dataset\r\n                                                                    .data[\r\n                                                                    context\r\n                                                                        .dataIndex\r\n                                                                ] > 1\r\n                                                            );\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                height={this.chart_height}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col className=\"py-4 ml-2 border border-white\">\r\n                                            <Bar\r\n                                                datasetKeyProvider={\r\n                                                    this.datasetKeyProvider\r\n                                                }\r\n                                                data={{\r\n                                                    datasets: this.getSurveyPerSilo(),\r\n                                                    labels: this.props.chart_data.map(\r\n                                                        item =>\r\n                                                            Object.keys(item)[0]\r\n                                                    )\r\n                                                }}\r\n                                                options={{\r\n                                                    barShowStroke: false,\r\n                                                    title: {\r\n                                                        display: true,\r\n                                                        text: \"Survey Per SILO\",\r\n                                                        fontSize: \"20\"\r\n                                                    },\r\n                                                    tooltips: {\r\n                                                        mode: \"index\",\r\n                                                        intersect: false\r\n                                                    },\r\n                                                    hover: {\r\n                                                        mode: \"nearest\",\r\n                                                        intersect: true\r\n                                                    },\r\n                                                    responsive: true,\r\n                                                    maintainAspectRatio: false,\r\n                                                    scales: {\r\n                                                        yAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ],\r\n                                                        xAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ]\r\n                                                    },\r\n\r\n                                                    plugins: {\r\n                                                        datalabels: {\r\n                                                            // formatter: Math.round,\r\n                                                            font: {\r\n                                                                weight: \"bold\"\r\n                                                            },\r\n\r\n                                                            color: \"gray\"\r\n                                                        },\r\n                                                        display: function(\r\n                                                            context\r\n                                                        ) {\r\n                                                            return (\r\n                                                                context.dataset\r\n                                                                    .data[\r\n                                                                    context\r\n                                                                        .dataIndex\r\n                                                                ] > 1\r\n                                                            );\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                height={this.chart_height}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"mt-4 px-3\">\r\n                                        <Col className=\"py-4 mx-2 border border-white\">\r\n                                            <HorizontalBar\r\n                                                datasetKeyProvider={\r\n                                                    this.datasetKeyProvider\r\n                                                }\r\n                                                data={{\r\n                                                    datasets: this.getSPGControllability(),\r\n                                                    labels: this.props.chart_data.map(\r\n                                                        item =>\r\n                                                            Object.keys(item)[0]\r\n                                                    )\r\n                                                }}\r\n                                                options={{\r\n                                                    legend: {\r\n                                                        display: true,\r\n                                                        position: \"right\",\r\n                                                        onClick: null\r\n                                                    },\r\n                                                    barShowStroke: false,\r\n                                                    title: {\r\n                                                        display: true,\r\n                                                        text:\r\n                                                            \"SPG Controllability\",\r\n                                                        fontSize: \"20\"\r\n                                                    },\r\n                                                    tooltips: {\r\n                                                        mode: \"index\",\r\n                                                        intersect: false\r\n                                                    },\r\n                                                    hover: {\r\n                                                        mode: \"nearest\",\r\n                                                        intersect: true\r\n                                                    },\r\n                                                    responsive: true,\r\n                                                    maintainAspectRatio: false,\r\n                                                    scales: {\r\n                                                        yAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ],\r\n                                                        xAxes: [\r\n                                                            {\r\n                                                                stacked: true\r\n                                                            }\r\n                                                        ]\r\n                                                    },\r\n\r\n                                                    plugins: {\r\n                                                        datalabels: {\r\n                                                            // formatter: Math.round,\r\n                                                            font: {\r\n                                                                weight: \"bold\"\r\n                                                            }\r\n                                                        },\r\n                                                        display: function(\r\n                                                            context\r\n                                                        ) {\r\n                                                            return (\r\n                                                                context.dataset\r\n                                                                    .data[\r\n                                                                    context\r\n                                                                        .dataIndex\r\n                                                                ] > 1\r\n                                                            );\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                height={600}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Fragment>\r\n                            }\r\n                        />\r\n                    </CardBody>\r\n                </Card>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    agents: state.surveys.agents,\r\n    agent: state.surveys.agent,\r\n    teams: state.surveys.teams,\r\n    agentCompState: state.surveys.agentCompState,\r\n    teamleads: state.surveys.teamleads,\r\n    skills: state.surveys.skills,\r\n    surveys: state.surveys.surveys,\r\n    filtered_data: state.surveys.filtered_data,\r\n    chart_data: state.surveys.chart_data,\r\n    rcas: state.surveys.rcas,\r\n    dsat_code1: state.surveys.dsat_code1,\r\n    agent_view_collapse: state.surveys.agent_view_collapse,\r\n    bottombox_view_collapse: state.surveys.bottombox_view_collapse,\r\n    colors: state.surveys.colors\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Dashboard);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    addDsatCode1,\r\n    addBbDriverCode2,\r\n    addBbDriverCode3,\r\n    deleteDsatCode1,\r\n    updateDsatCode1,\r\n    updateBbDriverCode2,\r\n    updateBBDriverState,\r\n    deleteBbDriverCode2,\r\n    deleteBbDriverCode3,\r\n    updateBbDriverCode3\r\n} from \"../../../actions/surveyActions\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    Row,\r\n    Col,\r\n    Fade,\r\n    Table,\r\n    Form,\r\n    Input,\r\n    InputGroup,\r\n    InputGroupAddon\r\n} from \"reactstrap\";\r\n\r\nclass BottomboxDrivers extends Component {\r\n    state = {\r\n        name: \"\",\r\n        edit: false,\r\n        toggle: false,\r\n        code1_name: \"\",\r\n        code2_name: \"\",\r\n        code3_name: \"\",\r\n        code1: \"\",\r\n        code2: \"\",\r\n        code3: \"\",\r\n        code2_list: [],\r\n        code3_list: []\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    handleClick = data => {\r\n        // console.log(data);\r\n        if (data.type === \"code1\") {\r\n            this.setState({\r\n                toggle: false,\r\n                code1: data,\r\n                code2: \"\",\r\n                code2_list: this.props.bb_driver_code2.filter(\r\n                    item => item.dsat_Code1 === data.id\r\n                ),\r\n                code3: []\r\n            });\r\n            this.props.updateBBDriverState({\r\n                toggle: false,\r\n                code1: data,\r\n                code2: \"\",\r\n                code2_list: this.props.bb_driver_code2.filter(\r\n                    item => item.dsat_Code1 === data.id\r\n                ),\r\n                code3: []\r\n            });\r\n        }\r\n\r\n        if (data.type === \"code2\") {\r\n            this.setState({\r\n                toggle: false,\r\n                code2: data,\r\n                code3: \"\",\r\n                code3_list: this.props.bb_driver_code3.filter(\r\n                    item => item.bb_Driver_Code2 === data.id\r\n                )\r\n            });\r\n            this.props.updateBBDriverState({\r\n                toggle: false,\r\n                code2: data,\r\n                code3: \"\",\r\n                code3_list: this.props.bb_driver_code3.filter(\r\n                    item => item.bb_Driver_Code2 === data.id\r\n                )\r\n            });\r\n        }\r\n\r\n        if (data.type === \"code3\") {\r\n            this.setState({\r\n                toggle: false,\r\n                code3: data\r\n            });\r\n            this.props.updateBBDriverState({\r\n                toggle: false,\r\n                code3: data\r\n            });\r\n        }\r\n\r\n        this.editOff(data);\r\n    };\r\n\r\n    showButtons = data => {\r\n        this.handleClick(data);\r\n        this.editOff(data);\r\n        this.setState({\r\n            toggle: true,\r\n            name: data.name\r\n        });\r\n    };\r\n\r\n    hideButtons = data => {\r\n        this.handleClick(data);\r\n        this.editOff(data);\r\n\r\n        this.setState({\r\n            toggle: false\r\n        });\r\n    };\r\n\r\n    editOn = data => {\r\n        if (data.type === \"code1\") {\r\n            this.setState({\r\n                code1: data,\r\n                edit: true\r\n            });\r\n        } else if (data.type === \"code2\") {\r\n            this.setState({\r\n                code1: \"\",\r\n                code2: data,\r\n                edit: true\r\n            });\r\n        } else if (data.type === \"code3\") {\r\n            this.setState({\r\n                code1: \"\",\r\n                code2: \"\",\r\n                code3: data,\r\n                edit: true\r\n            });\r\n        }\r\n    };\r\n\r\n    editOff = data => {\r\n        // console.log(data);\r\n        if (data.type === \"code2\" || data.type === \"code3\") {\r\n            this.setState({\r\n                edit: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                code1: data,\r\n                edit: false\r\n            });\r\n        }\r\n    };\r\n\r\n    // REQUESTS\r\n\r\n    handleAddDriverCode3Submit = e => {\r\n        e.preventDefault();\r\n\r\n        let data = {\r\n            name: this.state.code3_name,\r\n            bb_Driver_Code2: this.props.bbState.code2.id\r\n        };\r\n\r\n        // console.log(data);\r\n\r\n        this.props.addBbDriverCode3(data);\r\n\r\n        this.setState({\r\n            code3_name: \"\"\r\n        });\r\n        this.props.updateBBDriverState({\r\n            code3_name: \"\"\r\n        });\r\n    };\r\n\r\n    handleAddDriverCode2Submit = e => {\r\n        e.preventDefault();\r\n\r\n        let data = {\r\n            name: this.state.code2_name,\r\n            dsat_Code1: this.props.bbState.code1.id\r\n        };\r\n\r\n        this.props.addBbDriverCode2(data);\r\n\r\n        this.setState({\r\n            code2_name: \"\"\r\n        });\r\n        this.props.updateBBDriverState({\r\n            code2_name: \"\"\r\n        });\r\n    };\r\n\r\n    handleAddDsatCode1Submit = e => {\r\n        e.preventDefault();\r\n\r\n        let data = { name: this.state.code1_name };\r\n\r\n        this.props.addDsatCode1(data);\r\n\r\n        this.setState({\r\n            code1_name: \"\"\r\n        });\r\n        this.props.updateBBDriverState({\r\n            code2_name: \"\"\r\n        });\r\n    };\r\n\r\n    handleDelete = data => {\r\n        if (data.type === \"code1\") {\r\n            let need_update = this.props.rcas.filter(\r\n                rca => rca.dsat_cause.id === data.id\r\n            );\r\n            this.props.deleteDsatCode1(data.id, need_update);\r\n        } else if (data.type === \"code2\") {\r\n            let need_update = this.props.rcas.filter(\r\n                rca => rca.bb_driver_code2.id === data.id\r\n            );\r\n            this.props.deleteBbDriverCode2(data.id, need_update);\r\n        } else if (data.type === \"code3\") {\r\n            let need_update = this.props.rcas.filter(\r\n                rca => rca.bb_driver_code3.id === data.id\r\n            );\r\n            this.props.deleteBbDriverCode3(data.id, need_update);\r\n        }\r\n    };\r\n\r\n    handleEdit = data => {\r\n        if (data.type === \"code1\") {\r\n            let newData = {\r\n                id: this.state.code1.id,\r\n                name: this.state.name\r\n            };\r\n\r\n            this.props.updateDsatCode1(newData);\r\n        }\r\n\r\n        if (data.type === \"code2\") {\r\n            let newData = {\r\n                id: data.id,\r\n                dsat_Code1: data.dsat_Code1,\r\n                name: this.state.name\r\n            };\r\n\r\n            this.props.updateBbDriverCode2(newData);\r\n        }\r\n\r\n        if (data.type === \"code3\") {\r\n            let newData = {\r\n                id: data.id,\r\n                bb_Driver_Code2: data.bb_Driver_Code2,\r\n                name: this.state.name\r\n            };\r\n\r\n            this.props.updateBbDriverCode3(newData);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let text_color = \"white\";\r\n        return (\r\n            <Fragment>\r\n                <Fade>\r\n                    <Card>\r\n                        <CardHeader>\r\n                            <h4>\r\n                                <strong>Bottombox Drivers</strong>\r\n                            </h4>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Table hover bordered>\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>\r\n                                                    <Row className=\"mt-2\">\r\n                                                        <Col md={4}>\r\n                                                            <h5\r\n                                                                style={{\r\n                                                                    color: text_color\r\n                                                                }}\r\n                                                            >\r\n                                                                Code 1\r\n                                                            </h5>\r\n                                                        </Col>\r\n                                                        <Col\r\n                                                            md={8}\r\n                                                            className=\"mr-auto\"\r\n                                                            style={{\r\n                                                                textAlign:\r\n                                                                    \"right\"\r\n                                                            }}\r\n                                                        >\r\n                                                            <Form\r\n                                                                onSubmit={\r\n                                                                    this\r\n                                                                        .handleAddDsatCode1Submit\r\n                                                                }\r\n                                                            >\r\n                                                                <Row>\r\n                                                                    <Col md={1}>\r\n                                                                        <button\r\n                                                                            className=\"mr-2\"\r\n                                                                            style={{\r\n                                                                                cursor:\r\n                                                                                    \"pointer\"\r\n                                                                            }}\r\n                                                                            onSubmit={\r\n                                                                                this\r\n                                                                                    .handleAddDsatCode1Submit\r\n                                                                            }\r\n                                                                        >\r\n                                                                            <i\r\n                                                                                className=\"fa fa-plus\"\r\n                                                                                onSubmit={\r\n                                                                                    this\r\n                                                                                        .handleAddDsatCode1Submit\r\n                                                                                }\r\n                                                                            />\r\n                                                                        </button>\r\n                                                                    </Col>\r\n                                                                    <Col className=\"my-auto ml-2\">\r\n                                                                        <Input\r\n                                                                            bsSize=\"sm\"\r\n                                                                            name=\"code1_name\"\r\n                                                                            onChange={\r\n                                                                                this\r\n                                                                                    .handleChange\r\n                                                                            }\r\n                                                                            value={\r\n                                                                                this\r\n                                                                                    .state\r\n                                                                                    .code1_name\r\n                                                                            }\r\n                                                                            readOnly={\r\n                                                                                false\r\n                                                                            }\r\n                                                                            placeholder=\"Enter new Bottombox Code 1\"\r\n                                                                            required\r\n                                                                        />\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </Form>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.props.dsat_code1.map(item => (\r\n                                                <tr key={item.id}>\r\n                                                    <td\r\n                                                        style={\r\n                                                            this.props.bbState\r\n                                                                .code1.id ===\r\n                                                            item.id\r\n                                                                ? {\r\n                                                                      backgroundColor:\r\n                                                                          \"gray\"\r\n                                                                  }\r\n                                                                : {\r\n                                                                      backgroundColor:\r\n                                                                          \"white\"\r\n                                                                  }\r\n                                                        }\r\n                                                    >\r\n                                                        <Row>\r\n                                                            {this.state.edit ? (\r\n                                                                this.state.code1\r\n                                                                    .id ===\r\n                                                                item.id ? (\r\n                                                                    <Col md={8}>\r\n                                                                        <Form>\r\n                                                                            <InputGroup size=\"sm\">\r\n                                                                                <InputGroupAddon addonType=\"prepend\">\r\n                                                                                    <i\r\n                                                                                        onClick={() =>\r\n                                                                                            this.handleEdit(\r\n                                                                                                {\r\n                                                                                                    type:\r\n                                                                                                        \"code1\",\r\n                                                                                                    ...item\r\n                                                                                                }\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                        style={{\r\n                                                                                            color:\r\n                                                                                                \"black\",\r\n                                                                                            cursor:\r\n                                                                                                \"pointer\"\r\n                                                                                        }}\r\n                                                                                        className=\"fa fa-check-square fa-2x\"\r\n                                                                                        aria-hidden=\"true\"\r\n                                                                                    />\r\n                                                                                </InputGroupAddon>\r\n                                                                                <Input\r\n                                                                                    bsSize=\"sm\"\r\n                                                                                    name=\"name\"\r\n                                                                                    onChange={\r\n                                                                                        this\r\n                                                                                            .handleChange\r\n                                                                                    }\r\n                                                                                    value={\r\n                                                                                        this\r\n                                                                                            .state\r\n                                                                                            .name\r\n                                                                                    }\r\n                                                                                    readOnly={\r\n                                                                                        false\r\n                                                                                    }\r\n                                                                                    required\r\n                                                                                />\r\n                                                                            </InputGroup>\r\n                                                                        </Form>\r\n                                                                    </Col>\r\n                                                                ) : (\r\n                                                                    <Col md={8}>\r\n                                                                        <span\r\n                                                                            onClick={() =>\r\n                                                                                this.handleClick(\r\n                                                                                    {\r\n                                                                                        type:\r\n                                                                                            \"code1\",\r\n                                                                                        ...item\r\n                                                                                    }\r\n                                                                                )\r\n                                                                            }\r\n                                                                            style={{\r\n                                                                                cursor:\r\n                                                                                    \"pointer\"\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            {\r\n                                                                                item.name\r\n                                                                            }\r\n                                                                        </span>\r\n                                                                    </Col>\r\n                                                                )\r\n                                                            ) : (\r\n                                                                <Col md={8}>\r\n                                                                    <span\r\n                                                                        onClick={() =>\r\n                                                                            this.handleClick(\r\n                                                                                {\r\n                                                                                    type:\r\n                                                                                        \"code1\",\r\n                                                                                    ...item\r\n                                                                                }\r\n                                                                            )\r\n                                                                        }\r\n                                                                        style={{\r\n                                                                            cursor:\r\n                                                                                \"pointer\"\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            item.name\r\n                                                                        }\r\n                                                                    </span>\r\n                                                                </Col>\r\n                                                            )}\r\n\r\n                                                            {/*HIDDEN BUTTONS  */}\r\n\r\n                                                            {!this.state\r\n                                                                .toggle ? (\r\n                                                                <Col>\r\n                                                                    <span\r\n                                                                        onClick={() =>\r\n                                                                            this.showButtons(\r\n                                                                                {\r\n                                                                                    type:\r\n                                                                                        \"code1\",\r\n                                                                                    ...item\r\n                                                                                }\r\n                                                                            )\r\n                                                                        }\r\n                                                                        style={{\r\n                                                                            float:\r\n                                                                                \"right\",\r\n                                                                            cursor:\r\n                                                                                \"pointer\"\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <i\r\n                                                                            onClick={() =>\r\n                                                                                this.showButtons(\r\n                                                                                    {\r\n                                                                                        type:\r\n                                                                                            \"code1\",\r\n                                                                                        ...item\r\n                                                                                    }\r\n                                                                                )\r\n                                                                            }\r\n                                                                            style={{\r\n                                                                                color:\r\n                                                                                    \"black\",\r\n                                                                                cursor:\r\n                                                                                    \"pointer\"\r\n                                                                            }}\r\n                                                                            className=\"fa fa-chevron-circle-left fa-lg icon\"\r\n                                                                            aria-hidden=\"true\"\r\n                                                                        />\r\n                                                                    </span>\r\n                                                                </Col>\r\n                                                            ) : this.state.code1\r\n                                                                  .id ===\r\n                                                                  item.id &&\r\n                                                              !this.state\r\n                                                                  .code2 ? (\r\n                                                                <Col className=\"my-auto\">\r\n                                                                    <Fragment>\r\n                                                                        <span\r\n                                                                            style={{\r\n                                                                                float:\r\n                                                                                    \"right\"\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <i\r\n                                                                                onClick={() =>\r\n                                                                                    this.hideButtons(\r\n                                                                                        {\r\n                                                                                            type:\r\n                                                                                                \"code1\",\r\n                                                                                            ...item\r\n                                                                                        }\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                style={{\r\n                                                                                    color:\r\n                                                                                        \"black\",\r\n                                                                                    cursor:\r\n                                                                                        \"pointer\"\r\n                                                                                }}\r\n                                                                                className=\"fa fa-chevron-circle-right fa-lg icon\"\r\n                                                                                aria-hidden=\"true\"\r\n                                                                            />\r\n                                                                        </span>\r\n                                                                        <span\r\n                                                                            style={{\r\n                                                                                float:\r\n                                                                                    \"right\"\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <i\r\n                                                                                onClick={() =>\r\n                                                                                    this.editOn(\r\n                                                                                        {\r\n                                                                                            type:\r\n                                                                                                \"code1\",\r\n                                                                                            ...item\r\n                                                                                        }\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                style={{\r\n                                                                                    color:\r\n                                                                                        \"black\",\r\n                                                                                    cursor:\r\n                                                                                        \"pointer\"\r\n                                                                                }}\r\n                                                                                className=\"fa fa-edit fa-lg icon\"\r\n                                                                                aria-hidden=\"true\"\r\n                                                                            />\r\n                                                                        </span>\r\n                                                                        <span\r\n                                                                            style={{\r\n                                                                                float:\r\n                                                                                    \"right\"\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <i\r\n                                                                                onClick={() =>\r\n                                                                                    this.handleDelete(\r\n                                                                                        {\r\n                                                                                            type:\r\n                                                                                                \"code1\",\r\n                                                                                            ...item\r\n                                                                                        }\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                style={{\r\n                                                                                    color:\r\n                                                                                        \"black\",\r\n                                                                                    cursor:\r\n                                                                                        \"pointer\"\r\n                                                                                }}\r\n                                                                                className=\"fa fa-minus-circle fa-lg mr-1 icon\"\r\n                                                                                aria-hidden=\"true\"\r\n                                                                            />\r\n                                                                        </span>\r\n                                                                    </Fragment>\r\n                                                                </Col>\r\n                                                            ) : (\r\n                                                                <Col>\r\n                                                                    <span\r\n                                                                        onClick={() =>\r\n                                                                            this.showButtons(\r\n                                                                                {\r\n                                                                                    type:\r\n                                                                                        \"code1\",\r\n                                                                                    ...item\r\n                                                                                }\r\n                                                                            )\r\n                                                                        }\r\n                                                                        style={{\r\n                                                                            float:\r\n                                                                                \"right\",\r\n                                                                            cursor:\r\n                                                                                \"pointer\"\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <i\r\n                                                                            onClick={() =>\r\n                                                                                this.showButtons(\r\n                                                                                    {\r\n                                                                                        type:\r\n                                                                                            \"code1\",\r\n                                                                                        ...item\r\n                                                                                    }\r\n                                                                                )\r\n                                                                            }\r\n                                                                            style={{\r\n                                                                                color:\r\n                                                                                    \"black\",\r\n                                                                                cursor:\r\n                                                                                    \"pointer\"\r\n                                                                            }}\r\n                                                                            className=\"fa fa-chevron-circle-left fa-lg\"\r\n                                                                            aria-hidden=\"true\"\r\n                                                                        />\r\n                                                                    </span>\r\n                                                                </Col>\r\n                                                            )}\r\n                                                        </Row>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </Col>\r\n                                {this.props.bbState.code1 && (\r\n                                    <Col>\r\n                                        <Table hover bordered>\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>\r\n                                                        <Row className=\"mt-2\">\r\n                                                            <Col md={4}>\r\n                                                                <h5\r\n                                                                    style={{\r\n                                                                        color: text_color\r\n                                                                    }}\r\n                                                                >\r\n                                                                    Code 2\r\n                                                                </h5>\r\n                                                            </Col>\r\n                                                            <Col\r\n                                                                md={8}\r\n                                                                className=\"mr-auto\"\r\n                                                                style={{\r\n                                                                    textAlign:\r\n                                                                        \"right\"\r\n                                                                }}\r\n                                                            >\r\n                                                                <Form\r\n                                                                    onSubmit={\r\n                                                                        this\r\n                                                                            .handleAddDriverCode2Submit\r\n                                                                    }\r\n                                                                >\r\n                                                                    <Row>\r\n                                                                        <Col\r\n                                                                            md={\r\n                                                                                1\r\n                                                                            }\r\n                                                                        >\r\n                                                                            <button\r\n                                                                                className=\"mr-2\"\r\n                                                                                style={{\r\n                                                                                    cursor:\r\n                                                                                        \"pointer\"\r\n                                                                                }}\r\n                                                                                onSubmit={\r\n                                                                                    this\r\n                                                                                        .handleAddDriverCode2Submit\r\n                                                                                }\r\n                                                                            >\r\n                                                                                <i\r\n                                                                                    className=\"fa fa-plus\"\r\n                                                                                    onSubmit={\r\n                                                                                        this\r\n                                                                                            .handleAddDriverCode2Submit\r\n                                                                                    }\r\n                                                                                />\r\n                                                                            </button>\r\n                                                                        </Col>\r\n                                                                        <Col className=\"my-auto ml-2\">\r\n                                                                            <Input\r\n                                                                                bsSize=\"sm\"\r\n                                                                                name=\"code2_name\"\r\n                                                                                onChange={\r\n                                                                                    this\r\n                                                                                        .handleChange\r\n                                                                                }\r\n                                                                                value={\r\n                                                                                    this\r\n                                                                                        .state\r\n                                                                                        .code2_name\r\n                                                                                }\r\n                                                                                readOnly={\r\n                                                                                    false\r\n                                                                                }\r\n                                                                                placeholder=\"Enter new Bottombox Code 2\"\r\n                                                                                required\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                </Form>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {this.props.bb_driver_code2\r\n                                                    .filter(\r\n                                                        filter_item =>\r\n                                                            filter_item.dsat_Code1 ===\r\n                                                            this.props.bbState\r\n                                                                .code1.id\r\n                                                    )\r\n                                                    .map(code2_item => (\r\n                                                        <tr key={code2_item.id}>\r\n                                                            <td\r\n                                                                style={\r\n                                                                    this.props\r\n                                                                        .bbState\r\n                                                                        .code2\r\n                                                                        .id ===\r\n                                                                    code2_item.id\r\n                                                                        ? {\r\n                                                                              backgroundColor:\r\n                                                                                  \"gray\"\r\n                                                                          }\r\n                                                                        : {\r\n                                                                              backgroundColor:\r\n                                                                                  \"white\"\r\n                                                                          }\r\n                                                                }\r\n                                                            >\r\n                                                                {/* CODE 2 */}\r\n                                                                <Row>\r\n                                                                    {this.state\r\n                                                                        .edit ? (\r\n                                                                        this\r\n                                                                            .state\r\n                                                                            .code2\r\n                                                                            .id ===\r\n                                                                        code2_item.id ? (\r\n                                                                            <Col\r\n                                                                                md={\r\n                                                                                    8\r\n                                                                                }\r\n                                                                            >\r\n                                                                                <Form>\r\n                                                                                    <InputGroup size=\"sm\">\r\n                                                                                        <InputGroupAddon addonType=\"prepend\">\r\n                                                                                            <i\r\n                                                                                                onClick={() =>\r\n                                                                                                    this.handleEdit(\r\n                                                                                                        {\r\n                                                                                                            type:\r\n                                                                                                                \"code2\",\r\n                                                                                                            ...code2_item\r\n                                                                                                        }\r\n                                                                                                    )\r\n                                                                                                }\r\n                                                                                                style={{\r\n                                                                                                    color:\r\n                                                                                                        \"black\",\r\n                                                                                                    cursor:\r\n                                                                                                        \"pointer\"\r\n                                                                                                }}\r\n                                                                                                className=\"fa fa-check-square fa-2x\"\r\n                                                                                                aria-hidden=\"true\"\r\n                                                                                            />\r\n                                                                                        </InputGroupAddon>\r\n                                                                                        <Input\r\n                                                                                            bsSize=\"sm\"\r\n                                                                                            name=\"name\"\r\n                                                                                            onChange={\r\n                                                                                                this\r\n                                                                                                    .handleChange\r\n                                                                                            }\r\n                                                                                            value={\r\n                                                                                                this\r\n                                                                                                    .state\r\n                                                                                                    .name\r\n                                                                                            }\r\n                                                                                            readOnly={\r\n                                                                                                false\r\n                                                                                            }\r\n                                                                                            required\r\n                                                                                        />\r\n                                                                                    </InputGroup>\r\n                                                                                </Form>\r\n                                                                            </Col>\r\n                                                                        ) : (\r\n                                                                            <Col\r\n                                                                                md={\r\n                                                                                    8\r\n                                                                                }\r\n                                                                            >\r\n                                                                                <span\r\n                                                                                    onClick={() =>\r\n                                                                                        this.handleClick(\r\n                                                                                            {\r\n                                                                                                type:\r\n                                                                                                    \"code2\",\r\n                                                                                                ...code2_item\r\n                                                                                            }\r\n                                                                                        )\r\n                                                                                    }\r\n                                                                                    style={{\r\n                                                                                        cursor:\r\n                                                                                            \"pointer\"\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    {\r\n                                                                                        code2_item.name\r\n                                                                                    }\r\n                                                                                </span>\r\n                                                                            </Col>\r\n                                                                        )\r\n                                                                    ) : (\r\n                                                                        <Col\r\n                                                                            md={\r\n                                                                                8\r\n                                                                            }\r\n                                                                        >\r\n                                                                            <span\r\n                                                                                onClick={() =>\r\n                                                                                    this.handleClick(\r\n                                                                                        {\r\n                                                                                            type:\r\n                                                                                                \"code2\",\r\n                                                                                            ...code2_item\r\n                                                                                        }\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                style={{\r\n                                                                                    cursor:\r\n                                                                                        \"pointer\"\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    code2_item.name\r\n                                                                                }\r\n                                                                            </span>\r\n                                                                        </Col>\r\n                                                                    )}\r\n\r\n                                                                    {/*HIDDEN BUTTONS  */}\r\n\r\n                                                                    {!this.state\r\n                                                                        .toggle ? (\r\n                                                                        <Col>\r\n                                                                            <span\r\n                                                                                onClick={() =>\r\n                                                                                    this.showButtons(\r\n                                                                                        {\r\n                                                                                            type:\r\n                                                                                                \"code2\",\r\n                                                                                            ...code2_item\r\n                                                                                        }\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                style={{\r\n                                                                                    float:\r\n                                                                                        \"right\",\r\n                                                                                    cursor:\r\n                                                                                        \"pointer\"\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                <i\r\n                                                                                    onClick={() =>\r\n                                                                                        this.showButtons(\r\n                                                                                            {\r\n                                                                                                type:\r\n                                                                                                    \"code2\",\r\n                                                                                                ...code2_item\r\n                                                                                            }\r\n                                                                                        )\r\n                                                                                    }\r\n                                                                                    style={{\r\n                                                                                        color:\r\n                                                                                            \"black\",\r\n                                                                                        cursor:\r\n                                                                                            \"pointer\"\r\n                                                                                    }}\r\n                                                                                    className=\"fa fa-chevron-circle-left fa-lg icon\"\r\n                                                                                    aria-hidden=\"true\"\r\n                                                                                />\r\n                                                                            </span>\r\n                                                                        </Col>\r\n                                                                    ) : this\r\n                                                                          .state\r\n                                                                          .code2\r\n                                                                          .id ===\r\n                                                                          code2_item.id &&\r\n                                                                      !this\r\n                                                                          .state\r\n                                                                          .code3 ? (\r\n                                                                        <Col className=\"my-auto\">\r\n                                                                            <Fragment>\r\n                                                                                <span\r\n                                                                                    style={{\r\n                                                                                        float:\r\n                                                                                            \"right\"\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    <i\r\n                                                                                        onClick={() =>\r\n                                                                                            this.hideButtons(\r\n                                                                                                {\r\n                                                                                                    type:\r\n                                                                                                        \"code2\",\r\n                                                                                                    ...code2_item\r\n                                                                                                }\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                        style={{\r\n                                                                                            color:\r\n                                                                                                \"black\",\r\n                                                                                            cursor:\r\n                                                                                                \"pointer\"\r\n                                                                                        }}\r\n                                                                                        className=\"fa fa-chevron-circle-right fa-lg icon\"\r\n                                                                                        aria-hidden=\"true\"\r\n                                                                                    />\r\n                                                                                </span>\r\n                                                                                <span\r\n                                                                                    style={{\r\n                                                                                        float:\r\n                                                                                            \"right\"\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    <i\r\n                                                                                        onClick={() =>\r\n                                                                                            this.editOn(\r\n                                                                                                {\r\n                                                                                                    type:\r\n                                                                                                        \"code2\",\r\n                                                                                                    ...code2_item\r\n                                                                                                }\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                        style={{\r\n                                                                                            color:\r\n                                                                                                \"black\",\r\n                                                                                            cursor:\r\n                                                                                                \"pointer\"\r\n                                                                                        }}\r\n                                                                                        className=\"fa fa-edit fa-lg icon\"\r\n                                                                                        aria-hidden=\"true\"\r\n                                                                                    />\r\n                                                                                </span>\r\n                                                                                <span\r\n                                                                                    style={{\r\n                                                                                        float:\r\n                                                                                            \"right\"\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    <i\r\n                                                                                        onClick={() =>\r\n                                                                                            this.handleDelete(\r\n                                                                                                {\r\n                                                                                                    type:\r\n                                                                                                        \"code2\",\r\n                                                                                                    ...code2_item\r\n                                                                                                }\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                        style={{\r\n                                                                                            color:\r\n                                                                                                \"black\",\r\n                                                                                            cursor:\r\n                                                                                                \"pointer\"\r\n                                                                                        }}\r\n                                                                                        className=\"fa fa-minus-circle fa-lg mr-1 icon\"\r\n                                                                                        aria-hidden=\"true\"\r\n                                                                                    />\r\n                                                                                </span>\r\n                                                                            </Fragment>\r\n                                                                        </Col>\r\n                                                                    ) : (\r\n                                                                        <Col>\r\n                                                                            <span\r\n                                                                                onClick={() =>\r\n                                                                                    this.showButtons(\r\n                                                                                        {\r\n                                                                                            type:\r\n                                                                                                \"code2\",\r\n                                                                                            ...code2_item\r\n                                                                                        }\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                style={{\r\n                                                                                    float:\r\n                                                                                        \"right\",\r\n                                                                                    cursor:\r\n                                                                                        \"pointer\"\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                <i\r\n                                                                                    onClick={() =>\r\n                                                                                        this.showButtons(\r\n                                                                                            {\r\n                                                                                                type:\r\n                                                                                                    \"code2\",\r\n                                                                                                ...code2_item\r\n                                                                                            }\r\n                                                                                        )\r\n                                                                                    }\r\n                                                                                    style={{\r\n                                                                                        color:\r\n                                                                                            \"black\",\r\n                                                                                        cursor:\r\n                                                                                            \"pointer\"\r\n                                                                                    }}\r\n                                                                                    className=\"fa fa-chevron-circle-left fa-lg\"\r\n                                                                                    aria-hidden=\"true\"\r\n                                                                                />\r\n                                                                            </span>\r\n                                                                        </Col>\r\n                                                                    )}\r\n                                                                </Row>\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    ))}\r\n                                            </tbody>\r\n                                        </Table>\r\n                                    </Col>\r\n                                )}\r\n\r\n                                {/* CODE 3 */}\r\n\r\n                                {this.props.bbState.code2 && (\r\n                                    <Col md={4}>\r\n                                        <Table hover bordered>\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>\r\n                                                        <Row className=\"mt-2\">\r\n                                                            <Col md={4}>\r\n                                                                <h5\r\n                                                                    style={{\r\n                                                                        color: text_color\r\n                                                                    }}\r\n                                                                >\r\n                                                                    Code 3\r\n                                                                </h5>\r\n                                                            </Col>\r\n                                                            <Col\r\n                                                                md={8}\r\n                                                                className=\"mr-auto\"\r\n                                                                style={{\r\n                                                                    textAlign:\r\n                                                                        \"right\"\r\n                                                                }}\r\n                                                            >\r\n                                                                <Form\r\n                                                                    onSubmit={\r\n                                                                        this\r\n                                                                            .handleAddDriverCode3Submit\r\n                                                                    }\r\n                                                                >\r\n                                                                    <Row>\r\n                                                                        <Col\r\n                                                                            md={\r\n                                                                                1\r\n                                                                            }\r\n                                                                        >\r\n                                                                            <button\r\n                                                                                className=\"mr-2\"\r\n                                                                                style={{\r\n                                                                                    cursor:\r\n                                                                                        \"pointer\"\r\n                                                                                }}\r\n                                                                                onSubmit={\r\n                                                                                    this\r\n                                                                                        .handleAddDriverCode3Submit\r\n                                                                                }\r\n                                                                            >\r\n                                                                                <i\r\n                                                                                    className=\"fa fa-plus\"\r\n                                                                                    onSubmit={\r\n                                                                                        this\r\n                                                                                            .handleAddDriverCode3Submit\r\n                                                                                    }\r\n                                                                                />\r\n                                                                            </button>\r\n                                                                        </Col>\r\n                                                                        <Col className=\"my-auto ml-2\">\r\n                                                                            <Input\r\n                                                                                bsSize=\"sm\"\r\n                                                                                name=\"code3_name\"\r\n                                                                                onChange={\r\n                                                                                    this\r\n                                                                                        .handleChange\r\n                                                                                }\r\n                                                                                value={\r\n                                                                                    this\r\n                                                                                        .state\r\n                                                                                        .code3_name\r\n                                                                                }\r\n                                                                                readOnly={\r\n                                                                                    false\r\n                                                                                }\r\n                                                                                placeholder=\"Enter new Bottombox Code 3\"\r\n                                                                                required\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                </Form>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {this.props.bb_driver_code3\r\n                                                    .filter(\r\n                                                        code3_filter_item =>\r\n                                                            code3_filter_item.bb_Driver_Code2 ===\r\n                                                            this.props.bbState\r\n                                                                .code2.id\r\n                                                    )\r\n                                                    .map(code3_item => (\r\n                                                        <tr key={code3_item.id}>\r\n                                                            <td\r\n                                                                style={\r\n                                                                    this.props\r\n                                                                        .bbState\r\n                                                                        .code3\r\n                                                                        .id ===\r\n                                                                    code3_item.id\r\n                                                                        ? {\r\n                                                                              backgroundColor:\r\n                                                                                  \"gray\"\r\n                                                                          }\r\n                                                                        : {\r\n                                                                              backgroundColor:\r\n                                                                                  \"white\"\r\n                                                                          }\r\n                                                                }\r\n                                                            >\r\n                                                                {/* CODE 3 BODY */}\r\n                                                                <Row>\r\n                                                                    {this.state\r\n                                                                        .edit ? (\r\n                                                                        this\r\n                                                                            .state\r\n                                                                            .code3\r\n                                                                            .id ===\r\n                                                                        code3_item.id ? (\r\n                                                                            <Col\r\n                                                                                md={\r\n                                                                                    8\r\n                                                                                }\r\n                                                                            >\r\n                                                                                <Form>\r\n                                                                                    <InputGroup size=\"sm\">\r\n                                                                                        <InputGroupAddon addonType=\"prepend\">\r\n                                                                                            <i\r\n                                                                                                onClick={() =>\r\n                                                                                                    this.handleEdit(\r\n                                                                                                        {\r\n                                                                                                            type:\r\n                                                                                                                \"code3\",\r\n                                                                                                            ...code3_item\r\n                                                                                                        }\r\n                                                                                                    )\r\n                                                                                                }\r\n                                                                                                style={{\r\n                                                                                                    color:\r\n                                                                                                        \"black\",\r\n                                                                                                    cursor:\r\n                                                                                                        \"pointer\"\r\n                                                                                                }}\r\n                                                                                                className=\"fa fa-check-square fa-2x\"\r\n                                                                                                aria-hidden=\"true\"\r\n                                                                                            />\r\n                                                                                        </InputGroupAddon>\r\n                                                                                        <Input\r\n                                                                                            bsSize=\"sm\"\r\n                                                                                            name=\"name\"\r\n                                                                                            onChange={\r\n                                                                                                this\r\n                                                                                                    .handleChange\r\n                                                                                            }\r\n                                                                                            value={\r\n                                                                                                this\r\n                                                                                                    .state\r\n                                                                                                    .name\r\n                                                                                            }\r\n                                                                                            readOnly={\r\n                                                                                                false\r\n                                                                                            }\r\n                                                                                            required\r\n                                                                                        />\r\n                                                                                    </InputGroup>\r\n                                                                                </Form>\r\n                                                                            </Col>\r\n                                                                        ) : (\r\n                                                                            <Col\r\n                                                                                md={\r\n                                                                                    8\r\n                                                                                }\r\n                                                                            >\r\n                                                                                <span\r\n                                                                                    onClick={() =>\r\n                                                                                        this.handleClick(\r\n                                                                                            {\r\n                                                                                                type:\r\n                                                                                                    \"code3\",\r\n                                                                                                ...code3_item\r\n                                                                                            }\r\n                                                                                        )\r\n                                                                                    }\r\n                                                                                    style={{\r\n                                                                                        cursor:\r\n                                                                                            \"pointer\"\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    {\r\n                                                                                        code3_item.name\r\n                                                                                    }\r\n                                                                                </span>\r\n                                                                            </Col>\r\n                                                                        )\r\n                                                                    ) : (\r\n                                                                        <Col\r\n                                                                            md={\r\n                                                                                8\r\n                                                                            }\r\n                                                                        >\r\n                                                                            <span\r\n                                                                                onClick={() =>\r\n                                                                                    this.handleClick(\r\n                                                                                        {\r\n                                                                                            type:\r\n                                                                                                \"code3\",\r\n                                                                                            ...code3_item\r\n                                                                                        }\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                style={{\r\n                                                                                    cursor:\r\n                                                                                        \"pointer\"\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    code3_item.name\r\n                                                                                }\r\n                                                                            </span>\r\n                                                                        </Col>\r\n                                                                    )}\r\n\r\n                                                                    {/*HIDDEN BUTTONS  */}\r\n\r\n                                                                    {!this.state\r\n                                                                        .toggle ? (\r\n                                                                        // HIDDEN - UNHIDE BUTTONS\r\n                                                                        <Col>\r\n                                                                            <span\r\n                                                                                onClick={() =>\r\n                                                                                    this.showButtons(\r\n                                                                                        {\r\n                                                                                            type:\r\n                                                                                                \"code3\",\r\n                                                                                            ...code3_item\r\n                                                                                        }\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                style={{\r\n                                                                                    float:\r\n                                                                                        \"right\",\r\n                                                                                    cursor:\r\n                                                                                        \"pointer\"\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                <i\r\n                                                                                    onClick={() =>\r\n                                                                                        this.showButtons(\r\n                                                                                            {\r\n                                                                                                type:\r\n                                                                                                    \"code3\",\r\n                                                                                                ...code3_item\r\n                                                                                            }\r\n                                                                                        )\r\n                                                                                    }\r\n                                                                                    style={{\r\n                                                                                        color:\r\n                                                                                            \"black\",\r\n                                                                                        cursor:\r\n                                                                                            \"pointer\"\r\n                                                                                    }}\r\n                                                                                    className=\"fa fa-chevron-circle-left fa-lg icon\"\r\n                                                                                    aria-hidden=\"true\"\r\n                                                                                />\r\n                                                                            </span>\r\n                                                                        </Col>\r\n                                                                    ) : this\r\n                                                                          .state\r\n                                                                          .code3\r\n                                                                          .id ===\r\n                                                                      code3_item.id ? (\r\n                                                                        //   VISIBLE BUTTONS - HIDE/ DELETE/ EDIT BUTTONS\r\n                                                                        <Col className=\"my-auto\">\r\n                                                                            <Fragment>\r\n                                                                                <span\r\n                                                                                    style={{\r\n                                                                                        float:\r\n                                                                                            \"right\"\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    <i\r\n                                                                                        onClick={() =>\r\n                                                                                            this.hideButtons(\r\n                                                                                                {\r\n                                                                                                    type:\r\n                                                                                                        \"code3\",\r\n                                                                                                    ...code3_item\r\n                                                                                                }\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                        style={{\r\n                                                                                            color:\r\n                                                                                                \"black\",\r\n                                                                                            cursor:\r\n                                                                                                \"pointer\"\r\n                                                                                        }}\r\n                                                                                        className=\"fa fa-chevron-circle-right fa-lg icon\"\r\n                                                                                        aria-hidden=\"true\"\r\n                                                                                    />\r\n                                                                                </span>\r\n                                                                                <span\r\n                                                                                    style={{\r\n                                                                                        float:\r\n                                                                                            \"right\"\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    <i\r\n                                                                                        onClick={() =>\r\n                                                                                            this.editOn(\r\n                                                                                                {\r\n                                                                                                    type:\r\n                                                                                                        \"code3\",\r\n                                                                                                    ...code3_item\r\n                                                                                                }\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                        style={{\r\n                                                                                            color:\r\n                                                                                                \"black\",\r\n                                                                                            cursor:\r\n                                                                                                \"pointer\"\r\n                                                                                        }}\r\n                                                                                        className=\"fa fa-edit fa-lg icon\"\r\n                                                                                        aria-hidden=\"true\"\r\n                                                                                    />\r\n                                                                                </span>\r\n                                                                                <span\r\n                                                                                    style={{\r\n                                                                                        float:\r\n                                                                                            \"right\"\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    <i\r\n                                                                                        onClick={() =>\r\n                                                                                            this.handleDelete(\r\n                                                                                                {\r\n                                                                                                    type:\r\n                                                                                                        \"code3\",\r\n                                                                                                    ...code3_item\r\n                                                                                                }\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                        style={{\r\n                                                                                            color:\r\n                                                                                                \"black\",\r\n                                                                                            cursor:\r\n                                                                                                \"pointer\"\r\n                                                                                        }}\r\n                                                                                        className=\"fa fa-minus-circle fa-lg mr-1 icon\"\r\n                                                                                        aria-hidden=\"true\"\r\n                                                                                    />\r\n                                                                                </span>\r\n                                                                            </Fragment>\r\n                                                                        </Col>\r\n                                                                    ) : (\r\n                                                                        // HIDDEN - UNHIDE BUTTONS\r\n                                                                        <Col>\r\n                                                                            <span\r\n                                                                                onClick={() =>\r\n                                                                                    this.showButtons(\r\n                                                                                        {\r\n                                                                                            type:\r\n                                                                                                \"code3\",\r\n                                                                                            ...code3_item\r\n                                                                                        }\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                style={{\r\n                                                                                    float:\r\n                                                                                        \"right\",\r\n                                                                                    cursor:\r\n                                                                                        \"pointer\"\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                <i\r\n                                                                                    onClick={() =>\r\n                                                                                        this.showButtons(\r\n                                                                                            {\r\n                                                                                                type:\r\n                                                                                                    \"code3\",\r\n                                                                                                ...code3_item\r\n                                                                                            }\r\n                                                                                        )\r\n                                                                                    }\r\n                                                                                    style={{\r\n                                                                                        color:\r\n                                                                                            \"black\",\r\n                                                                                        cursor:\r\n                                                                                            \"pointer\"\r\n                                                                                    }}\r\n                                                                                    className=\"fa fa-chevron-circle-left fa-lg\"\r\n                                                                                    aria-hidden=\"true\"\r\n                                                                                />\r\n                                                                            </span>\r\n                                                                        </Col>\r\n                                                                    )}\r\n                                                                </Row>\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    ))}\r\n                                            </tbody>\r\n                                        </Table>\r\n                                    </Col>\r\n                                )}\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Fade>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    dsat_code1: state.surveys.dsat_code1,\r\n    bb_driver_code2: state.surveys.bb_driver_code2,\r\n    bb_driver_code3: state.surveys.bb_driver_code3,\r\n    bbState: state.surveys.bbState,\r\n    rcas: state.surveys.rcas\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    addDsatCode1,\r\n    addBbDriverCode2,\r\n    addBbDriverCode3,\r\n    deleteDsatCode1,\r\n    updateDsatCode1,\r\n    updateBbDriverCode2,\r\n    updateBBDriverState,\r\n    deleteBbDriverCode2,\r\n    deleteBbDriverCode3,\r\n    updateBbDriverCode3\r\n})(BottomboxDrivers);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Table, Row, Col, Collapse } from \"reactstrap\";\r\nimport SurveyDetails from \"./SurveyDetails\";\r\n\r\nclass SurveyList extends Component {\r\n    state = {\r\n        activeItem: {},\r\n        isOpen: false\r\n    };\r\n    handleClick = item => {\r\n        // this.props.getSurvey(item);\r\n        // this.props.getAgentDetails(item.operator_lan_id);\r\n        this.setState((state, props) => ({\r\n            activeItem: item,\r\n            // agent: this.props.agent,\r\n            isOpen: true\r\n        }));\r\n    };\r\n    closeCallback = x => {\r\n        this.setState((state, props) => ({\r\n            isOpen: false\r\n        }));\r\n    };\r\n    survey_list = list => {\r\n        if (list) {\r\n            return list;\r\n        }\r\n        return [];\r\n    };\r\n\r\n    style = { color: \"white\" };\r\n\r\n    render() {\r\n        if (this.props.survey_list) {\r\n            return (\r\n                <Fragment>\r\n                    <Table size=\"sm\">\r\n                        <thead style={this.style}>\r\n                            <tr>\r\n                                <th>Survey Number</th>\r\n                                <th>Customer Name</th>\r\n\r\n                                <th>Average Score</th>\r\n                                <th>Survey Category</th>\r\n                                <th>RCA</th>\r\n                                <th>Date Issued</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody style={this.style}>\r\n                            {this.survey_list(this.props.survey_list)\r\n                                .sort(\r\n                                    (a, b) =>\r\n                                        new Date(b.date_issued) -\r\n                                        new Date(a.date_issued)\r\n                                )\r\n                                .map((survey, i) => (\r\n                                    <Fragment key={i}>\r\n                                        <tr>\r\n                                            <td\r\n                                                style={{\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={() =>\r\n                                                    this.handleClick(survey)\r\n                                                }\r\n                                            >\r\n                                                {survey.reference_number}\r\n                                            </td>\r\n                                            <td>\r\n                                                {survey.first_name}{\" \"}\r\n                                                {survey.last_name}\r\n                                            </td>\r\n\r\n                                            <td>{survey.average_score}</td>\r\n                                            <td>\r\n                                                {survey.bottombox === 1\r\n                                                    ? \"Bottombox\"\r\n                                                    : \"Topbox\"}\r\n                                            </td>\r\n                                            <td>\r\n                                                {survey.completed === true\r\n                                                    ? \"Completed\"\r\n                                                    : \"Not Completed\"}\r\n                                            </td>\r\n                                            <td>{survey.date_issued}</td>\r\n                                        </tr>\r\n                                        {this.state.activeItem ? (\r\n                                            this.state.activeItem\r\n                                                .reference_number ===\r\n                                                survey.reference_number && (\r\n                                                <tr>\r\n                                                    <td colSpan={7}>\r\n                                                        <Collapse\r\n                                                            isOpen={\r\n                                                                this.state\r\n                                                                    .isOpen\r\n                                                            }\r\n                                                        >\r\n                                                            <Row>\r\n                                                                <Col>\r\n                                                                    <SurveyDetails\r\n                                                                        survey={\r\n                                                                            this\r\n                                                                                .state\r\n                                                                                .activeItem\r\n                                                                        }\r\n                                                                        parentCallback={\r\n                                                                            this\r\n                                                                                .closeCallback\r\n                                                                        }\r\n                                                                    />\r\n                                                                </Col>\r\n                                                                {/* <Col md={6}>\r\n                                                    <RCAForm\r\n                                                    survey={\r\n                                                        this.state\r\n                                                        .activeItem\r\n                                                    }\r\n                                                    parentCallback={\r\n                                                        this.closeCallback\r\n                                                    }\r\n                                                    />\r\n                                                </Col> */}\r\n                                                            </Row>\r\n                                                        </Collapse>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        ) : (\r\n                                            <tr>\r\n                                                <td></td>\r\n                                            </tr>\r\n                                        )}\r\n                                    </Fragment>\r\n                                ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <Fragment>\r\n                    <Row>\r\n                        <Col>No Data</Col>\r\n                    </Row>\r\n                </Fragment>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default SurveyList;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Label,\r\n    Button,\r\n    Badge\r\n} from \"reactstrap\";\r\n\r\nimport {\r\n    updateAgentComponentState,\r\n    getAgent,\r\n    updateAgent\r\n} from \"../../../actions/surveyActions\";\r\n\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nimport StackedBarChart from \"../dashboard/Charts/StackedBarChart\";\r\nimport SimpleDataInput from \"./SimpleDataInput\";\r\nimport SurveyList from \"./SurveyList\";\r\n\r\nclass AgentsComponent extends Component {\r\n    state = {\r\n        table: {},\r\n        modal: false,\r\n        email: \"\",\r\n        location: \"\",\r\n        name: \"\",\r\n        operator_lan_id: \"\",\r\n        skill: \"\",\r\n        surveys: [],\r\n        team_lead: \"\",\r\n        wave: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            ...this.state,\r\n            ...this.props.agent\r\n        });\r\n    }\r\n\r\n    agent_list = this.props.agents.map(agent => (\r\n        <option key={agent.operator_lan_id} value={agent.name}>\r\n            {agent.name}\r\n        </option>\r\n    ));\r\n\r\n    team_lead_list = this.props.teamleads.map(team_lead => (\r\n        <option key={team_lead.name} value={team_lead.name}>\r\n            {team_lead.name}\r\n        </option>\r\n    ));\r\n\r\n    skills_list = this.props.skills.map(skill => (\r\n        <option key={skill.name} value={skill.name}>\r\n            {skill.name}\r\n        </option>\r\n    ));\r\n\r\n    agent_survey_list = list => {\r\n        if (list) {\r\n            let x = list.map(y => {\r\n                let z = {};\r\n                this.props.surveys.forEach(item => {\r\n                    if (item.reference_number === y) {\r\n                        return (z = item);\r\n                    }\r\n                });\r\n\r\n                return z;\r\n            });\r\n            return x;\r\n        }\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        // need to include operator_lan_id and name to make PUT requests\r\n        let agentData = this.state;\r\n        delete agentData.modal;\r\n        agentData.operator_lan_id = this.props.agent.operator_lan_id;\r\n        agentData.name = this.props.agent.name;\r\n\r\n        this.props.updateAgent(agentData);\r\n    };\r\n\r\n    handleModalState = x => {\r\n        this.setState({ modal: x });\r\n    };\r\n\r\n    handleAgentSelect = e => {\r\n        const { selectedIndex } = e.target.options;\r\n\r\n        // console.log(selectedIndex);\r\n\r\n        if (selectedIndex != 0) {\r\n            const { agents } = this.props;\r\n\r\n            const agent = agents[selectedIndex - 1];\r\n\r\n            // need to convert null to \"\" to make input controllable\r\n\r\n            if (agent.skill === null) {\r\n                agent.skill = \"\";\r\n            }\r\n\r\n            if (agent.team_lead === null) {\r\n                agent.team_lead = \"\";\r\n            }\r\n\r\n            this.props.getAgent(agent);\r\n            this.setState({\r\n                ...agent\r\n            });\r\n        } else {\r\n            let agent = {};\r\n            this.props.getAgent(agent);\r\n            this.setState({\r\n                table: {},\r\n\r\n                email: \"\",\r\n                location: \"\",\r\n                name: \"\",\r\n                operator_lan_id: \"\",\r\n                skill: \"\",\r\n                surveys: [],\r\n                team_lead: \"\",\r\n                wave: \"\"\r\n            });\r\n        }\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    getListIncompleteAgentForm = () => {\r\n        return this.props.agents.filter(agent =>\r\n            Object.values(agent).includes(null || undefined || \"\")\r\n        ).length;\r\n    };\r\n\r\n    handleModal = table => {\r\n        this.setState((state, props) => ({ modal: !state.modal, table }));\r\n    };\r\n\r\n    render() {\r\n        let skill_table = {\r\n            label_name: \"Add Agent Skill\",\r\n            data_name: \"addSkill\"\r\n        };\r\n        let team_lead_table = {\r\n            label_name: \"Add Team Lead\",\r\n            data_name: \"addTeamLead\"\r\n        };\r\n        return (\r\n            <Fragment>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <h4>\r\n                            <strong>Agents View</strong>{\" \"}\r\n                            <span style={{ fontSize: \"14px\" }}>\r\n                                <Badge color=\"danger\" pill>\r\n                                    {this.getListIncompleteAgentForm()}\r\n                                </Badge>\r\n                            </span>\r\n                        </h4>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Label for=\"name\">\r\n                                                Select Agent\r\n                                            </Label>\r\n                                            <Input\r\n                                                type=\"select\"\r\n                                                name=\"name\"\r\n                                                id=\"name\"\r\n                                                value={this.state.name}\r\n                                                onChange={\r\n                                                    this.handleAgentSelect\r\n                                                }\r\n                                            >\r\n                                                <option>-----</option>\r\n                                                {this.agent_list}\r\n                                            </Input>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Label for=\"operator_lan_id\">\r\n                                                Operator Lan ID\r\n                                            </Label>\r\n                                            <Input\r\n                                                type=\"input\"\r\n                                                name=\"operator_lan_id\"\r\n                                                id=\"operator_lan_id\"\r\n                                                value={\r\n                                                    this.state.operator_lan_id\r\n                                                }\r\n                                                onChange={this.handleChange}\r\n                                                readOnly\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"mt-3\">\r\n                                        <Col>\r\n                                            <Label for=\"email\">Email</Label>\r\n                                            <Input\r\n                                                type=\"input\"\r\n                                                name=\"email\"\r\n                                                id=\"email\"\r\n                                                value={this.state.email}\r\n                                                onChange={this.handleChange}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <Label for=\"location\">\r\n                                                Location\r\n                                            </Label>\r\n                                            <Input\r\n                                                type=\"input\"\r\n                                                name=\"location\"\r\n                                                id=\"location\"\r\n                                                value={this.state.location}\r\n                                                onChange={this.handleChange}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <Label for=\"wave\">Wave</Label>\r\n                                            <Input\r\n                                                type=\"input\"\r\n                                                name=\"wave\"\r\n                                                id=\"emawaveil\"\r\n                                                value={this.state.wave}\r\n                                                onChange={this.handleChange}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"mt-3\">\r\n                                        <Col>\r\n                                            <Label for=\"skill\">\r\n                                                Skills{\" \"}\r\n                                                <i\r\n                                                    onClick={() =>\r\n                                                        this.handleModal(\r\n                                                            skill_table\r\n                                                        )\r\n                                                    }\r\n                                                    style={{\r\n                                                        color: \"green\",\r\n                                                        cursor: \"pointer\"\r\n                                                    }}\r\n                                                    className=\"fa fa-plus icon\"\r\n                                                    aria-hidden=\"true\"\r\n                                                />\r\n                                                <SimpleDataInput\r\n                                                    data_name={\r\n                                                        this.state.table\r\n                                                            .data_name\r\n                                                    }\r\n                                                    label_name={\r\n                                                        this.state.table\r\n                                                            .label_name\r\n                                                    }\r\n                                                    modal={this.state.modal}\r\n                                                    onModalChange={\r\n                                                        this.handleModalState\r\n                                                    }\r\n                                                    table_data=\"\"\r\n                                                />\r\n                                            </Label>\r\n                                            <Input\r\n                                                type=\"select\"\r\n                                                name=\"skill\"\r\n                                                id=\"skill\"\r\n                                                value={this.state.skill}\r\n                                                onChange={this.handleChange}\r\n                                            >\r\n                                                <option>-----</option>\r\n                                                {this.skills_list}\r\n                                            </Input>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Label for=\"team_lead\">\r\n                                                Team Lead{\" \"}\r\n                                                <i\r\n                                                    onClick={() =>\r\n                                                        this.handleModal(\r\n                                                            team_lead_table\r\n                                                        )\r\n                                                    }\r\n                                                    style={{\r\n                                                        color: \"green\",\r\n                                                        cursor: \"pointer\"\r\n                                                    }}\r\n                                                    className=\"fa fa-plus icon\"\r\n                                                    aria-hidden=\"true\"\r\n                                                />\r\n                                                <SimpleDataInput\r\n                                                    data_name={\r\n                                                        this.state.table\r\n                                                            .data_name\r\n                                                    }\r\n                                                    label_name={\r\n                                                        this.state.table\r\n                                                            .label_name\r\n                                                    }\r\n                                                    modal={this.state.modal}\r\n                                                    onModalChange={\r\n                                                        this.handleModalState\r\n                                                    }\r\n                                                    table_data=\"\"\r\n                                                />\r\n                                            </Label>\r\n                                            <Input\r\n                                                type=\"select\"\r\n                                                name=\"team_lead\"\r\n                                                id=\"team_lead\"\r\n                                                value={this.state.team_lead}\r\n                                                onChange={this.handleChange}\r\n                                            >\r\n                                                <option>-----</option>\r\n                                                {this.team_lead_list}\r\n                                            </Input>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"mt-3\">\r\n                                        <Col>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                onClick={this.handleSubmit}\r\n                                            >\r\n                                                Update\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Form>\r\n                            </Col>\r\n                            {this.props.agent.surveys && (\r\n                                <Col md={6}>\r\n                                    <Row>\r\n                                        <Col>Survey Chart / List</Col>\r\n                                    </Row>\r\n\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <StackedBarChart\r\n                                                filtered_list={\r\n                                                    this.props\r\n                                                        .filtered_agent_data\r\n                                                }\r\n                                                chart_parent={\r\n                                                    <Row>\r\n                                                        <Col>\r\n                                                            <Bar\r\n                                                                data={{\r\n                                                                    datasets: [\r\n                                                                        {\r\n                                                                            label:\r\n                                                                                \"Topbox\",\r\n                                                                            data: this.props.agent_chart_data.map(\r\n                                                                                item =>\r\n                                                                                    Object.values(\r\n                                                                                        item\r\n                                                                                    )[0].filter(\r\n                                                                                        survey =>\r\n                                                                                            survey.bottombox !=\r\n                                                                                            1\r\n                                                                                    )\r\n                                                                                        .length\r\n                                                                            ),\r\n                                                                            backgroundColor:\r\n                                                                                \"#ffed00\"\r\n                                                                        },\r\n                                                                        {\r\n                                                                            label:\r\n                                                                                \"Bottombox\",\r\n                                                                            data: this.props.agent_chart_data.map(\r\n                                                                                item =>\r\n                                                                                    Object.values(\r\n                                                                                        item\r\n                                                                                    )[0].filter(\r\n                                                                                        survey =>\r\n                                                                                            survey.bottombox ===\r\n                                                                                            1\r\n                                                                                    )\r\n                                                                                        .length\r\n                                                                            ),\r\n                                                                            backgroundColor:\r\n                                                                                \"#64ff00\"\r\n                                                                        }\r\n                                                                    ],\r\n                                                                    labels: this.props.agent_chart_data.map(\r\n                                                                        item =>\r\n                                                                            Object.keys(\r\n                                                                                item\r\n                                                                            )[0]\r\n                                                                    )\r\n                                                                }}\r\n                                                                options={{\r\n                                                                    responsive: true,\r\n                                                                    maintainAspectRatio: false,\r\n\r\n                                                                    scales: {\r\n                                                                        xAxes: [\r\n                                                                            {\r\n                                                                                stacked: true\r\n                                                                            }\r\n                                                                        ],\r\n                                                                        yAxes: [\r\n                                                                            {\r\n                                                                                stacked: true\r\n                                                                            }\r\n                                                                        ]\r\n                                                                    }\r\n                                                                }}\r\n                                                                height={300}\r\n                                                            />\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                }\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"mt-3\">\r\n                                        <Col>\r\n                                            <SurveyList\r\n                                                survey_list={this.props.agent_chart_data\r\n                                                    .map(\r\n                                                        item =>\r\n                                                            Object.values(\r\n                                                                item\r\n                                                            )[0]\r\n                                                    )\r\n                                                    .flat(Infinity)}\r\n                                                // survey_list={this.agent_survey_list(\r\n                                                //     this.props.agent.surveys\r\n                                                // )}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            )}\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    agents: state.surveys.agents,\r\n    agent: state.surveys.agent,\r\n    agentCompState: state.surveys.agentCompState,\r\n    teamleads: state.surveys.teamleads,\r\n    skills: state.surveys.skills,\r\n    surveys: state.surveys.surveys,\r\n    filtered_agent_data: state.surveys.filtered_agent_data,\r\n    chart_data: state.surveys.chart_data,\r\n    agent_chart_data: state.surveys.agent_chart_data\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    updateAgentComponentState,\r\n    getAgent,\r\n    updateAgent\r\n})(AgentsComponent);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport DatatablePage from \"../upload-data/survey-data-table/DatatablePage\";\r\nimport RCATable from \"./RCATable\";\r\n\r\nimport SideBar from \"../../SideBar\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport BottomboxDrivers from \"../components/BottomboxDrivers\";\r\nimport AgentsComponent from \"../components/AgentsComponent\";\r\n\r\nimport {\r\n    Spinner,\r\n    Fade,\r\n    Row,\r\n    Col,\r\n    Collapse,\r\n    Card,\r\n    CardHeader,\r\n    CardBody\r\n} from \"reactstrap\";\r\n\r\nimport {\r\n    getAgents,\r\n    getSurveys,\r\n    getSkills,\r\n    getDsatCode1,\r\n    getBBDriverCode2,\r\n    getBBDriverCode3,\r\n    removeSurvey,\r\n    getTeams,\r\n    getRcas,\r\n    getAllData2\r\n} from \"../../../actions/surveyActions\";\r\n\r\nclass BottomBox extends Component {\r\n    componentDidMount() {\r\n        this.props.getAllData2();\r\n        // console.log(this.props.auth);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                {this.props.isFetching ? (\r\n                    <Spinner\r\n                        style={{\r\n                            width: \"3rem\",\r\n                            height: \"3rem\",\r\n                            top: \"50%\",\r\n                            left: \"50%\",\r\n                            position: \"fixed\"\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <div>\r\n                        <Fade>\r\n                            <div className=\"sidebar-main\">\r\n                                <SideBar />\r\n                            </div>\r\n                        </Fade>\r\n                        <div className=\"main mb-5\">\r\n                            <Collapse isOpen={this.props.survey_view_collapse}>\r\n                                <div className=\"section\">\r\n                                    <Card>\r\n                                        <CardHeader>\r\n                                            <h4>\r\n                                                <strong>Survey View</strong>\r\n                                            </h4>\r\n                                        </CardHeader>\r\n                                        <CardBody>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <Fade>\r\n                                                        <DatatablePage />\r\n                                                    </Fade>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row className=\"mt-3\">\r\n                                                <Col>\r\n                                                    <Fade>\r\n                                                        <RCATable />\r\n                                                    </Fade>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </div>\r\n                            </Collapse>\r\n                            <Collapse isOpen={this.props.agent_view_collapse}>\r\n                                <div className=\"section\">\r\n                                    <Fade>\r\n                                        <AgentsComponent />\r\n                                    </Fade>\r\n                                </div>\r\n                            </Collapse>\r\n                            <div className=\"section\">\r\n                                <Collapse\r\n                                    isOpen={this.props.bottombox_view_collapse}\r\n                                >\r\n                                    <Fade>\r\n                                        <BottomboxDrivers />\r\n                                    </Fade>\r\n                                </Collapse>\r\n                            </div>\r\n                            <div className=\"section\">\r\n                                <Collapse\r\n                                    isOpen={this.props.dashboard_view_collapse}\r\n                                >\r\n                                    <Fade>\r\n                                        <Dashboard />\r\n                                    </Fade>\r\n                                </Collapse>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    surveys: state.surveys.surveys,\r\n    isFetching: state.surveys.isFetching,\r\n    bottombox: state.surveys.bottombox,\r\n    agents: state.surveys.agents,\r\n    rcas: state.surveys.rcas,\r\n    agent_view_collapse: state.surveys.agent_view_collapse,\r\n    bottombox_view_collapse: state.surveys.bottombox_view_collapse,\r\n    survey_view_collapse: state.surveys.survey_view_collapse,\r\n    dashboard_view_collapse: state.surveys.dashboard_view_collapse,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getSurveys,\r\n    getSkills,\r\n    getDsatCode1,\r\n    getBBDriverCode2,\r\n    getBBDriverCode3,\r\n    removeSurvey,\r\n    getTeams,\r\n    getRcas,\r\n    getAgents,\r\n    getAllData2\r\n})(BottomBox);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { withAlert } from \"react-alert\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Alerts extends Component {\r\n    componentDidUpdate(prevProps) {\r\n        const { error, alert, message } = this.props;\r\n\r\n        if (error !== prevProps.error) {\r\n            if (error.msg.username) {\r\n                alert.error(error.msg.username[0]);\r\n            }\r\n            if (error.msg.email) {\r\n                alert.error(error.msg.email[0]);\r\n            }\r\n        }\r\n\r\n        message !== prevProps.message &&\r\n            ((message.surveyDeleted && alert.success(message.surveyDeleted)) ||\r\n                (message.passwordsNotMatch &&\r\n                    alert.error(message.passwordsNotMatch)));\r\n    }\r\n    render() {\r\n        return <Fragment></Fragment>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    error: state.errors,\r\n    message: state.messages\r\n});\r\n\r\nexport default connect(mapStateToProps)(withAlert()(Alerts));\r\n","import React from \"react\";\r\n\r\nimport { Container } from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    add_access_request,\r\n    get_access_request\r\n} from \"../../../../actions/ccmsActions\";\r\n\r\nconst NoAccess = props => {\r\n    const dispatch = useDispatch();\r\n    const user = useSelector(state => state.auth.user);\r\n    const access_request_list = useSelector(state => state.ccms.access_request);\r\n\r\n    console.log(user);\r\n\r\n    return (\r\n        <Container>\r\n            <h2>\r\n                You are currently not authorized to access this app. Click this{\" \"}\r\n                <a href=\"#\" onClick={e => dispatch(add_access_request(user))}>\r\n                    link\r\n                </a>\r\n                to request access{\" \"}\r\n            </h2>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NoAccess;\r\n","import React, { Component } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { Spinner, Container } from \"reactstrap\";\r\nimport NoAccess from \"../ccms/components/Common/NoAccess\";\r\nimport { get_access_request } from \"../../actions/ccmsActions\";\r\n\r\nclass PrivateRoute extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        props.get_access_request();\r\n    }\r\n    //render Ccms if member of CCMS Admin and CcmsOwner else send axios request to request table\r\n\r\n    render() {\r\n        const {\r\n            component: Component,\r\n            auth,\r\n            name,\r\n            access_request_list,\r\n            ...rest\r\n        } = this.props;\r\n\r\n        return (\r\n            <Route\r\n                {...rest}\r\n                render={props => {\r\n                    // CHECK FIRST IF auth.user exists\r\n                    if (auth.user) {\r\n                        if (name == \"Ccms\") {\r\n                            if (\r\n                                (auth.user || {}).group_list.includes(\r\n                                    \"CCMS Admin\"\r\n                                ) ||\r\n                                (auth.user || {}).is_member_of_ccms_owners\r\n                            ) {\r\n                                // USER HAS ACCESS TO CCMS\r\n                                return <Component {...props} />;\r\n                            } else {\r\n                                // USER HAS NO ACCESS TO CCMS\r\n\r\n                                if (access_request_list && auth.user) {\r\n                                    if (\r\n                                        access_request_list.filter(\r\n                                            item =>\r\n                                                item.user.username ==\r\n                                                auth.user.username\r\n                                        ).length != 0\r\n                                    ) {\r\n                                        // Request already exists\r\n                                        return <RequestAlreadyExists />;\r\n                                    }\r\n                                }\r\n\r\n                                return <NoAccess />;\r\n                            }\r\n                        } else if (name == \"BottomBox\") {\r\n                            return <Component {...props} />;\r\n                        }\r\n                    } else {\r\n                        return <Spinner />;\r\n                    }\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst RequestAlreadyExists = props => (\r\n    <Container>\r\n        <h3>You already have requested access. Click here to follow up</h3>\r\n    </Container>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    access_request_list: state.ccms.access_request\r\n});\r\n\r\nexport default connect(mapStateToProps, { get_access_request })(PrivateRoute);\r\n","import React from \"react\";\r\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from \"reactstrap\";\r\nimport \"@fortawesome/fontawesome-free/css/all.css\";\r\nimport dxc from \"../images/dxc.png\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction UserAvatar(props) {\r\n    // If a user avatar is available, return an img tag with the pic\r\n    if (props.user.avatar) {\r\n        return (\r\n            <img\r\n                src={props.user.avatar}\r\n                alt=\"user\"\r\n                className=\"rounded-circle align-self-center mr-2\"\r\n                style={{ width: \"32px\" }}\r\n            ></img>\r\n        );\r\n    }\r\n\r\n    // No avatar available, return a default icon\r\n    return (\r\n        <i\r\n            className=\"far fa-user-circle fa-lg rounded-circle align-self-center mr-2\"\r\n            style={{ width: \"32px\" }}\r\n        ></i>\r\n    );\r\n}\r\n\r\nfunction AuthNavItem(props) {\r\n    // If authenticated, return a dropdown with the user's info and a\r\n    // sign out button\r\n    if (props.isAuthenticated) {\r\n        return (\r\n            <UncontrolledDropdown>\r\n                <DropdownToggle nav caret style={{ color: \"white\" }}>\r\n                    <UserAvatar user={props.user} />\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                    <h5 className=\"dropdown-item-text mb-0\">\r\n                        {props.user.fullname}\r\n                    </h5>\r\n                    <p className=\"dropdown-item-text text-muted mb-0\">\r\n                        {props.user.username}\r\n                    </p>\r\n                    <DropdownItem divider />\r\n                    <DropdownItem>\r\n                        {/* <RouterNavLink\r\n                            to=\"/signout\"\r\n                            className=\"nav-link\"\r\n                            exact\r\n                            style={{ color: \"white\" }}\r\n                        >\r\n                            Sign Out\r\n                        </RouterNavLink> */}\r\n                        <NavLink\r\n                            style={{ cursor: \"pointer\", color: \"black\" }}\r\n                            onClick={event =>\r\n                                (window.location.href = \"/signout\")\r\n                            }\r\n                        >\r\n                            Sign Out\r\n                        </NavLink>\r\n                    </DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n        );\r\n    }\r\n\r\n    // Not authenticated, return a sign in link\r\n    return (\r\n        <NavItem>\r\n            <NavLink\r\n                style={{ cursor: \"pointer\", color: \"white\" }}\r\n                onClick={event => (window.location.href = \"/signin\")}\r\n            >\r\n                Sign In\r\n            </NavLink>\r\n        </NavItem>\r\n    );\r\n}\r\n\r\nclass NavBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { user, isAuthenticated } = this.props.auth;\r\n        return (\r\n            <div className=\"navbar-main\">\r\n                <Navbar\r\n                    style={{\r\n                        backgroundColor: \"black\",\r\n                        padding: \"20px\"\r\n                    }}\r\n                    expand=\"md\"\r\n                    fixed=\"top\"\r\n                >\r\n                    <NavbarBrand>\r\n                        <img src={dxc} width=\"250\" height=\"45\" alt=\"Logo\" />\r\n                    </NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle} />\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav className=\"mr-auto\" navbar>\r\n                            <NavItem>\r\n                                <RouterNavLink\r\n                                    to=\"/cba\"\r\n                                    className=\"nav-link\"\r\n                                    exact\r\n                                    style={{ color: \"white\" }}\r\n                                >\r\n                                    Home\r\n                                </RouterNavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <Nav className=\"justify-content-end\" navbar>\r\n                            <NavItem></NavItem>\r\n                            <AuthNavItem\r\n                                isAuthenticated={isAuthenticated}\r\n                                authButtonMethod={this.props.authButtonMethod}\r\n                                user={user}\r\n                            />\r\n                        </Nav>\r\n                    </Collapse>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(NavBar);\r\n","import React from \"react\";\r\nimport { Alert } from \"reactstrap\";\r\n\r\nexport default class ErrorMessage extends React.Component {\r\n    render() {\r\n        let debug = null;\r\n        if (this.props.debug) {\r\n            debug = (\r\n                <pre className=\"alert-pre border bg-light p-2\">\r\n                    <code>{this.props.debug}</code>\r\n                </pre>\r\n            );\r\n        }\r\n        return (\r\n            <Alert color=\"danger\">\r\n                <p className=\"mb-3\">{this.props.message}</p>\r\n                {debug}\r\n            </Alert>\r\n        );\r\n    }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport { Jumbotron, Row, Col, Container, Fade, Spinner } from \"reactstrap\";\r\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\r\nimport image1 from \"../images/feedback.png\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst WelcomeContent = props => {\r\n    // If authenticated, greet the user\r\n    if (props.isAuthenticated) {\r\n        return (\r\n            <div className=\"mt-2\">\r\n                <h4 style={{ color: \"white\" }}>\r\n                    Welcome {props.user.fullname}!\r\n                </h4>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Not authenticated, present a sign in button\r\n    return (\r\n        <Spinner\r\n            style={{\r\n                width: \"3rem\",\r\n                height: \"3rem\",\r\n                top: \"50%\",\r\n                left: \"50%\",\r\n                position: \"fixed\"\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nclass Welcome extends React.Component {\r\n    state = {\r\n        isHovered: false,\r\n        target_div: null\r\n    };\r\n\r\n    handleMouseEnter = e => {\r\n        this.setState({ isHovered: true, target_div: e.target.id });\r\n    };\r\n\r\n    handleMouseLeave = () => {\r\n        this.setState({ isHovered: false, target_div: null });\r\n    };\r\n\r\n    div_style = section => {\r\n        return {\r\n            backgroundColor: \"black\",\r\n            width:\r\n                this.state.target_div === null && !this.state.isHovered\r\n                    ? \"50%\"\r\n                    : this.state.isHovered && this.state.target_div === section\r\n                    ? \"80%\"\r\n                    : \"20%\",\r\n            height: \"400px\",\r\n            transition: \"width 0.5s\"\r\n        };\r\n    };\r\n\r\n    render() {\r\n        const { user, isAuthenticated } = this.props.auth;\r\n        return (\r\n            <Fragment>\r\n                <Jumbotron style={{ backgroundColor: \"black\" }}>\r\n                    <div className=\"jumbotroncontent\">\r\n                        <h1 className=\"mb-2 mt-4\" style={{ color: \"white\" }}>\r\n                            DXC - CBA App Site\r\n                        </h1>\r\n                        <WelcomeContent\r\n                            isAuthenticated={isAuthenticated}\r\n                            user={user}\r\n                        />\r\n                    </div>\r\n                </Jumbotron>\r\n                <div className=\"section-main\">\r\n                    <Fade>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col\r\n                                // md={this.state.isHovered === true ? 6 : 3}\r\n                                >\r\n                                    <RouterNavLink\r\n                                        to=\"/bottombox\"\r\n                                        className=\"section-navlink\"\r\n                                        exact\r\n                                        style={{ textDecoration: \"none\" }}\r\n                                    >\r\n                                        <h5 id=\"section1\">CBA Surveys</h5>\r\n                                    </RouterNavLink>\r\n                                </Col>\r\n                                <Col>\r\n                                    <RouterNavLink\r\n                                        to=\"/ccms\"\r\n                                        className=\"section-navlink\"\r\n                                        exact\r\n                                        style={{ textDecoration: \"none\" }}\r\n                                    >\r\n                                        <h5 id=\"section2\">CCMS</h5>\r\n                                    </RouterNavLink>\r\n                                </Col>\r\n                                <Col>\r\n                                    <a\r\n                                        href=\"https://10.235.83.26/eval\"\r\n                                        className=\"section-navlink\"\r\n                                        style={{ textDecoration: \"none\" }}\r\n                                    >\r\n                                        <h5 id=\"section3\">\r\n                                            Quality Evaluatons\r\n                                        </h5>\r\n                                    </a>\r\n                                    {/* <RouterNavLink\r\n                                        to=\"/eval\"\r\n                                        className=\"section-navlink\"\r\n                                        exact\r\n                                        style={{ textDecoration: \"none\" }}\r\n                                    >\r\n                                        <h5 id=\"section3\">\r\n                                            Quality Evaluatons\r\n                                        </h5>\r\n                                    </RouterNavLink> */}\r\n                                </Col>\r\n                                <Col>\r\n                                    <RouterNavLink\r\n                                        to=\"/\"\r\n                                        className=\"section-navlink\"\r\n                                        exact\r\n                                        style={{ textDecoration: \"none\" }}\r\n                                    >\r\n                                        <h5 id=\"section4\">Email Factory</h5>\r\n                                    </RouterNavLink>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Fade>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, [])(Welcome);\r\n","import {\r\n    GET_SURVEYS,\r\n    ADD_SURVEY,\r\n    DELETE_SURVEY,\r\n    GET_SURVEY,\r\n    REMOVE_SURVEY,\r\n    GET_AGENT,\r\n    GET_SKILLS,\r\n    GET_DSAT_CODE1,\r\n    GET_BB_DRIVER_CODE2,\r\n    GET_BB_DRIVER_CODE3,\r\n    GET_TEAMS,\r\n    ADD_RCA,\r\n    FETCHING,\r\n    ADD_SKILL,\r\n    GET_TEAMLEADS,\r\n    ADD_TEAMLEAD,\r\n    ADD_DSAT_CODE1,\r\n    ADD_BB_DRIVER_CODE2,\r\n    ADD_BB_DRIVER_CODE3,\r\n    ADD_TEAM,\r\n    GET_RCAS,\r\n    GET_BOTTOMBOX,\r\n    GET_AGENTS,\r\n    STOP_FETCHING,\r\n    GET_ALL_DATA,\r\n    UPDATE_SURVEY,\r\n    UPDATE_RCA,\r\n    DELETE_RCA,\r\n    UPDATE_AGENT,\r\n    ADD_AGENT,\r\n    GET_RCA,\r\n    REMOVE_RCA,\r\n    DELETE_DSAT_CODE1,\r\n    UPDATE_DSAT_CODE1,\r\n    UPDATE_BB_DRIVER_CODE2,\r\n    UPDATE_BOTTOMBOX_DRIVER_STATE,\r\n    DELETE_BB_DRIVER_CODE2,\r\n    DELETE_BB_DRIVER_CODE3,\r\n    UPDATE_BB_DRIVER_CODE3,\r\n    UPDATE_AGENTS_COMPONENT_STATE,\r\n    UPDATE_CHART_DATA,\r\n    UPDATE_AGENT_CHART_DATA,\r\n    UPDATE_SELECTED_MONTH,\r\n    UPDATE_SELECTED_WEEK,\r\n    UPDATE_SELECTED_YEAR,\r\n    COLLAPSE_AGENT_VIEW,\r\n    COLLAPSE_BOTTOMBOX_DRIVER_VIEW,\r\n    COLLAPSE_SURVEY_VIEW,\r\n    COLLAPSE_DASHBOARD_VIEW,\r\n    ADD_FAILED_SURVEY,\r\n    GET_BOTTOMBOX_SURVEY_VIEW,\r\n    GET_TOPBOX_SURVEY_VIEW,\r\n    GET_COMPLETED_SURVEY_VIEW,\r\n    GET_ALL_SURVEY_VIEW\r\n} from \"../actions/types\";\r\nimport { keys } from \"../components/bottombox/upload-data/helpers/obj-keys\";\r\n\r\nlet agent_headers = [\r\n    \"operator_lan_id\",\r\n    \"surveys\",\r\n    \"name\",\r\n    \"email\",\r\n    \"location\",\r\n    \"wave\",\r\n    \"skill\",\r\n    \"team_lead\"\r\n];\r\n\r\n// var now = new Date();\r\n// var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n// var lastSunday = new Date(today.setDate(today.getDate() - today.getDay()));\r\n// console.log(lastSunday);\r\n\r\nlet curr = new Date();\r\n\r\nlet curr_year = curr.getFullYear();\r\n\r\nconst getMonth = givenDate => {\r\n    let date = new Date(givenDate);\r\n\r\n    let monthName = new Intl.DateTimeFormat(\"en-US\", { month: \"short\" }).format;\r\n    let longName = monthName(date); // \"July\"\r\n\r\n    return longName;\r\n};\r\n\r\nlet get_data = filtered_list => {\r\n    let curr = new Date();\r\n\r\n    let curr_year = curr.getFullYear();\r\n    let curr_month = curr.getMonth() + 1;\r\n\r\n    let monthRangeInt = Array.from(new Array(curr_month), (x, i) => i + 1);\r\n\r\n    // filter data per month\r\n    let surveyCountPerMonth = monthRangeInt.map(month => {\r\n        let filteredSurveyPerMonth = filtered_list.filter(\r\n            survey =>\r\n                new Date(survey.date_issued).getMonth() + 1 == month &&\r\n                new Date(survey.date_issued).getFullYear() == curr_year\r\n        );\r\n\r\n        let monthName = new Intl.DateTimeFormat(\"en-US\", { month: \"short\" })\r\n            .format;\r\n        let name = monthName(new Date(`${curr_year}-${month}-01`));\r\n\r\n        return {\r\n            [name]: filteredSurveyPerMonth\r\n        };\r\n    });\r\n\r\n    return surveyCountPerMonth;\r\n};\r\n\r\nconst initialState = {\r\n    upload_failed_surveys: [],\r\n    colors: [\"#ffed00\", \"#64ff00\", \"#00c9ff\", \"white\", \"#666666\", \"#d9d9d9\"],\r\n    agent_view_collapse: false,\r\n    bottombox_view_collapse: false,\r\n    survey_view_collapse: true,\r\n    dashboard_view_collapse: true,\r\n    surveys: [],\r\n    agents: [],\r\n    headers: keys,\r\n    survey: {},\r\n    agent: {},\r\n    skills: [],\r\n    dsat_code1: [],\r\n    bb_driver_code2: [],\r\n    bb_driver_code3: [],\r\n    teams: [],\r\n    rcas: null,\r\n    teamleads: [],\r\n    bottombox: [],\r\n    isFetching: false,\r\n    agent_headers,\r\n    rca: {},\r\n    doughnutChartSurveyData: [],\r\n    pieChartCompletedSurveysCount: [],\r\n    rcaTopDriversLabels: {},\r\n    bbState: {\r\n        name: \"\",\r\n        edit: false,\r\n        toggle: false,\r\n        code1_name: \"\",\r\n        code2_name: \"\",\r\n        code1: \"\",\r\n        code2: \"\",\r\n        code2_list: [],\r\n        code3_list: []\r\n    },\r\n    agentCompState: {},\r\n    filtered_agent_data: [],\r\n    chart_data: [],\r\n    selectedMonth: \"\",\r\n    selectedWeek: \"\",\r\n    selectedYear: curr_year,\r\n    yearSelection: [],\r\n    agent_chart_data: [],\r\n    surveys_view: []\r\n    // drivername: number of rcas with the drivername\r\n};\r\n\r\nconst surveyReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_ALL_DATA:\r\n            const {\r\n                surveys,\r\n                rcas,\r\n                skills,\r\n                dsat_code1,\r\n                bb_driver_code2,\r\n                bb_driver_code3,\r\n                teams,\r\n                agents,\r\n                teamleads\r\n            } = action.payload;\r\n            return {\r\n                ...state,\r\n                surveys: surveys,\r\n                surveys_view: surveys,\r\n                bottombox: surveys.filter(\r\n                    item => item.bottombox == 1 && !item.rca\r\n                ),\r\n                pieChartCompletedSurveysCount: [\r\n                    surveys.filter(item => item.completed == true).length,\r\n                    surveys.length\r\n                ],\r\n                rcas,\r\n                skills,\r\n                dsat_code1,\r\n                bb_driver_code2,\r\n                bb_driver_code3,\r\n                teams,\r\n                agents,\r\n                teamleads,\r\n                yearSelection: [\r\n                    new Date().getFullYear(),\r\n\r\n                    ...new Set(\r\n                        surveys.map(survey =>\r\n                            new Date(survey.date_issued).getFullYear()\r\n                        )\r\n                    )\r\n                ],\r\n                chart_data: get_data(\r\n                    surveys\r\n                        .map(survey => {\r\n                            let x = rcas.filter(\r\n                                rca =>\r\n                                    rca.surveyed_ticket ===\r\n                                    survey.reference_number\r\n                            )[0];\r\n                            return { ...survey, ...x };\r\n                        })\r\n                        .filter(\r\n                            data =>\r\n                                new Date(data.date_issued).getFullYear() ===\r\n                                curr_year\r\n                        )\r\n                )\r\n            };\r\n            break;\r\n        case GET_ALL_SURVEY_VIEW:\r\n            return {\r\n                ...state,\r\n                surveys_view: state.surveys\r\n            };\r\n        case GET_COMPLETED_SURVEY_VIEW:\r\n            return {\r\n                ...state,\r\n                surveys_view: state.surveys.filter(\r\n                    survey => survey.completed === true\r\n                )\r\n            };\r\n        case GET_BOTTOMBOX_SURVEY_VIEW:\r\n            return {\r\n                ...state,\r\n                surveys_view: state.surveys.filter(\r\n                    survey =>\r\n                        survey.bottombox === 1 && survey.completed === false\r\n                )\r\n            };\r\n        case GET_TOPBOX_SURVEY_VIEW:\r\n            return {\r\n                ...state,\r\n                surveys_view: state.surveys.filter(\r\n                    survey =>\r\n                        survey.bottombox === 0 && survey.completed === false\r\n                )\r\n            };\r\n        case COLLAPSE_DASHBOARD_VIEW:\r\n            return {\r\n                ...state,\r\n                dashboard_view_collapse: !state.dashboard_view_collapse\r\n            };\r\n        case COLLAPSE_SURVEY_VIEW:\r\n            return {\r\n                ...state,\r\n                survey_view_collapse: !state.survey_view_collapse\r\n            };\r\n        case COLLAPSE_BOTTOMBOX_DRIVER_VIEW:\r\n            return {\r\n                ...state,\r\n                bottombox_view_collapse: !state.bottombox_view_collapse\r\n            };\r\n        case COLLAPSE_AGENT_VIEW:\r\n            return {\r\n                ...state,\r\n                agent_view_collapse: !state.agent_view_collapse\r\n            };\r\n        case UPDATE_SELECTED_YEAR:\r\n            return {\r\n                ...state,\r\n                selectedWeek: action.payload\r\n            };\r\n        case UPDATE_SELECTED_WEEK:\r\n            return {\r\n                ...state,\r\n                selectedWeek: action.payload\r\n            };\r\n        case UPDATE_SELECTED_MONTH:\r\n            return {\r\n                ...state,\r\n                selectedMonth: action.payload\r\n            };\r\n        case UPDATE_CHART_DATA:\r\n            return {\r\n                ...state,\r\n                chart_data: action.payload\r\n            };\r\n        case UPDATE_AGENT_CHART_DATA:\r\n            return {\r\n                ...state,\r\n                agent_chart_data: action.payload\r\n            };\r\n        case UPDATE_BOTTOMBOX_DRIVER_STATE:\r\n            return {\r\n                ...state,\r\n                bbState: { ...state.bbState, ...action.payload }\r\n            };\r\n        case UPDATE_AGENTS_COMPONENT_STATE:\r\n            return {\r\n                ...state,\r\n                agentCompState: { ...state.agentCompState, ...action.payload }\r\n            };\r\n        case FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            };\r\n        case STOP_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: false\r\n            };\r\n        case GET_SURVEYS:\r\n            return {\r\n                ...state,\r\n                surveys: action.payload,\r\n                bottombox: action.payload.filter(\r\n                    item => item.bottombox == 1 && !item.rca\r\n                ),\r\n                isFetching: false\r\n            };\r\n        case GET_AGENTS:\r\n            return {\r\n                ...state,\r\n                agents: action.payload,\r\n                isFetching: false\r\n            };\r\n        case GET_RCAS:\r\n            return {\r\n                ...state,\r\n\r\n                rcas: action.payload,\r\n                isFetching: false\r\n            };\r\n        case DELETE_SURVEY:\r\n            return {\r\n                ...state,\r\n                surveys: state.surveys.filter(\r\n                    item => action.payload != item.reference_number\r\n                ),\r\n                surveys_view: state.surveys_view.filter(\r\n                    item => action.payload != item.reference_number\r\n                ),\r\n                bottombox: state.bottombox.filter(\r\n                    item => action.payload != item.reference_number\r\n                ),\r\n                rcas: state.rcas.filter(\r\n                    item => action.payload != item.surveyed_ticket\r\n                ),\r\n                isFetching: false\r\n            };\r\n        case ADD_SURVEY:\r\n            return {\r\n                ...state,\r\n                surveys: [action.payload, ...state.surveys],\r\n                surveys_view: [action.payload, ...state.surveys_view]\r\n                // isFetching: false\r\n            };\r\n        case ADD_FAILED_SURVEY:\r\n            return {\r\n                ...state,\r\n                upload_failed_surveys: [\r\n                    action.payload,\r\n                    ...state.upload_failed_surveys\r\n                ]\r\n                // isFetching: false\r\n            };\r\n        case GET_BOTTOMBOX:\r\n            return {\r\n                ...state,\r\n                bottombox: [\r\n                    ...(action.payload.bottombox == 1 && [action.payload]),\r\n                    ...state.bottombox\r\n                ]\r\n                // isFetching: false\r\n            };\r\n        case GET_SURVEY:\r\n            return {\r\n                ...state,\r\n                survey: action.payload\r\n            };\r\n        case REMOVE_SURVEY:\r\n            return {\r\n                ...state,\r\n                survey: action.payload,\r\n                agent: {}\r\n            };\r\n        case GET_AGENT:\r\n            return {\r\n                ...state,\r\n                agent: action.payload,\r\n                filtered_agent_data: state.surveys.filter(\r\n                    survey =>\r\n                        survey.operator_lan_id ===\r\n                        action.payload.operator_lan_id\r\n                ),\r\n\r\n                agent_chart_data: get_data(\r\n                    state.surveys\r\n                        .map(survey => {\r\n                            let x = state.rcas.filter(\r\n                                rca =>\r\n                                    rca.surveyed_ticket ===\r\n                                    survey.reference_number\r\n                            )[0];\r\n                            return { ...survey, ...x };\r\n                        })\r\n                        .filter(\r\n                            data =>\r\n                                new Date(data.date_issued).getFullYear() ===\r\n                                curr_year\r\n                        )\r\n                        .filter(\r\n                            survey =>\r\n                                survey.operator_lan_id ===\r\n                                action.payload.operator_lan_id\r\n                        )\r\n                        .filter(\r\n                            data =>\r\n                                new Date(data.date_issued).getFullYear() ===\r\n                                curr_year\r\n                        )\r\n                ),\r\n                selectedMonth: \"\"\r\n            };\r\n        case GET_SKILLS:\r\n            return {\r\n                ...state,\r\n                skills: action.payload,\r\n                isFetching: false\r\n            };\r\n        case GET_DSAT_CODE1:\r\n            return {\r\n                ...state,\r\n                dsat_code1: action.payload,\r\n                isFetching: false\r\n            };\r\n        case DELETE_DSAT_CODE1:\r\n            return {\r\n                ...state,\r\n                dsat_code1: state.dsat_code1.filter(\r\n                    item => action.payload != item.id\r\n                ),\r\n                isFetching: false\r\n            };\r\n\r\n        case UPDATE_DSAT_CODE1:\r\n            return {\r\n                ...state,\r\n                dsat_code1: state.dsat_code1.map(item => {\r\n                    if (item.id == action.payload.id) {\r\n                        return action.payload;\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                }),\r\n                isFetching: false\r\n            };\r\n        case DELETE_BB_DRIVER_CODE2:\r\n            return {\r\n                ...state,\r\n                bb_driver_code2: state.bb_driver_code2.filter(\r\n                    item => action.payload != item.id\r\n                ),\r\n                isFetching: false\r\n            };\r\n        case DELETE_BB_DRIVER_CODE3:\r\n            return {\r\n                ...state,\r\n                bb_driver_code3: state.bb_driver_code3.filter(\r\n                    item => action.payload != item.id\r\n                ),\r\n                isFetching: false\r\n            };\r\n        case UPDATE_BB_DRIVER_CODE2:\r\n            return {\r\n                ...state,\r\n                bb_driver_code2: state.bb_driver_code2.map(item => {\r\n                    if (item.id == action.payload.id) {\r\n                        return action.payload;\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                }),\r\n                isFetching: false\r\n            };\r\n        case UPDATE_BB_DRIVER_CODE3:\r\n            return {\r\n                ...state,\r\n                bb_driver_code3: state.bb_driver_code3.map(item => {\r\n                    if (item.id == action.payload.id) {\r\n                        return action.payload;\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                }),\r\n                isFetching: false\r\n            };\r\n        case GET_BB_DRIVER_CODE2:\r\n            return {\r\n                ...state,\r\n                bb_driver_code2: action.payload,\r\n                isFetching: false\r\n            };\r\n        case GET_BB_DRIVER_CODE3:\r\n            return {\r\n                ...state,\r\n                bb_driver_code3: action.payload,\r\n                isFetching: false\r\n            };\r\n        case GET_TEAMS:\r\n            return {\r\n                ...state,\r\n                teams: action.payload,\r\n                isFetching: false\r\n            };\r\n        case ADD_TEAM:\r\n            return {\r\n                ...state,\r\n                teams: [action.payload, ...state.teams],\r\n                isFetching: false\r\n            };\r\n        case ADD_RCA:\r\n            return {\r\n                ...state,\r\n                rcas: [action.payload, ...state.rcas],\r\n                bottombox: state.bottombox.filter(\r\n                    item =>\r\n                        action.payload.surveyed_ticket != item.reference_number\r\n                ),\r\n                pieChartCompletedSurveysCount: state.pieChartCompletedSurveysCount.map(\r\n                    (val, index, arr) => (index == 0 ? val + 1 : val)\r\n                ),\r\n                isFetching: false\r\n            };\r\n        case ADD_SKILL:\r\n            return {\r\n                ...state,\r\n                skills: [action.payload, ...state.skills],\r\n                isFetching: false\r\n            };\r\n        case GET_TEAMLEADS:\r\n            return {\r\n                ...state,\r\n                teamleads: action.payload,\r\n                isFetching: false\r\n            };\r\n        case ADD_TEAMLEAD:\r\n            return {\r\n                ...state,\r\n                teamleads: [action.payload, ...state.teamleads],\r\n                isFetching: false\r\n            };\r\n        case ADD_DSAT_CODE1:\r\n            return {\r\n                ...state,\r\n                dsat_code1: [action.payload, ...state.dsat_code1],\r\n                isFetching: false\r\n            };\r\n        case ADD_BB_DRIVER_CODE2:\r\n            return {\r\n                ...state,\r\n                bb_driver_code2: [action.payload, ...state.bb_driver_code2],\r\n                isFetching: false\r\n            };\r\n        case ADD_BB_DRIVER_CODE3:\r\n            return {\r\n                ...state,\r\n                bb_driver_code3: [action.payload, ...state.bb_driver_code3],\r\n                isFetching: false\r\n            };\r\n        case UPDATE_SURVEY:\r\n            return {\r\n                ...state,\r\n                surveys_view: [\r\n                    action.payload,\r\n                    ...state.surveys_view.filter(\r\n                        survey =>\r\n                            survey.reference_number !==\r\n                            action.payload.reference_number\r\n                    )\r\n                ],\r\n                surveys: [\r\n                    action.payload,\r\n                    ...state.surveys.filter(\r\n                        survey =>\r\n                            survey.reference_number !==\r\n                            action.payload.reference_number\r\n                    )\r\n                ],\r\n\r\n                isFetching: false\r\n            };\r\n        case UPDATE_RCA:\r\n            return {\r\n                ...state,\r\n                rcas: state.rcas.map(rca => {\r\n                    if (rca.id == action.payload.id) {\r\n                        return action.payload;\r\n                    } else {\r\n                        return rca;\r\n                    }\r\n                }),\r\n                isFetching: false\r\n            };\r\n        case DELETE_RCA:\r\n            return {\r\n                ...state,\r\n                rcas: state.rcas.filter(item => action.payload.id != item.id),\r\n                bottombox: [action.payload, ...state.bottombox],\r\n                pieChartCompletedSurveysCount: state.pieChartCompletedSurveysCount.map(\r\n                    (val, index, arr) => (index == 0 ? val - 1 : val)\r\n                ),\r\n\r\n                isFetching: false\r\n            };\r\n        case UPDATE_AGENT:\r\n            return {\r\n                ...state,\r\n                agents: state.agents.map(agent => {\r\n                    if (\r\n                        agent.operator_lan_id == action.payload.operator_lan_id\r\n                    ) {\r\n                        return action.payload;\r\n                    } else {\r\n                        return agent;\r\n                    }\r\n                }),\r\n                agent: { ...action.payload },\r\n                isFetching: false\r\n            };\r\n        case ADD_AGENT:\r\n            return {\r\n                ...state,\r\n                agents: [action.payload, ...state.agents],\r\n                isFetching: false\r\n            };\r\n        case GET_RCA:\r\n            return {\r\n                ...state,\r\n                rca: state.rcas.find(rca => {\r\n                    return action.payload == rca.surveyed_ticket;\r\n                })\r\n            };\r\n        case REMOVE_RCA:\r\n            return {\r\n                ...state,\r\n                rca: {}\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default surveyReducer;\r\n","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    msg: {},\r\n    status: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return {\r\n                msg: action.payload.msg,\r\n                status: action.payload.status\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { CREATE_MESSAGE, GET_MESSAGES } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_MESSAGES:\r\n            return action.payload;\r\n        case CREATE_MESSAGE:\r\n            return (state = action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    token: localStorage.getItem(\"token\"),\r\n    isAuthenticated: null,\r\n    isLoading: false,\r\n    user: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            };\r\n        case USER_LOADED:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true,\r\n                isLoading: false,\r\n                user: action.payload[0]\r\n            };\r\n        case LOGIN_SUCCESS:\r\n        case REGISTER_SUCCESS:\r\n            localStorage.setItem(\"token\", action.payload.token);\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuthenticated: true,\r\n                isLoading: false\r\n            };\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case LOGOUT_SUCCESS:\r\n        case REGISTER_FAIL:\r\n            localStorage.removeItem(\"token\");\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                user: null,\r\n                isAuthenticated: false,\r\n                isLoading: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { MODAL_TOGGLE } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    isOpen: false\r\n};\r\n\r\nconst modalToggleReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case MODAL_TOGGLE:\r\n            return {\r\n                isOpen: !state.isOpen\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default modalToggleReducer;\r\n","import {\r\n    FETCHING,\r\n    STOP_FETCHING,\r\n    ACK_ENTRY,\r\n    ADD_UPDATE,\r\n    GET_COMMENTS,\r\n    GET_CCMS,\r\n    GET_BUSINESS_UNIT,\r\n    GET_TICKET_STATUS,\r\n    GET_ESCALATION_TYPE,\r\n    GET_ACCOUNTABLE_TEAM,\r\n    GET_SITE_CODE,\r\n    UPDATE_CCMS,\r\n    GET_CCMS_OWNER,\r\n    GET_CCMS_STATUS,\r\n    ADD_COMMENT,\r\n    GET_SILO,\r\n    GET_TICKET_TYPE,\r\n    GET_SELECTED_CCMS,\r\n    REMOVE_SELECTED_CCMS,\r\n    GET_CCMS_LIST_PER_USER,\r\n    OPEN_COLLAPSE,\r\n    CLOSE_COLLAPSE,\r\n    SEARCH,\r\n    GET_CCMS_ADMIN_LIST,\r\n    GET_USERS_LIST,\r\n    REMOVE_USER_FROM_CCMS_ADMIN,\r\n    ADD_USER_TO_CCMS_ADMIN,\r\n    TOGGLE_MODAL,\r\n    OPEN_MODAL,\r\n    CLOSE_MODAL,\r\n    FETCHING_COMMENTS,\r\n    ADD_REQUEST_ACCESS,\r\n    GET_REQUEST_ACCESS,\r\n    ADD_CCMS_OWNER,\r\n    REMOVE_ACCESS_REQUEST,\r\n    GET_CAUSE_CODE,\r\n    GET_ESCALATION_DRIVER,\r\n    GET_ESCALATION_DRIVER_CAUSE,\r\n    ADD_CAUSE_CODE,\r\n    DELETE_CAUSE_CODE,\r\n    EDIT_CAUSE_CODE,\r\n    ADD_ESCALATION_DRIVER,\r\n    DELETE_ESCALATION_DRIVER,\r\n    EDIT_ESCALATION_DRIVER,\r\n    ADD_ESCALATION_DRIVER_CAUSE,\r\n    DELETE_ESCALATION_DRIVER_CAUSE,\r\n    EDIT_ESCALATION_DRIVER_CAUSE,\r\n    GET_CCMS_RCA,\r\n    CLOSE_RCA_MODAL,\r\n    COMPLETE_CCMS_RCA,\r\n    TOGGLE_ACTIVE_TAB,\r\n    COMPLETE_FNI,\r\n    GET_FNI_LIST,\r\n    SUBMIT_CA,\r\n    GET_CA_LIST,\r\n    GET_SELECTED_CCMS_ONLY,\r\n    ADD_BUSINESS_UNIT,\r\n    DELETE_BUSINESS_UNIT,\r\n    EDIT_BUSINESS_UNIT,\r\n    ADD_TICKET_TYPE,\r\n    DELETE_TICKET_TYPE,\r\n    EDIT_TICKET_TYPE,\r\n    ADD_SILO,\r\n    DELETE_SILO,\r\n    EDIT_SILO,\r\n    ADD_CCMS_STATUS,\r\n    DELETE_CCMS_STATUS,\r\n    EDIT_CCMS_STATUS,\r\n    ADD_SITE_CODE,\r\n    DELETE_SITE_CODE,\r\n    EDIT_SITE_CODE,\r\n    ADD_ACCOUNTABLE_TEAM,\r\n    DELETE_ACCOUNTABLE_TEAM,\r\n    EDIT_ACCOUNTABLE_TEAM,\r\n    ADD_ESCALATION_TYPE,\r\n    DELETE_ESCALATION_TYPE,\r\n    EDIT_ESCALATION_TYPE,\r\n    COMPLETE_CCMS,\r\n    SET_TABLE_PAGE,\r\n    DENY_REQUEST_ACCESS\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    search: \"\",\r\n    ccms_list: [],\r\n    isFetching: false,\r\n    comments: [],\r\n    business_unit: null,\r\n    ticket_status: null,\r\n    escalation_type: null,\r\n    accountable_team: null,\r\n    site_code: null,\r\n    ccms_owner: null,\r\n    ccms_status: null,\r\n    ticket_type: null,\r\n    silo: null,\r\n    selected_ccms: null,\r\n    ccms_list_per_user: null,\r\n    collapse: false,\r\n    filtered_ccms_list: [],\r\n    ccms_admin_list: null,\r\n    users_list: null,\r\n    modal: false,\r\n    is_fetching_comments: false,\r\n    access_request: null,\r\n    cause_code: null,\r\n    escalation_driver: null,\r\n    escalation_driver_cause: null,\r\n    ccms_rca: null,\r\n    ccms_rca_modal: false,\r\n    activeTab: 1,\r\n    fni: null,\r\n    ca: null\r\n};\r\n\r\nconst ccmsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TABLE_PAGE:\r\n            return {\r\n                ...state,\r\n                page: action.payload\r\n            };\r\n        case SEARCH:\r\n            return {\r\n                ...state,\r\n                filtered_ccms_list: state.ccms_list.filter(\r\n                    item =>\r\n                        action.payload == item.id ||\r\n                        action.payload == item.escalated_ticket ||\r\n                        action.payload == item.escalated_email_address ||\r\n                        action.payload == item.escalated_name\r\n                ),\r\n                search: action.payload\r\n            };\r\n        case EDIT_ESCALATION_TYPE:\r\n            return {\r\n                ...state,\r\n                escalation_type: update_list(\r\n                    state.escalation_type,\r\n                    action.payload\r\n                )\r\n            };\r\n        case ADD_ESCALATION_TYPE:\r\n            return {\r\n                ...state,\r\n                escalation_type: [action.payload, ...state.escalation_type]\r\n            };\r\n        case DELETE_ESCALATION_TYPE:\r\n            return {\r\n                ...state,\r\n                escalation_type: removeItemFromList(\r\n                    state.escalation_type,\r\n                    action.payload\r\n                )\r\n            };\r\n        case EDIT_ACCOUNTABLE_TEAM:\r\n            return {\r\n                ...state,\r\n                accountable_team: update_list(\r\n                    state.accountable_team,\r\n                    action.payload\r\n                )\r\n            };\r\n        case ADD_ACCOUNTABLE_TEAM:\r\n            return {\r\n                ...state,\r\n                accountable_team: [action.payload, ...state.accountable_team]\r\n            };\r\n        case DELETE_ACCOUNTABLE_TEAM:\r\n            return {\r\n                ...state,\r\n                accountable_team: removeItemFromList(\r\n                    state.accountable_team,\r\n                    action.payload\r\n                )\r\n            };\r\n        case EDIT_SITE_CODE:\r\n            return {\r\n                ...state,\r\n                site_code: update_list(state.site_code, action.payload)\r\n            };\r\n        case ADD_SITE_CODE:\r\n            return {\r\n                ...state,\r\n                site_code: [action.payload, ...state.site_code]\r\n            };\r\n        case DELETE_SITE_CODE:\r\n            return {\r\n                ...state,\r\n                site_code: removeItemFromList(state.site_code, action.payload)\r\n            };\r\n        case EDIT_CCMS_STATUS:\r\n            return {\r\n                ...state,\r\n                ccms_status: update_list(state.ccms_status, action.payload)\r\n            };\r\n        case ADD_CCMS_STATUS:\r\n            return {\r\n                ...state,\r\n                ccms_status: [action.payload, ...state.ccms_status]\r\n            };\r\n        case DELETE_CCMS_STATUS:\r\n            return {\r\n                ...state,\r\n                ccms_status: removeItemFromList(\r\n                    state.ccms_status,\r\n                    action.payload\r\n                )\r\n            };\r\n        case EDIT_SILO:\r\n            return {\r\n                ...state,\r\n                silo: update_list(state.silo, action.payload)\r\n            };\r\n        case ADD_SILO:\r\n            return {\r\n                ...state,\r\n                silo: [action.payload, ...state.silo]\r\n            };\r\n        case DELETE_SILO:\r\n            return {\r\n                ...state,\r\n                silo: removeItemFromList(state.silo, action.payload)\r\n            };\r\n        case EDIT_TICKET_TYPE:\r\n            return {\r\n                ...state,\r\n                ticket_type: update_list(state.ticket_type, action.payload)\r\n            };\r\n        case ADD_TICKET_TYPE:\r\n            return {\r\n                ...state,\r\n                ticket_type: [action.payload, ...state.ticket_type]\r\n            };\r\n        case DELETE_TICKET_TYPE:\r\n            return {\r\n                ...state,\r\n                ticket_type: removeItemFromList(\r\n                    state.ticket_type,\r\n                    action.payload\r\n                )\r\n            };\r\n        case EDIT_BUSINESS_UNIT:\r\n            return {\r\n                ...state,\r\n                business_unit: update_list(state.business_unit, action.payload)\r\n            };\r\n        case ADD_BUSINESS_UNIT:\r\n            return {\r\n                ...state,\r\n                business_unit: [action.payload, ...state.business_unit]\r\n            };\r\n        case DELETE_BUSINESS_UNIT:\r\n            return {\r\n                ...state,\r\n                business_unit: removeItemFromList(\r\n                    state.business_unit,\r\n                    action.payload\r\n                )\r\n            };\r\n        case GET_CA_LIST:\r\n            return {\r\n                ...state,\r\n                ca: action.payload\r\n            };\r\n        case SUBMIT_CA:\r\n            return {\r\n                ...state,\r\n                ca: [...state.ca, action.payload]\r\n            };\r\n        case GET_FNI_LIST:\r\n            return {\r\n                ...state,\r\n                fni: action.payload\r\n            };\r\n        case COMPLETE_FNI:\r\n            return {\r\n                ...state,\r\n                fni: [...state.fni, action.payload]\r\n            };\r\n        case TOGGLE_ACTIVE_TAB:\r\n            return {\r\n                ...state,\r\n                activeTab: action.payload\r\n            };\r\n        case CLOSE_RCA_MODAL:\r\n            return {\r\n                ...state,\r\n                ccms_rca_modal: false,\r\n                ccms_rca: null,\r\n                fni: null,\r\n                ca: null\r\n            };\r\n        case COMPLETE_CCMS_RCA:\r\n            return {\r\n                ...state,\r\n                ccms_rca: action.payload,\r\n                ccms_list: state.ccms_list.map(ccms =>\r\n                    ccms.id === action.payload.ccms\r\n                        ? { ...ccms, is_rca_completed: true }\r\n                        : ccms\r\n                )\r\n            };\r\n        case GET_CCMS_RCA:\r\n            return {\r\n                ...state,\r\n                ccms_rca: action.payload[0],\r\n                ccms_rca_modal: true\r\n            };\r\n        case ADD_ESCALATION_DRIVER_CAUSE:\r\n            return {\r\n                ...state,\r\n                escalation_driver_cause: [\r\n                    ...state.escalation_driver_cause,\r\n                    action.payload\r\n                ]\r\n            };\r\n        case ADD_ESCALATION_DRIVER:\r\n            return {\r\n                ...state,\r\n                escalation_driver: [...state.escalation_driver, action.payload]\r\n            };\r\n        case DELETE_ESCALATION_DRIVER_CAUSE:\r\n            return {\r\n                ...state,\r\n                escalation_driver_cause: removeItemFromList(\r\n                    state.escalation_driver_cause,\r\n                    action.payload\r\n                )\r\n            };\r\n        case DELETE_ESCALATION_DRIVER:\r\n            return {\r\n                ...state,\r\n                escalation_driver: removeItemFromList(\r\n                    state.escalation_driver,\r\n                    action.payload\r\n                )\r\n            };\r\n        case EDIT_ESCALATION_DRIVER_CAUSE:\r\n            return {\r\n                ...state,\r\n                escalation_driver_cause: update_list(\r\n                    state.escalation_driver_cause,\r\n                    action.payload\r\n                )\r\n            };\r\n        case EDIT_ESCALATION_DRIVER:\r\n            return {\r\n                ...state,\r\n                escalation_driver: update_list(\r\n                    state.escalation_driver,\r\n                    action.payload\r\n                )\r\n            };\r\n        case EDIT_CAUSE_CODE:\r\n            return {\r\n                ...state,\r\n                cause_code: update_list(state.cause_code, action.payload)\r\n            };\r\n        case DELETE_CAUSE_CODE:\r\n            return {\r\n                ...state,\r\n                cause_code: removeItemFromList(\r\n                    state.cause_code,\r\n                    action.payload\r\n                ),\r\n                escalation_driver: state.escalation_driver.filter(\r\n                    item => item.cause_code != action.payload.id\r\n                )\r\n            };\r\n        case ADD_CAUSE_CODE:\r\n            return {\r\n                ...state,\r\n                cause_code: [...state.cause_code, action.payload]\r\n            };\r\n        case GET_ESCALATION_DRIVER_CAUSE:\r\n            return {\r\n                ...state,\r\n                escalation_driver_cause: action.payload\r\n            };\r\n        case GET_ESCALATION_DRIVER:\r\n            return {\r\n                ...state,\r\n                escalation_driver: action.payload\r\n            };\r\n        case GET_CAUSE_CODE:\r\n            return {\r\n                ...state,\r\n                cause_code: action.payload\r\n            };\r\n        case REMOVE_ACCESS_REQUEST:\r\n            return {\r\n                ...state,\r\n                access_request: state.access_request.filter(\r\n                    item => item.id != action.payload.id\r\n                )\r\n            };\r\n        case ADD_CCMS_OWNER:\r\n            return {\r\n                ...state,\r\n                ccms_owner: [...state.ccms_owner, action.payload]\r\n            };\r\n        case GET_REQUEST_ACCESS:\r\n            return {\r\n                ...state,\r\n                access_request:\r\n                    action.payload.length != 0 ? action.payload : null\r\n            };\r\n        case DENY_REQUEST_ACCESS:\r\n            return {\r\n                ...state,\r\n                access_request: removeItemFromList(\r\n                    state.access_request,\r\n                    action.payload\r\n                )\r\n            };\r\n        case ADD_REQUEST_ACCESS:\r\n            return {\r\n                ...state,\r\n                access_request: [action.payload, ...state.access_request]\r\n            };\r\n        case FETCHING_COMMENTS:\r\n            return {\r\n                ...state,\r\n                is_fetching_comments: true\r\n            };\r\n        case OPEN_MODAL:\r\n            return {\r\n                ...state,\r\n                modal: true\r\n            };\r\n        case CLOSE_MODAL:\r\n            return {\r\n                ...state,\r\n                modal: false,\r\n                selected_ccms: null,\r\n                comments: []\r\n            };\r\n        case TOGGLE_MODAL:\r\n            return {\r\n                ...state,\r\n                modal: !state.modal\r\n            };\r\n        case FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            };\r\n        case GET_USERS_LIST:\r\n            return {\r\n                ...state,\r\n                users_list: action.payload\r\n            };\r\n        case GET_CCMS_ADMIN_LIST:\r\n            return {\r\n                ...state,\r\n                ccms_admin_list: action.payload\r\n            };\r\n        case CLOSE_COLLAPSE:\r\n            return {\r\n                ...state,\r\n                collapse: false\r\n            };\r\n        case OPEN_COLLAPSE:\r\n            return {\r\n                ...state,\r\n                collapse: true\r\n            };\r\n        case STOP_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: false\r\n            };\r\n        case GET_CCMS_LIST_PER_USER:\r\n            return {\r\n                ...state,\r\n                ccms_list_per_user: action.payload\r\n            };\r\n        case ADD_COMMENT:\r\n            return {\r\n                ...state,\r\n                comments: [...state.comments, action.payload],\r\n                selected_ccms: {\r\n                    ...state.selected_ccms,\r\n                    ccms_status: action.payload.ccms.ccms_status\r\n                }\r\n            };\r\n        case ADD_USER_TO_CCMS_ADMIN:\r\n            return {\r\n                ...state,\r\n\r\n                ccms_admin_list: [...state.ccms_admin_list, action.payload]\r\n            };\r\n        case REMOVE_USER_FROM_CCMS_ADMIN:\r\n            return {\r\n                ...state,\r\n                ccms_admin_list: state.ccms_admin_list.filter(\r\n                    item => item.id != action.payload.id\r\n                )\r\n\r\n                // users_list: [...state.users_list, action.payload]\r\n            };\r\n        case REMOVE_SELECTED_CCMS:\r\n            return {\r\n                ...state,\r\n                selected_ccms: null,\r\n                collapse: false\r\n            };\r\n        case GET_SELECTED_CCMS:\r\n            return {\r\n                ...state,\r\n                selected_ccms: action.payload.selected_ccms,\r\n                comments: action.payload.comments,\r\n                is_fetching_comments: false,\r\n                modal: true\r\n            };\r\n        case GET_SELECTED_CCMS_ONLY:\r\n            return {\r\n                ...state,\r\n                selected_ccms: action.payload\r\n            };\r\n        case GET_SILO:\r\n            return {\r\n                ...state,\r\n                silo: action.payload\r\n            };\r\n        case GET_TICKET_TYPE:\r\n            return {\r\n                ...state,\r\n                ticket_type: action.payload\r\n            };\r\n        case GET_CCMS_STATUS:\r\n            return {\r\n                ...state,\r\n                ccms_status: action.payload\r\n            };\r\n        case GET_CCMS_OWNER:\r\n            return {\r\n                ...state,\r\n                ccms_owner: action.payload\r\n            };\r\n        case GET_SITE_CODE:\r\n            return {\r\n                ...state,\r\n                site_code: action.payload\r\n            };\r\n        case GET_ACCOUNTABLE_TEAM:\r\n            return {\r\n                ...state,\r\n                accountable_team: action.payload\r\n            };\r\n        case GET_ESCALATION_TYPE:\r\n            return {\r\n                ...state,\r\n                escalation_type: action.payload\r\n            };\r\n        case GET_TICKET_STATUS:\r\n            return {\r\n                ...state,\r\n                ticket_status: action.payload\r\n            };\r\n        case GET_BUSINESS_UNIT:\r\n            return {\r\n                ...state,\r\n                business_unit: action.payload\r\n            };\r\n        case GET_CCMS:\r\n            // console.log(action.payload);\r\n            return {\r\n                ...state,\r\n                ccms_list: action.payload\r\n            };\r\n        case GET_COMMENTS:\r\n            // console.log(action.payload);\r\n            return {\r\n                ...state,\r\n                comments: action.payload,\r\n                is_fetching_comments: false\r\n            };\r\n        case ACK_ENTRY:\r\n            // console.log(action.payload);\r\n            return {\r\n                ...state,\r\n                ccms_list: state.ccms_list.map(item => {\r\n                    if (item.id == action.payload.id) {\r\n                        return action.payload;\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                })\r\n            };\r\n        case COMPLETE_CCMS:\r\n            // console.log(action.payload);\r\n            return {\r\n                ...state,\r\n                ccms_list: update_list(\r\n                    state.ccms_list,\r\n                    action.payload.completed_ccms\r\n                ),\r\n                selected_ccms: action.payload.completed_ccms,\r\n                comments: [...state.comments, action.payload.comment],\r\n                isFetching: false\r\n            };\r\n        case UPDATE_CCMS:\r\n            // console.log(action.payload);\r\n            return {\r\n                ...state,\r\n                ccms_list: update_list(state.ccms_list, action.payload),\r\n                selected_ccms: action.payload\r\n            };\r\n        case ADD_UPDATE:\r\n            // console.log(action.payload);\r\n            return {\r\n                ...state,\r\n                comments: [...state.comments, action.payload]\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst update_list = (list, new_entry) =>\r\n    list.map(item => (item.id == new_entry.id ? new_entry : item));\r\n\r\nconst removeItemFromList = (list, new_entry) =>\r\n    list.filter(item => item.id != new_entry.id);\r\n\r\nexport default ccmsReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport surveyReducer from \"./surveyReducer\";\r\nimport errors from \"./errors\";\r\nimport messages from \"./messages\";\r\nimport auth from \"./auth\";\r\nimport modalToggleReducer from \"./modalToggleReducer\";\r\nimport ccmsReducers from \"./ccmsReducers\";\r\n\r\nexport default combineReducers({\r\n    surveys: surveyReducer,\r\n    modal: modalToggleReducer,\r\n    errors,\r\n    auth,\r\n    messages,\r\n    ccms: ccmsReducers\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport Ccms from \"./ccms/components/Ccms\";\r\n\r\nimport BottomBox from \"./bottombox/dashboard/BottomBox\";\r\nimport Alerts from \"./bottombox/components/Alerts\";\r\n\r\nimport PrivateRoute from \"./common/PrivateRoute\";\r\nimport NavBar from \"./NavBar\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport Welcome from \"./Welcome\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { Provider as AlertProvider } from \"react-alert\";\r\nimport AlertTemplate from \"react-alert-template-basic\";\r\n\r\nimport { loadUser } from \"../actions/auth\";\r\n\r\nimport store from \"../store\";\r\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\r\n\r\n// import \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"../font/stylesheet.css\";\r\nimport \"../css/main.css\";\r\n\r\n// Alert options\r\nconst alertOptions = {\r\n    timeout: 6000,\r\n    position: \"bottom center\"\r\n};\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.getCreds();\r\n\r\n        // this.userAgentApplication = new UserAgentApplication({\r\n        //     auth: {\r\n        //         clientId: config.appId\r\n        //     },\r\n        //     cache: {\r\n        //         cacheLocation: \"localStorage\",\r\n        //         storeAuthStateInCookie: true\r\n        //     }\r\n        // });\r\n\r\n        // var user = this.userAgentApplication.getAccount();\r\n\r\n        this.state = {\r\n            isAuthenticated: false,\r\n            user: {},\r\n            error: null\r\n        };\r\n    }\r\n\r\n    async getCreds() {\r\n        try {\r\n            await store.dispatch(loadUser());\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    setErrorMessage(message, debug) {\r\n        this.setState({\r\n            error: { message: message, debug: debug }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let error = null;\r\n        if (this.state.error) {\r\n            error = (\r\n                <ErrorMessage\r\n                    message={this.state.error.message}\r\n                    debug={this.state.error.debug}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Provider store={store}>\r\n                <AlertProvider template={AlertTemplate} {...alertOptions}>\r\n                    <Router>\r\n                        <div>\r\n                            <NavBar />\r\n                            <Alerts />\r\n\r\n                            <Route\r\n                                exact\r\n                                path=\"/cba\"\r\n                                render={props => <Welcome />}\r\n                            />\r\n                            <div style={{ marginTop: \"100px\" }}>\r\n                                <div className=\"container-fluid\">\r\n                                    <PrivateRoute\r\n                                        name=\"BottomBox\"\r\n                                        exact\r\n                                        path=\"/bottombox\"\r\n                                        component={BottomBox}\r\n                                    />\r\n                                    <PrivateRoute\r\n                                        name=\"Ccms\"\r\n                                        exact\r\n                                        path=\"/ccms\"\r\n                                        component={Ccms}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Router>\r\n                </AlertProvider>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./css/index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}